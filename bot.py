import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
GROUP_ID = "-1002451371911"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤, —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Ç.–¥.
user_scores = {}
user_status = {}
user_reports_sent = {}
user_waiting_for_video = {}  # –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–æ–≤
user_waiting_for_receipt = {}
user_challenges = {}
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu(user_id: int = None, ctx: ContextTypes.DEFAULT_TYPE = None) -> InlineKeyboardMarkup:
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä "–∞–Ω–∞—Å—Ç–∞—Å–∏—è", –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ö–ë–ñ–£
    kb_buttons = [
        [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="paid_course")],
        [InlineKeyboardButton("üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="nutrition_menu")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="spend_points")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")],
    ]
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ id, –∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä "anastasiya" ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ö–ë–ñ–£
    if user_id and ctx and ctx.user_data.get(user_id, {}).get("instructor") == "anastasiya":
        kb_buttons.append([InlineKeyboardButton("üçè –ö–ë–ñ–£", callback_data="kbju")])
    return InlineKeyboardMarkup(kb_buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á—ë—Ç–∞
def get_report_button_text(ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    gender = ctx.user_data[user_id].get("gender", "male")
    prog = ctx.user_data[user_id].get("program", "home")
    return (("üë©" if gender == "female" else "üë®") +
            ("üè†" if prog == "home" else "üèãÔ∏è") +
            " –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç üìπ")

# --------------------- –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–° ---------------------
async def start_free_course(msg, ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ê–ù–ê–°–¢–ê–°–ò–Ø, —Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫—É—Ä—Å–∞
    if ctx.user_data[user_id].get("instructor") == "anastasiya":
        ctx.user_data[user_id]["gender"] = "female"
        ctx.user_data[user_id]["program"] = "home"
    elif not (ctx.user_data[user_id].get("gender") == "female" and ctx.user_data[user_id].get("program") == "home"):
        return await msg.reply_text("–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß", reply_markup=main_menu(user_id, ctx))

    day = ctx.user_data[user_id].get("current_day", 1)
    if day > 5:
        return await msg.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å! üéâ", reply_markup=main_menu(user_id, ctx))
    photos = {
        1: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9647.PNG?raw=true",
        2: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9648.PNG?raw=true",
        3: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9649.PNG?raw=true",
        4: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9650.PNG?raw=true",
        5: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9651.PNG?raw=true",
    }
    course = {
        1: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
            "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        2: [
            "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
        3: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
            "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)"
        ],
        4: [
            "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
            "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
            "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
            "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
        ],
    }
    exercises = course.get(day, [])
    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(exercises) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(get_report_button_text(ctx, user_id), callback_data=f"send_report_day_{day}")]
    ])
    try:
        await ctx.bot.send_photo(chat_id=msg.chat_id, photo=photos.get(day), caption=text, parse_mode="Markdown", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await msg.reply_text("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.", reply_markup=kb)

async def handle_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])
    if user_reports_sent.get(user_id, {}).get(day):
        return await query.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day}.")
    user_waiting_for_video[user_id] = day
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å üé•")

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û (–ë–ï–°–ü–õ–ê–¢–ù–´–ô/–ü–õ–ê–¢–ù–´–ô –ö–£–†–°) ---------------------
async def handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    if user_id not in user_waiting_for_video:
        return await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –º–µ–Ω—é.")
    data = user_waiting_for_video[user_id]
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    if isinstance(data, tuple) and data[0] == "paid":
        paid_day = data[1]
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–ü–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {paid_day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
        user_scores[user_id] = user_scores.get(user_id, 0) + 30
        del user_waiting_for_video[user_id]
        if paid_day < 5:
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({paid_day+1})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {paid_day+1}", callback_data="paid_next_day")]
                ])
            )
        else:
            await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}.", reply_markup=main_menu(user_id, ctx))
            ctx.user_data[user_id].pop("paid_current_day", None)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    elif isinstance(data, int):
        day = data
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
        user_reports_sent.setdefault(user_id, {})[day] = True
        user_scores[user_id] = user_scores.get(user_id, 0) + 60
        del user_waiting_for_video[user_id]
        if day < 5:
            ctx.user_data[user_id]["current_day"] = day + 1
            new_day = ctx.user_data[user_id]["current_day"]
            user_waiting_for_video[user_id] = new_day
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({new_day})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {new_day}", callback_data="next_day")]
                ])
            )
        else:
            user_status[user_id] = statuses[1]
            await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}.", reply_markup=main_menu(user_id, ctx))
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

# --------------------- –í–´–ë–û–† –ü–û–õ–ê –ò –ü–†–û–ì–†–ê–ú–ú–´ (–ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–°) ---------------------
async def handle_free_course_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (gender/program) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
    if query.data == "free_course" and ("gender" not in ctx.user_data[user_id] or "program" not in ctx.user_data[user_id]):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
             InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
        ])
        return await query.message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=kb)
    # –î–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´next_day¬ª
    await start_free_course(query.message, ctx, user_id)

async def handle_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["gender"] = "male" if query.data == "gender_male" else "female"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="program_home"),
         InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="program_gym")]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["program"] = "home" if query.data == "program_home" else "gym"
    ctx.user_data[user_id]["current_day"] = 1
    await start_free_course(query.message, ctx, user_id)

# --------------------- –°–¢–ê–†–¢ –ò –í–´–ë–û–† –ò–ù–°–¢–†–£–ö–¢–û–†–ê ---------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        if ctx.args:
            try:
                ref = int(ctx.args[0])
                if ref != user_id:
                    user_scores[ref] = user_scores.get(ref, 0) + 100
                    try:
                        await ctx.bot.send_message(chat_id=ref, text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!")
                    except Exception as e:
                        logger.error(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {e}")
            except ValueError:
                pass
        ctx.user_data.setdefault(user_id, {"current_day": 1})
        user_scores[user_id] = user_scores.get(user_id, 0)
        user_status[user_id] = user_status.get(user_id, statuses[0])
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_1"),
             InlineKeyboardButton("üí´ –ê–ù–ê–°–¢–ê–°–ò–Ø", callback_data="instructor_2")],
            [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
            [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
            [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")],
        ])
        await ctx.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    await query.answer()
    if data == "instructor_1":
        ctx.user_data[user_id]["instructor"] = "evgeniy"
        await ctx.bot.send_video(
            chat_id=query.message.chat_id,
            video="https://t.me/PRIVETSTVIEC/2",
            supports_streaming=True,
            caption="üé• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω",
            reply_markup=main_menu(user_id, ctx)
        )
    elif data == "instructor_2":
        ctx.user_data[user_id]["instructor"] = "anastasiya"
        # –î–ª—è –ê–ù–ê–°–¢–ê–°–ò–ò –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        ctx.user_data[user_id]["gender"] = "female"
        ctx.user_data[user_id]["program"] = "home"
        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø üí´")
        await ctx.bot.send_photo(
            chat_id=query.message.chat_id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025-02-08_22-08-36.jpg?raw=true",
            caption="üì∏ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø",
            reply_markup=main_menu(user_id, ctx)
        )
    else:
        sel = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
        if data == "instructor_3":
            sel = "–¢—Ä–µ–Ω–µ—Ä 3 üèãÔ∏è"
        elif data == "instructor_4":
            sel = "–¢—Ä–µ–Ω–µ—Ä 4 ü§º"
        elif data == "instructor_5":
            sel = "–¢—Ä–µ–Ω–µ—Ä 5 ü§∏"
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: {sel}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω üöß\n–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu(user_id, ctx))

# --------------------- –ú–ï–ù–Æ –ü–ò–¢–ê–ù–ò–Ø, –†–ï–§–ï–†–ê–õ, –ß–ï–õ–õ–ï–ù–î–ñ ---------------------
async def handle_nutrition_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üç¥ –ö—É–ø–∏—Ç—å –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_nutrition_menu"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb)

async def handle_buy_nutrition_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_scores.get(user_id, 0) >= 300:
        user_scores[user_id] -= 300
        await query.message.reply_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è: https://t.me/MENUKURO4KIN/2", reply_markup=main_menu(user_id, ctx))
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è!")

async def handle_referral(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    me = await ctx.bot.get_me()
    link = f"https://t.me/{me.username}?start={user_id}"
    await query.message.reply_text(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 –±–∞–ª–ª–æ–≤! üéâ")

# –ß–µ–ª–ª–µ–Ω–¥–∂–∏
async def handle_challenges(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_challenges.get(user_id):
        await send_challenge_task(query.message, user_id)
    elif user_scores.get(user_id, 0) >= 300:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_challenge"),
             InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
        await query.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", reply_markup=kb)
    else:
        await query.message.reply_text(f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –Ω—É–∂–Ω–æ 300 –±–∞–ª–ª–æ–≤.\n–£ –≤–∞—Å: {user_scores.get(user_id, 0)} –±–∞–ª–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")

async def buy_challenge(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_scores.get(user_id, 0) >= 300:
        user_scores[user_id] -= 300
        user_challenges[user_id] = {"current_day": 1}
        await query.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –æ—Ç–∫—Ä—ã—Ç!", reply_markup=main_menu(user_id, ctx))
        await send_challenge_task(query.message, user_id)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞!")

async def send_challenge_task(message, user_id: int):
    day = user_challenges[user_id]["current_day"]
    exercises = {
        1: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 30 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        2: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 25 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
        3: [
            "1Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
            "2Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
        ],
        4: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 60 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 50 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
    }.get(day, [])
    text = f"üí™ **–ß–µ–ª–ª–µ–Ω–¥–∂: –î–µ–Ω—å {day}** üí™\n\n" + "\n".join(exercises)
    if day < 5:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="challenge_next")]])
    else:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]])
    await message.reply_text(text, parse_mode="Markdown", reply_markup=kb)

async def handle_challenge_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id not in user_challenges:
        return await query.answer("–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂! üöß")
    day = user_challenges[user_id]["current_day"]
    if day < 5:
        user_challenges[user_id]["current_day"] = day + 1
        await send_challenge_task(query.message, user_id)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂! üéâ", reply_markup=main_menu(user_id, ctx))
        del user_challenges[user_id]

# --------------------- –ü–õ–ê–¢–ù–´–ô –ö–£–†–° ---------------------
async def handle_paid_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    discount = min(user_scores.get(user_id, 0) * 2, 600)
    price = 2000 - discount
    await query.message.reply_text(
        f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å** üìö\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 2000 —Ä—É–±. üíµ\n–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±. üîñ\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price} —Ä—É–±. üí≥\n\n"
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É: 89236950304 (–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫) üè¶\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_receipt")]
        ])
    )
    user_waiting_for_receipt[user_id] = True

async def handle_send_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt[user_id] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ üì∏.")

async def handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    if not user_waiting_for_receipt.get(user_id) and not ctx.user_data.get(user_id, {}).get("paid_current_day"):
        return await update.message.reply_text("–Ø –Ω–µ –∂–¥—É —á–µ–∫ –æ—Ç –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫. üöß")
    if not update.message.photo:
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ üì∏.")
    await ctx.bot.send_message(chat_id=GROUP_ID, text=f"üßæ –ß–µ–∫ –æ—Ç {user_name} (ID: {user_id}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
    photo_id = update.message.photo[-1].file_id
    await ctx.bot.send_photo(
        chat_id=GROUP_ID,
        photo=photo_id,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user_id}")]
        ])
    )
    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥.")

async def confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[-1])
    user_status[user_id] = statuses[2]
    if user_id in user_waiting_for_receipt:
        del user_waiting_for_receipt[user_id]
    await ctx.bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É. üéâ")
    # –î–ª—è –æ–±–æ–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç:
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="paid_gender_male"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="paid_gender_female")]
    ])
    await ctx.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=kb)

async def handle_paid_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "paid_gender_male":
        await query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")
    elif query.data == "paid_gender_female":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="paid_program_gym"),
             InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="paid_program_home")]
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_paid_program_gym(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["paid_current_day"] = 1
    day1_ex = [
        "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
        "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
        "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
        "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
        "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
    ]
    txt_day1 = ("üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å 1** üìö\n\n" +
                "\n".join(day1_ex) +
                "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•")
    kb_day1 = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="paid_video_day_1")]
    ])
    await ctx.bot.send_message(chat_id=user_id, text=txt_day1, parse_mode="Markdown", reply_markup=kb_day1)

async def handle_paid_program_home(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")

async def handle_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = int(query.data.split("_")[-1])
    user_waiting_for_video[user_id] = ("paid", paid_day)
    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} üé•")

async def handle_paid_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = ctx.user_data[user_id].get("paid_current_day", 1)
    if paid_day < 5:
        next_day = paid_day + 1
        ctx.user_data[user_id]["paid_current_day"] = next_day
        paid_program = {
            1: [
                "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
                "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
                "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
                "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
                "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
            ],
            2: [
                "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
                "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
                "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 (–≤–µ—Å –ø–æ–¥–±–∏—Ä–∞–µ—à—å) https://t.me/c/2241417709/175/176",
                "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261",
            ],
            3: [
                "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
                "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
                "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
                "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
                "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/136/137",
            ],
            4: [
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
                "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5 https://t.me/c/2241417709/159/160",
                "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15 https://t.me/c/2241417709/188/189",
                "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5 https://t.me/c/2241417709/169/170",
                "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12 https://t.me/c/2241417709/210/211",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273",
            ],
            5: [
                "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèÜ",
            ],
        }
        ex = paid_program[next_day]
        text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {next_day}** üìö\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"paid_video_day_{next_day}")]
        ])
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=main_menu(user_id, ctx))
        ctx.user_data[user_id].pop("paid_current_day", None)

# --------------------- "–ú–û–ô –ö–ê–ë–ò–ù–ï–¢", "–û–ë–û –ú–ù–ï", "–ö–ê–ö –ó–ê–†–ê–ë–û–¢–ê–¢–¨/–ü–û–¢–†–ê–¢–ò–¢–¨ –ë–ê–õ–õ–´" ---------------------
async def handle_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores.get(user_id, 0)
    status = user_status.get(user_id, statuses[0])
    text = (f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n\n–°—Ç–∞—Ç—É—Å: {status}\n–ë–∞–ª–ª—ã: {score}\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤! üí™")
    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ:\n\n"
            "–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π –í–∏—Ç–∞–ª—å–µ–≤–∏—á\n–û–±—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–∞–∂ - 20 –ª–µ—Ç\n–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã - 15 –ª–µ—Ç\n"
            "–ú–° - –ø–æ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ\n–ú–° - –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n–°—É–¥—å—è - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n"
            "–ö–ú–° - –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É\n\n20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ! üí•")
    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025.jpg?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–û–±–æ –º–Ω–µ': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:\n\n"
            "1Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "2Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
            "4Ô∏è‚É£ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.")
    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9699.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores.get(user_id, 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã:\n\n–£ –≤–∞—Å –µ—Å—Ç—å {score} –±–∞–ª–ª–æ–≤.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n"
            "- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n"
            "- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")
    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9692.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(user_id, ctx))

# --------------------- –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê "–ö–ë–ñ–£" (–î–õ–Ø –ê–ù–ê–°–¢–ê–°–ò–ò) ---------------------
def calculate_kbju(gender: str, weight: float, height: float, age: int, activity: float, goal: str) -> dict:
    # –†–∞—Å—á–µ—Ç –±–∞–∑–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    if gender.lower() in ['–º', 'male', 'm']:
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    tdee = bmr * activity  # –û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        tdee *= 0.85  # —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 15%
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å":
        tdee *= 1.15  # —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 15%
    calories = tdee
    proteins = weight * 2.0  # –ø—Ä–∏–º–µ—Ä–Ω–æ 2 –≥—Ä–∞–º–º–∞ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
    fats = weight * 1.0      # –ø—Ä–∏–º–µ—Ä–Ω–æ 1 –≥—Ä–∞–º–º –∂–∏—Ä–æ–≤ –Ω–∞ –∫–≥ –≤–µ—Å–∞
    # –û—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —É–≥–ª–µ–≤–æ–¥—ã (1–≥ –±–µ–ª–∫–∞ = 4 –∫–∫–∞–ª, 1–≥ –∂–∏—Ä–∞ = 9 –∫–∫–∞–ª, 1–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ = 4 –∫–∫–∞–ª)
    carbs = (calories - (proteins * 4 + fats * 9)) / 4
    return {
        "calories": round(calories),
        "proteins": round(proteins),
        "fats": round(fats),
        "carbs": round(carbs)
    }

async def handle_kbju_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    # –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –ê–ù–ê–°–¢–ê–°–ò–Ø
    if ctx.user_data.get(user_id, {}).get("instructor") != "anastasiya":
        return await query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ –ê–ù–ê–°–¢–ê–°–ò–Ø", show_alert=True)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£
    ctx.user_data[user_id]["kbju"] = {}
    ctx.user_data[user_id]["kbju_step"] = 1
    await query.message.reply_text("–†–∞—Å—á–µ—Ç –ö–ë–ñ–£.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º/–∂):")

async def handle_kbju_response(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if "kbju_step" not in ctx.user_data.get(user_id, {}):
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ –ö–ë–ñ–£
    step = ctx.user_data[user_id]["kbju_step"]
    text = update.message.text.strip()
    if step == 1:
        ctx.user_data[user_id]["kbju"]["gender"] = text.lower()
        ctx.user_data[user_id]["kbju_step"] = 2
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    elif step == 2:
        try:
            weight = float(text.replace(",", "."))
        except ValueError:
            return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞.")
        ctx.user_data[user_id]["kbju"]["weight"] = weight
        ctx.user_data[user_id]["kbju_step"] = 3
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    elif step == 3:
        try:
            height = float(text.replace(",", "."))
        except ValueError:
            return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞.")
        ctx.user_data[user_id]["kbju"]["height"] = height
        ctx.user_data[user_id]["kbju_step"] = 4
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):")
    elif step == 4:
        try:
            age = int(text)
        except ValueError:
            return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        ctx.user_data[user_id]["kbju"]["age"] = age
        ctx.user_data[user_id]["kbju_step"] = 5
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2, 1.375, 1.55, 1.725, 1.9):")
    elif step == 5:
        try:
            activity = float(text.replace(",", "."))
        except ValueError:
            return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        ctx.user_data[user_id]["kbju"]["activity"] = activity
        ctx.user_data[user_id]["kbju_step"] = 6
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    elif step == 6:
        goal = text.lower()
        if goal not in ["–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å", "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"]:
            return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ü–µ–ª–µ–π: –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ.")
        ctx.user_data[user_id]["kbju"]["goal"] = goal
        data = ctx.user_data[user_id]["kbju"]
        result = calculate_kbju(
            data["gender"],
            data["weight"],
            data["height"],
            data["age"],
            data["activity"],
            data["goal"]
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        del ctx.user_data[user_id]["kbju"]
        del ctx.user_data[user_id]["kbju_step"]
        reply = (f"–í–∞—à —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£:\n"
                 f"–ö–∞–ª–æ—Ä–∏–∏: {result['calories']} –∫–∫–∞–ª\n"
                 f"–ë–µ–ª–∫–∏: {result['proteins']} –≥\n"
                 f"–ñ–∏—Ä—ã: {result['fats']} –≥\n"
                 f"–£–≥–ª–µ–≤–æ–¥—ã: {result['carbs']} –≥")
        await update.message.reply_text(reply, reply_markup=main_menu(user_id, ctx))

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ò –û–ë–©–ê–Ø –°–ë–û–†–ö–ê –•–≠–ù–î–õ–ï–†–û–í ---------------------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))
    app.add_handler(CallbackQueryHandler(handle_free_course_callback, pattern="^(free_course|next_day)$"))
    app.add_handler(CallbackQueryHandler(handle_gender, pattern="^gender_"))
    app.add_handler(CallbackQueryHandler(handle_program, pattern="^program_"))
    app.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"send_report_day_(\d+)"))
    app.add_handler(CallbackQueryHandler(handle_challenges, pattern="^challenge_menu$"))
    app.add_handler(CallbackQueryHandler(buy_challenge, pattern="^buy_challenge$"))
    app.add_handler(CallbackQueryHandler(handle_paid_course, pattern="^paid_course$"))
    app.add_handler(CallbackQueryHandler(handle_send_receipt, pattern="^send_receipt$"))
    app.add_handler(CallbackQueryHandler(confirm_payment, pattern="^confirm_payment_"))
    app.add_handler(CallbackQueryHandler(handle_send_paid_report, pattern=r"^paid_video_day_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_paid_next_day, pattern="^paid_next_day$"))
    app.add_handler(CallbackQueryHandler(handle_paid_gender, pattern="^paid_gender_"))
    app.add_handler(CallbackQueryHandler(handle_paid_program_gym, pattern="^paid_program_gym$"))
    app.add_handler(CallbackQueryHandler(handle_paid_program_home, pattern="^paid_program_home$"))
    app.add_handler(CallbackQueryHandler(handle_my_cabinet, pattern="^my_cabinet$"))
    app.add_handler(CallbackQueryHandler(handle_about_me, pattern="^about_me$"))
    app.add_handler(CallbackQueryHandler(handle_earn_points, pattern="^earn_points$"))
    app.add_handler(CallbackQueryHandler(handle_spend_points, pattern="^spend_points$"))
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern="^nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_buy_nutrition_menu, pattern="^buy_nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_referral, pattern="^referral$"))
    app.add_handler(CallbackQueryHandler(handle_challenge_next_day, pattern="^challenge_next$"))
    app.add_handler(CallbackQueryHandler(handle_back, pattern="^back$"))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ö–ë–ñ–£
    app.add_handler(CallbackQueryHandler(handle_kbju_start, pattern="^kbju$"))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ö–ë–ñ–£
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_kbju_response))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.PHOTO, handle_receipt))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()
