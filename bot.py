import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env (–µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TELEGRAM_TOKEN")
GROUP_ID = os.environ.get("GROUP_ID")  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
STATUSES = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="paid_course")],
        [InlineKeyboardButton("üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="nutrition_menu")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="spend_points")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")],
    ])

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
async def send_photo_with_caption(bot, chat_id, photo_url, caption, reply_markup=None):
    try:
        await bot.send_photo(
            chat_id=chat_id,
            photo=photo_url,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.",
            reply_markup=reply_markup
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context.user_data
def init_user_profile(context: ContextTypes.DEFAULT_TYPE):
    profile = context.user_data.get("profile")
    if not profile:
        profile = {
            "scores": 0,
            "status": STATUSES[0],
            "free_course": {
                "current_day": 1,
                "reports_sent": {}
            },
            "paid_course": {
                "current_day": 1,
            },
            "challenges": {
                "current_day": 1,
            },
            "waiting_for_video": None,    # –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º (–¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞) –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂–µ–º ("paid", day)
            "waiting_for_receipt": False,
            "instructor": None,
            "gender": None,
            "program": None,
            "paid_gender": None,
            "paid_program": None,
        }
        context.user_data["profile"] = profile
    return profile

def get_user_profile(context: ContextTypes.DEFAULT_TYPE):
    return init_user_profile(context)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç¬ª (—É—á–∏—Ç—ã–≤–∞—è –ø–æ–ª –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É)
def get_report_button_text(profile: dict):
    gender = profile.get("gender", "male")
    prog = profile.get("program", "home")
    return (("üë©" if gender=="female" else "üë®") + ("üè†" if prog=="home" else "üèãÔ∏è") + " –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç üìπ")

# ===================== –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–° =====================

async def start_free_course(message, context: ContextTypes.DEFAULT_TYPE):
    profile = get_user_profile(context)
    # –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∑–∞–ø—Ä–æ—Å–∏–º —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä
    if profile.get("gender") is None or profile.get("program") is None:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
             InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
        ])
        await message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=kb)
        return

    day = profile["free_course"].get("current_day", 1)
    if day > 5:
        await message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å! üéâ", reply_markup=get_main_menu())
        return

    photos = {
        1: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9647.PNG?raw=true",
        2: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9648.PNG?raw=true",
        3: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9649.PNG?raw=true",
        4: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9650.PNG?raw=true",
        5: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9651.PNG?raw=true",
    }
    course = {
        1: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
            "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        2: [
            "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
        3: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
            "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)"
        ],
        4: [
            "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
            "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
            "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
            "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
        ],
    }
    exercises = course.get(day, [])
    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(exercises) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(get_report_button_text(profile), callback_data=f"send_report_day_{day}")]
    ])
    await send_photo_with_caption(context.bot, message.chat_id, photos.get(day), text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (–∞ —Ç–∞–∫–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é)
async def handle_free_course_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    await query.answer()
    if query.data == "free_course" and (profile.get("gender") is None or profile.get("program") is None):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
             InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
        ])
        await query.message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=kb)
        return
    await start_free_course(query.message, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    profile["gender"] = "male" if query.data == "gender_male" else "female"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="program_home"),
         InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="program_gym")]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    profile["program"] = "home" if query.data == "program_home" else "gym"
    profile["free_course"]["current_day"] = 1  # —Å–±—Ä–æ—Å –¥–Ω—è –∫—É—Ä—Å–∞
    await start_free_course(query.message, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ-–æ—Ç—á—ë—Ç–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å)
async def handle_send_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    try:
        day = int(query.data.split("_")[-1])
    except ValueError:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    if profile["free_course"]["reports_sent"].get(day):
        await query.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day}.")
        return
    profile["waiting_for_video"] = day
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å üé•")

# ===================== –ü–õ–ê–¢–ù–´–ô –ö–£–†–° =====================

async def handle_paid_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    discount = min(profile["scores"] * 2, 600)
    price = 2000 - discount
    text = (
        f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å** üìö\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 2000 —Ä—É–±. üíµ\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±. üîñ\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price} —Ä—É–±. üí≥\n\n"
        "üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É: 89236950304 (–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫) üè¶\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_receipt")]
    ])
    await query.message.reply_text(text, reply_markup=kb)
    profile["waiting_for_receipt"] = True

async def handle_send_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    profile["waiting_for_receipt"] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ üì∏.")

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    profile = get_user_profile(context)
    user = update.message.from_user
    if not profile.get("waiting_for_receipt"):
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É —á–µ–∫ –æ—Ç –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫. üöß")
        return
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ üì∏.")
        return
    photo_id = update.message.photo[-1].file_id
    await context.bot.send_message(chat_id=GROUP_ID, text=f"üßæ –ß–µ–∫ –æ—Ç {user.first_name} (ID: {user.id}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user.id}")]
    ])
    await context.bot.send_photo(chat_id=GROUP_ID, photo=photo_id, reply_markup=kb)
    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥.")

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    try:
        user_id = int(query.data.split("_")[-1])
    except ValueError:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")
        return
    profile["status"] = STATUSES[2]  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    profile["waiting_for_receipt"] = False
    await context.bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É. üéâ")
    if profile.get("instructor") == "evgeniy":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="paid_gender_male"),
             InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="paid_gender_female")]
        ])
        await context.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=kb)
    else:
        profile["paid_course"]["current_day"] = 1
        await start_paid_course_day(user_id, context)

async def handle_paid_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    if query.data == "paid_gender_male":
        profile["paid_gender"] = "male"
        await query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")
    elif query.data == "paid_gender_female":
        profile["paid_gender"] = "female"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="paid_program_gym"),
             InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="paid_program_home")]
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_paid_program_gym(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    profile["paid_program"] = "gym"
    profile["paid_course"]["current_day"] = 1
    await start_paid_course_day(query.from_user.id, context)

async def handle_paid_program_home(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –¥–Ω—è–º)
async def start_paid_course_day(user_id, context: ContextTypes.DEFAULT_TYPE):
    profile = get_user_profile(context)
    day = profile["paid_course"].get("current_day", 1)
    paid_exercises = {
        1: [
            "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
            "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
            "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
            "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
            "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
        ],
        2: [
            "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
            "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 (–≤–µ—Å –ø–æ–¥–±–∏—Ä–∞–µ—à—å) https://t.me/c/2241417709/175/176",
            "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261",
        ],
        3: [
            "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
            "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
            "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
            "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
            "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/136/137",
        ],
        4: [
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5 https://t.me/c/2241417709/159/160",
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15 https://t.me/c/2241417709/188/189",
            "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5 https://t.me/c/2241417709/169/170",
            "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12 https://t.me/c/2241417709/210/211",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273",
        ],
        5: [
            "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèÜ",
        ],
    }
    exercises = paid_exercises.get(day, [])
    text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}** üìö\n\n" + "\n".join(exercises) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"paid_video_day_{day}")]
    ])
    await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown", reply_markup=kb)

async def handle_send_paid_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    try:
        paid_day = int(query.data.split("_")[-1])
    except ValueError:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    profile["waiting_for_video"] = ("paid", paid_day)
    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} üé•")

async def handle_paid_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    current_day = profile["paid_course"].get("current_day", 1)
    if current_day < 5:
        profile["paid_course"]["current_day"] = current_day + 1
        await start_paid_course_day(query.from_user.id, context)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=get_main_menu())
        profile["paid_course"]["current_day"] = 1  # —Å–±—Ä–æ—Å

# ===================== –ß–ï–õ–õ–ï–ù–î–ñ–ò =====================

async def handle_challenges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    if profile["challenges"].get("current_day"):
        await send_challenge_task(query.message, context)
    elif profile["scores"] >= 300:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_challenge"),
             InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
        await query.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", reply_markup=kb)
    else:
        await query.message.reply_text(f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –Ω—É–∂–Ω–æ 300 –±–∞–ª–ª–æ–≤.\n–£ –≤–∞—Å: {profile['scores']} –±–∞–ª–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")

async def buy_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    if profile["scores"] >= 300:
        profile["scores"] -= 300
        profile["challenges"]["current_day"] = 1
        await query.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –æ—Ç–∫—Ä—ã—Ç!", reply_markup=get_main_menu())
        await send_challenge_task(query.message, context)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞!")

async def send_challenge_task(message, context: ContextTypes.DEFAULT_TYPE):
    profile = get_user_profile(context)
    day = profile["challenges"].get("current_day", 1)
    challenge_exercises = {
        1: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 30 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        2: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 25 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
        3: [
            "1Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
            "2Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
        ],
        4: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 60 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 50 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
    }
    exercises = challenge_exercises.get(day, [])
    text = f"üí™ **–ß–µ–ª–ª–µ–Ω–¥–∂: –î–µ–Ω—å {day}** üí™\n\n" + "\n".join(exercises)
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="challenge_next")]] 
        if day < 5 else [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]]
    )
    await message.reply_text(text, parse_mode="Markdown", reply_markup=kb)

async def handle_challenge_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    if not profile["challenges"].get("current_day"):
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂! üöß")
        return
    day = profile["challenges"]["current_day"]
    if day < 5:
        profile["challenges"]["current_day"] = day + 1
        await send_challenge_task(query.message, context)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂! üéâ", reply_markup=get_main_menu())
        profile["challenges"]["current_day"] = 0

# ===================== –û–ë–©–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ =====================

async def handle_nutrition_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üç¥ –ö—É–ø–∏—Ç—å –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_nutrition_menu"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb)

async def handle_buy_nutrition_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    if profile["scores"] >= 300:
        profile["scores"] -= 300
        await query.message.reply_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è: https://t.me/MENUKURO4KIN/2", reply_markup=get_main_menu())
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è!")

async def handle_referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    me = await context.bot.get_me()
    link = f"https://t.me/{me.username}?start={query.from_user.id}"
    await query.message.reply_text(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 –±–∞–ª–ª–æ–≤! üéâ")

async def handle_my_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    text = (
        f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n\n"
        f"–°—Ç–∞—Ç—É—Å: {profile['status']}\n"
        f"–ë–∞–ª–ª—ã: {profile['scores']}\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤! üí™"
    )
    await send_photo_with_caption(context.bot, update.effective_chat.id,
                                  "https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true",
                                  text)

async def handle_about_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = (
        "üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ:\n\n"
        "–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π –í–∏—Ç–∞–ª—å–µ–≤–∏—á\n"
        "–û–±—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–∞–∂ - 20 –ª–µ—Ç\n"
        "–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã - 15 –ª–µ—Ç\n"
        "–ú–° - –ø–æ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ\n"
        "–ú–° - –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n"
        "–°—É–¥—å—è - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n"
        "–ö–ú–° - –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É\n\n"
        "20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ! üí•"
    )
    await send_photo_with_caption(context.bot, update.effective_chat.id,
                                  "https://github.com/boss198806/telegram-bot/blob/main/photo_2025.jpg?raw=true",
                                  text)

async def handle_earn_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = (
        "üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:\n\n"
        "1Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
        "2Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
        "3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
        "4Ô∏è‚É£ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã."
    )
    await send_photo_with_caption(context.bot, update.effective_chat.id,
                                  "https://github.com/boss198806/telegram-bot/blob/main/IMG_9699.PNG?raw=true",
                                  text)

async def handle_spend_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    text = (
        f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã:\n\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å {profile['scores']} –±–∞–ª–ª–æ–≤.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n"
        "- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n"
        "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n"
        "- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!"
    )
    await send_photo_with_caption(context.bot, update.effective_chat.id,
                                  "https://github.com/boss198806/telegram-bot/blob/main/IMG_9692.PNG?raw=true",
                                  text)

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu())

# ===================== /START –ò –í–´–ë–û–† –ò–ù–°–¢–†–£–ö–¢–û–†–ê =====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    profile = get_user_profile(context)
    user_id = update.effective_user.id
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä; –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if context.args:
        try:
            ref = int(context.args[0])
            if ref != user_id:
                try:
                    await context.bot.send_message(chat_id=ref, text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!")
                except Exception as e:
                    logger.error(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {e}")
        except ValueError:
            pass
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_1"),
            InlineKeyboardButton("üí´ –ê–ù–ê–°–¢–ê–°–ò–Ø", callback_data="instructor_2")
        ],
        [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
        [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
        [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")],
    ])
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", reply_markup=kb)

async def handle_instructor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    profile = get_user_profile(context)
    data = query.data
    await query.answer()
    if data == "instructor_1":
        profile["instructor"] = "evgeniy"
        await context.bot.send_video(
            chat_id=query.message.chat_id,
            video="https://t.me/PRIVETSTVIEC/2",
            supports_streaming=True,
            caption="üé• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω",
            reply_markup=get_main_menu()
        )
    elif data == "instructor_2":
        profile["instructor"] = "anastasiya"
        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø üí´")
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025-02-08_22-08-36.jpg?raw=true",
            caption="üì∏ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø",
            reply_markup=get_main_menu()
        )
    else:
        sel = {
            "instructor_3": "–¢—Ä–µ–Ω–µ—Ä 3 üèãÔ∏è",
            "instructor_4": "–¢—Ä–µ–Ω–µ—Ä 4 ü§º",
            "instructor_5": "–¢—Ä–µ–Ω–µ—Ä 5 ü§∏"
        }.get(data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä")
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: {sel}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω üöß\n–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())

# ===================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====================

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))
    app.add_handler(CallbackQueryHandler(handle_free_course_callback, pattern="^(free_course|next_day)$"))
    app.add_handler(CallbackQueryHandler(handle_gender, pattern="^gender_"))
    app.add_handler(CallbackQueryHandler(handle_program, pattern="^program_"))
    app.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"send_report_day_(\d+)"))
    app.add_handler(CallbackQueryHandler(handle_challenges, pattern="^challenge_menu$"))
    app.add_handler(CallbackQueryHandler(buy_challenge, pattern="^buy_challenge$"))
    app.add_handler(CallbackQueryHandler(handle_paid_course, pattern="^paid_course$"))
    app.add_handler(CallbackQueryHandler(handle_send_receipt, pattern="^send_receipt$"))
    app.add_handler(CallbackQueryHandler(confirm_payment, pattern="^confirm_payment_"))
    app.add_handler(CallbackQueryHandler(handle_send_paid_report, pattern=r"^paid_video_day_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_paid_next_day, pattern="^paid_next_day$"))
    app.add_handler(CallbackQueryHandler(handle_paid_gender, pattern="^paid_gender_"))
    app.add_handler(CallbackQueryHandler(handle_paid_program_gym, pattern="^paid_program_gym$"))
    app.add_handler(CallbackQueryHandler(handle_paid_program_home, pattern="^paid_program_home$"))
    app.add_handler(CallbackQueryHandler(handle_my_cabinet, pattern="^my_cabinet$"))
    app.add_handler(CallbackQueryHandler(handle_about_me, pattern="^about_me$"))
    app.add_handler(CallbackQueryHandler(handle_earn_points, pattern="^earn_points$"))
    app.add_handler(CallbackQueryHandler(handle_spend_points, pattern="^spend_points$"))
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern="^nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_buy_nutrition_menu, pattern="^buy_nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_referral, pattern="^referral$"))
    app.add_handler(CallbackQueryHandler(handle_challenge_next_day, pattern="^challenge_next$"))
    app.add_handler(CallbackQueryHandler(handle_back, pattern="^back$"))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.PHOTO, handle_receipt))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üöÄ")
    app.run_polling()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–æ–±—â–∞—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–æ–≤)
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    profile = get_user_profile(context)
    user = update.message.from_user
    waiting = profile.get("waiting_for_video")
    if waiting:
        if isinstance(waiting, tuple) and waiting[0] == "paid":
            paid_day = waiting[1]
            await context.bot.send_message(chat_id=GROUP_ID, text=f"–ü–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user.first_name} (ID: {user.id}) –∑–∞ –¥–µ–Ω—å {paid_day}.")
            await context.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
            profile["scores"] += 30
            profile["waiting_for_video"] = None
            if paid_day < 5:
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {profile['scores']}.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({paid_day+1})? ‚û°Ô∏è",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {paid_day+1}", callback_data="paid_next_day")]])
                )
            else:
                await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {profile['scores']}.", reply_markup=get_main_menu())
                profile["paid_course"]["current_day"] = 1
        elif isinstance(waiting, int):
            day = waiting
            await context.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user.first_name} (ID: {user.id}) –∑–∞ –¥–µ–Ω—å {day}.")
            profile["free_course"]["reports_sent"][day] = True
            profile["scores"] += 60
            profile["waiting_for_video"] = None
            if day < 5:
                profile["free_course"]["current_day"] = day + 1
                new_day = profile["free_course"]["current_day"]
                profile["waiting_for_video"] = new_day
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {profile['scores']}.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({new_day})? ‚û°Ô∏è",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {new_day}", callback_data="free_course")]])
                )
            else:
                profile["status"] = STATUSES[1]
                await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {profile['scores']}.", reply_markup=get_main_menu())
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –º–µ–Ω—é.")

if __name__ == "__main__":
    main()
