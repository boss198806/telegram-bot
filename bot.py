import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7761949562:AAF-zTgYwd5rzETyr3OnAGCGxrSQefFuKZs"
GROUP_ID = "-1002451371911"

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_scores = {}
user_status = {}
user_reports_sent = {}
user_waiting_for_video = {}
user_waiting_for_challenge_video = {}
user_waiting_for_receipt = {}
user_challenges = {}
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="free_course")],
            [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenge_menu")],
            [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="paid_course")],
            [InlineKeyboardButton("üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="nutrition_menu")],
            [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")],
            [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="earn_points")],
            [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="spend_points")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about_me")],
        ]
    )

# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        context.user_data.setdefault(user_id, {"current_day": 1})
        user_scores[user_id] = user_scores.get(user_id, 0)
        user_status[user_id] = user_status.get(user_id, statuses[0])
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/Photo.jpg?raw=true",
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!",
            reply_markup=main_menu(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
async def handle_free_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in context.user_data:
        context.user_data[user_id] = {"current_day": 1}

    if query.data == "next_day":
        context.user_data[user_id]["current_day"] += 1

    current_day = context.user_data[user_id].get("current_day", 1)
    if current_day > 5:
        await query.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
        return

    photo_paths = {
        1: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9647.PNG?raw=true",
        2: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9648.PNG?raw=true",
        3: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9649.PNG?raw=true",
        4: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9650.PNG?raw=true",
        5: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9651.PNG?raw=true",
    }

    course_program = {
        1: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
            "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)",
        ],
        2: [
            "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)",
        ],
        3: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 (–º–æ–∂–Ω–æ –±–µ–∑ —Ä–µ–∑–∏–Ω–∫–∏) [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
            "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 –Ω–∞ –∫–∞–∂–¥—É—é [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)",
        ],
        4: [
            "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
            "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
            "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π (–º–æ–∂–Ω–æ –±–µ–∑ –Ω–µ–µ) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
            "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)",
        ],
    }

    exercises = course_program.get(current_day, [])
    caption = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {current_day}** üî•\n\n" + "\n".join(exercises) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å!"

    photo_path = photo_paths.get(current_day)
    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_path,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"send_report_day_{current_day}")]]
            ),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await query.message.reply_text(
            "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"send_report_day_{current_day}")]]
            ),
        )

# –ß–µ–ª–ª–µ–Ω–¥–∂–∏
async def handle_challenges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_challenges.get(user_id):
        current_day = user_challenges[user_id]["current_day"]
        await send_challenge_task(query.message, user_id)
    elif user_scores.get(user_id, 0) >= 300:
        buttons = [
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_challenge")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")],
        ]
        await query.message.reply_text(
            "–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?",
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    else:
        await query.message.reply_text(
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –Ω—É–∂–Ω–æ 300 –±–∞–ª–ª–æ–≤.\n–£ –≤–∞—Å: {user_scores.get(user_id, 0)} –±–∞–ª–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
        )

# –ü–æ–∫—É–ø–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞
async def buy_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_scores.get(user_id, 0) >= 300:
        user_scores[user_id] -= 300
        user_challenges[user_id] = {"current_day": 1}
        await query.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –æ—Ç–∫—Ä—ã—Ç!")
        await send_challenge_task(query.message, user_id)
    else:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞!")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
async def send_challenge_task(message: Update, user_id: int):
    current_day = user_challenges[user_id]["current_day"]
    exercises = course_program_challenges.get(current_day, [])
    caption = f"üí™ **–ß–µ–ª–ª–µ–Ω–¥–∂: –î–µ–Ω—å {current_day}** üí™\n\n" + "\n".join(exercises)

    await message.reply_text(
        caption,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"send_challenge_report_{current_day}")]]
        ),
    )

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
course_program_challenges = {
    1: [
        "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
        "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
        "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 30 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)",
    ],
    2: [
        "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–º–æ–∂–Ω–æ –±–µ–∑) 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
        "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 25 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
        "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)",
    ],
    3: [
        "1Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
        "2Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)",
    ],
    4: [
        "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 60 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
        "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
        "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 50 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)",
    ],
    5: [
        "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–º–æ–∂–Ω–æ –±–µ–∑) 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
        "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
        "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)",
    ],
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_free_course, pattern="^free_course|next_day$"))
    application.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"send_report_day_(\d+)"))
    application.add_handler(CallbackQueryHandler(handle_challenges, pattern="challenge_menu"))
    application.add_handler(CallbackQueryHandler(buy_challenge, pattern="buy_challenge"))  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è buy_challenge
    application.add_handler(CallbackQueryHandler(handle_paid_course, pattern="paid_course"))
    application.add_handler(CallbackQueryHandler(confirm_payment, pattern="confirm_payment_.*"))
    application.add_handler(CallbackQueryHandler(handle_my_cabinet, pattern="my_cabinet"))
    application.add_handler(CallbackQueryHandler(handle_about_me, pattern="about_me"))
    application.add_handler(CallbackQueryHandler(handle_earn_points, pattern="earn_points"))
    application.add_handler(CallbackQueryHandler(handle_spend_points, pattern="spend_points"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VIDEO, handle_video))
    application.add_handler(MessageHandler(filters.PHOTO, handle_receipt))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()


if __name__ == "__main__":
    main()
