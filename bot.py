import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from evgeniy import start_free_course as evgeniy_start_free_course, handle_send_report as evgeniy_handle_send_report
from anastasia import start_free_course as anastasia_start_free_course, handle_send_report as anastasia_handle_send_report
from common import main_menu

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")

# ID –≤–∞—à–µ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ (—ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É)
GROUP_ID = "-1002451371911"

# –§—É–Ω–∫—Ü–∏—è /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞."""
    user_id = update.effective_user.id
    ctx.user_data.setdefault(user_id, {"current_day": 1})
    kb = main_menu()  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ï–≤–≥–µ–Ω–∏–π –∏–ª–∏ –ê–Ω–∞—Å—Ç–∞—Å–∏—è)."""
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "instructor_1":
        ctx.user_data[user_id]["instructor"] = "evgeniy"
        await evgeniy_start_free_course(query.message, ctx, user_id)  # –ó–∞–ø—É—Å–∫ –∫—É—Ä—Å–∞ –¥–ª—è –ï–≤–≥–µ–Ω–∏—è
    elif query.data == "instructor_2":
        ctx.user_data[user_id]["instructor"] = "anastasia"
        await anastasia_start_free_course(query.message, ctx, user_id)  # –ó–∞–ø—É—Å–∫ –∫—É—Ä—Å–∞ –¥–ª—è –ê–Ω–∞—Å—Ç–∞—Å–∏–∏
    else:
        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞)
async def handle_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞ –¥–µ–Ω—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data.get(user_id, {}).get("instructor")
    
    if instructor == "evgeniy":
        await evgeniy_handle_send_report(update, ctx)
    elif instructor == "anastasia":
        await anastasia_handle_send_report(update, ctx)
    else:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç—Ä–µ–Ω–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è, –ß–µ–ª–ª–µ–Ω–¥–∂–∏, –∏ —Ç.–ø.)
async def handle_nutrition_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è."""
    query = update.callback_query
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üç¥ –ö—É–ø–∏—Ç—å –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_nutrition_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb)

async def handle_challenges(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ß–µ–ª–ª–µ–Ω–¥–∂–∏."""
    query = update.callback_query
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_challenge")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", reply_markup=kb)

async def handle_referral(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    me = await ctx.bot.get_me()
    link = f"https://t.me/{me.username}?start={user_id}"
    await query.message.reply_text(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 –±–∞–ª–ª–æ–≤! üéâ")

# –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CommandHandler("start", start))  # –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))  # –í—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞
    app.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"send_report_day_\d+"))  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern="^nutrition_menu$"))  # –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è
    app.add_handler(CallbackQueryHandler(handle_challenges, pattern="^challenge_menu$"))  # –ß–µ–ª–ª–µ–Ω–¥–∂–∏
    app.add_handler(CallbackQueryHandler(handle_referral, pattern="^referral$"))  # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern="^buy_nutrition_menu$"))  # –ü–æ–∫—É–ø–∫–∞ –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ–ª–ª–∏–Ω–≥–µ
    app.run_polling()

if __name__ == "__main__":
    main()
