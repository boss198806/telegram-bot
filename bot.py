import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7761949562:AAF-zTgYwd5rzETyr3OnAGCGxrSQefFuKZs"
GROUP_ID = "-1002451371911"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
user_scores = {}
user_status = {}
user_reports_sent = {}
user_waiting_for_video = {}
user_waiting_for_challenge_video = {}
user_waiting_for_receipt = {}
user_challenges = {}
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
free_course = {
    1: [
        "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
        "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
        "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)",
    ],
    2: [
        "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
        "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
        "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)",
    ],
    3: [
        "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
        "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
        "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)",
    ],
    4: [
        "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
        "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
        "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
    ],
    5: [
        "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
        "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
        "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)",
    ],
}
free_photos = {
    1: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9647.PNG?raw=true",
    2: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9648.PNG?raw=true",
    3: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9649.PNG?raw=true",
    4: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9650.PNG?raw=true",
    5: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9651.PNG?raw=true",
}

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –ö—É—Ä–æ—á–∫–∏–Ω–∞ (–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
paid_program = {
    1: [
        "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
        "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
        "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
        "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
        "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
    ],
    2: [
        "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
        "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
        "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
        "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 (–≤–µ—Å –ø–æ–¥–±–∏—Ä–∞–µ—à—å) https://t.me/c/2241417709/175/176",
        "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261",
    ],
    3: [
        "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
        "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
        "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
        "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
        "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
        "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/136/137",
    ],
    4: [
        "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
        "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5 https://t.me/c/2241417709/159/160",
        "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15 https://t.me/c/2241417709/188/189",
        "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5 https://t.me/c/2241417709/169/170",
        "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12 https://t.me/c/2241417709/210/211",
        "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
        "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273",
    ],
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="paid_course")],
        [InlineKeyboardButton("üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="nutrition_menu")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="spend_points")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")],
        [InlineKeyboardButton("–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£", callback_data="kbju_calc")],
    ])

def get_report_button_text(ctx: ContextTypes.DEFAULT_TYPE, uid: int):
    gender = ctx.user_data[uid].get("gender", "male")
    prog = ctx.user_data[uid].get("program", "home")
    return ("üë©" if gender == "female" else "üë®") + ("üè†" if prog == "home" else "üèãÔ∏è") + " –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"

# 1. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
async def start_free_course(msg, ctx: ContextTypes.DEFAULT_TYPE, uid: int):
    if not (ctx.user_data[uid].get("gender") == "female" and ctx.user_data[uid].get("program") == "home"):
        return await msg.reply_text("–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu())
    day = ctx.user_data[uid].get("current_day", 1)
    if day > 5:
        return await msg.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
    ex = free_course.get(day, [])
    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å!"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(get_report_button_text(ctx, uid), callback_data=f"send_report_day_{day}")]])
    try:
        await ctx.bot.send_photo(chat_id=msg.chat_id, photo=free_photos.get(day), caption=text, parse_mode="Markdown", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await msg.reply_text("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.", reply_markup=kb)

async def handle_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    day = int(q.data.split("_")[-1])
    if user_reports_sent.get(uid, {}).get(day):
        return await q.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day}.")
    user_waiting_for_video[uid] = day
    await q.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.")

async def handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    uname = update.message.from_user.first_name
    if uid in user_waiting_for_video:
        day = user_waiting_for_video[uid]
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {uname} (ID: {uid}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
        user_reports_sent.setdefault(uid, {})[day] = True
        user_scores[uid] = user_scores.get(uid, 0) + 60
        del user_waiting_for_video[uid]
        if day < 5:
            ctx.user_data[uid]["current_day"] = day + 1
            user_waiting_for_video[uid] = day + 1
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[uid]}.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({day+1})?",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {day+1}", callback_data="next_day")]])
            )
        else:
            user_status[uid] = statuses[1]
            await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[uid]}.", reply_markup=main_menu())
    else:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –º–µ–Ω—é.")

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª–∞/–ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def handle_free_course_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    if q.data == "free_course" and ("gender" not in ctx.user_data[uid] or "program" not in ctx.user_data[uid]):
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
                                      InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]])
        return await q.message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=kb)
    await start_free_course(q.message, ctx, uid)

async def handle_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    ctx.user_data[uid]["gender"] = "male" if q.data == "gender_male" else "female"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="program_home"),
                                  InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="program_gym")]])
    await q.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    ctx.user_data[uid]["program"] = "home" if q.data == "program_home" else "gym"
    ctx.user_data[uid]["current_day"] = 1
    await start_free_course(q.message, ctx, uid)

# 3. /start –∏ –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        if ctx.args:
            try:
                ref = int(ctx.args[0])
                if ref != uid:
                    user_scores[ref] = user_scores.get(ref, 0) + 100
                    try:
                        await ctx.bot.send_message(chat_id=ref, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!")
                    except Exception as e:
                        logger.error(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {e}")
            except ValueError:
                pass
        ctx.user_data.setdefault(uid, {"current_day": 1})
        user_scores[uid] = user_scores.get(uid, 0)
        user_status[uid] = user_status.get(uid, statuses[0])
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_1")],
            [InlineKeyboardButton("–ê–ù–ê–°–¢–ê–°–ò–Ø", callback_data="instructor_2")],
            [InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
            [InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
            [InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")],
        ])
        await ctx.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    uid = q.from_user.id
    logger.info(f"Instructor selection received: {data} from user {uid}")
    await q.answer()
    if data == "instructor_1":
        ctx.user_data[uid]["instructor"] = "evgeniy"
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—è –∫—É—Ä—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await q.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", reply_markup=main_menu())
    elif data == "instructor_2":
        ctx.user_data[uid]["instructor"] = "anastasiya"
        await q.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø")
        await ctx.bot.send_photo(
            chat_id=q.message.chat_id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025-02-08_22-08-36.jpg?raw=true",
            caption="–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø",
            reply_markup=main_menu()
        )
    else:
        sel = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"
        if data == "instructor_3":
            sel = "–¢—Ä–µ–Ω–µ—Ä 3"
        elif data == "instructor_4":
            sel = "–¢—Ä–µ–Ω–µ—Ä 4"
        elif data == "instructor_5":
            sel = "–¢—Ä–µ–Ω–µ—Ä 5"
        await q.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: {sel}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.\n–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# 4. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ö–ë–ñ–£ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def handle_kbju_calc(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if not ctx.user_data.get("kbju_purchased"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_kbju")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ])
        await q.message.reply_text("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥—Å—á–µ—Ç—É –ö–ë–ñ–£ —Ç—Ä–µ–±—É–µ—Ç—Å—è 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", reply_markup=kb)
    else:
        await start_kbju_flow(q.message, ctx, q.from_user.id)

async def handle_buy_kbju(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    if user_scores.get(uid, 0) >= 300:
        user_scores[uid] -= 300
        ctx.user_data["kbju_purchased"] = True
        await q.message.reply_text("–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω!")
        await start_kbju_flow(q.message, ctx, uid)
    else:
        await q.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞ –ö–ë–ñ–£.")

async def start_kbju_flow(msg, ctx: ContextTypes.DEFAULT_TYPE, uid: int):
    ctx.user_data.setdefault("kbju", {})
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="kbju_gender_male"),
         InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="kbju_gender_female")]
    ])
    await msg.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=kb)

async def handle_kbju_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    gender = "male" if q.data == "kbju_gender_male" else "female"
    ctx.user_data.setdefault("kbju", {})["gender"] = gender
    ctx.user_data["kbju_step"] = "age"
    await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–≤ –≥–æ–¥–∞—Ö):")

async def process_kbju_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if "kbju_step" not in ctx.user_data:
        return
    step = ctx.user_data["kbju_step"]
    try:
        val = float(update.message.text)
    except ValueError:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    if step == "age":
        ctx.user_data.setdefault("kbju", {})["age"] = val
        ctx.user_data["kbju_step"] = "height"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    elif step == "height":
        ctx.user_data.setdefault("kbju", {})["height"] = val
        ctx.user_data["kbju_step"] = "activity"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ú–∞–ª–∞—è", callback_data="kbju_activity_low"),
             InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="kbju_activity_medium"),
             InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="kbju_activity_high")]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=kb)
    elif step == "weight":
        ctx.user_data.setdefault("kbju", {})["weight"] = val
        ctx.user_data["kbju_step"] = "goal"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="kbju_goal_maintain"),
             InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="kbju_goal_lose"),
             InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="kbju_goal_gain")]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)

async def handle_kbju_activity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    act = q.data.split("_")[-1]
    ctx.user_data.setdefault("kbju", {})["activity"] = act
    ctx.user_data["kbju_step"] = "weight"
    await q.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")

async def handle_kbju_goal(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    goal = q.data.split("_")[-1]
    ctx.user_data.setdefault("kbju", {})["goal"] = goal
    kbju = ctx.user_data.get("kbju", {})
    try:
        gender = kbju["gender"]
        age = float(kbju["age"])
        height = float(kbju["height"])
        weight = float(kbju["weight"])
        act = kbju["activity"]
        goal = kbju["goal"]
    except KeyError:
        return await q.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")
    if gender == "male":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    if act == "low":
        mult = 1.2
    elif act == "medium":
        mult = 1.55
    elif act == "high":
        mult = 1.9
    else:
        mult = 1.2
    cal = bmr * mult
    if goal == "lose":
        cal -= 500
    elif goal == "gain":
        cal += 500
    prot = (cal * 0.3) / 4
    fat = (cal * 0.25) / 9
    carb = (cal * 0.45) / 4
    res = f"–í–∞—à —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£:\n–ö–∞–ª–æ—Ä–∏–π: {cal:.0f} –∫–∫–∞–ª\n–ë–µ–ª–∫–æ–≤: {prot:.0f} –≥\n–ñ–∏—Ä–æ–≤: {fat:.0f} –≥\n–£–≥–ª–µ–≤–æ–¥–æ–≤: {carb:.0f} –≥"
    await q.message.reply_text(res, reply_markup=main_menu())
    ctx.user_data.pop("kbju_step", None)
    ctx.user_data.pop("kbju", None)

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –ö—É—Ä–æ—á–∫–∏–Ω–∞
async def start_paid_course(msg, ctx: ContextTypes.DEFAULT_TYPE, uid: int):
    day = ctx.user_data[uid].get("paid_current_day", 1)
    if day > 5:
        return await msg.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
    ex = paid_program.get(day, [])
    text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}** üìö\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ) –æ–ø–ª–∞—Ç—ã."
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"send_paid_receipt_day_{day}")]])
    await msg.reply_text(text, parse_mode="Markdown", reply_markup=kb)

async def handle_send_paid_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    day = int(q.data.split("_")[-1])
    ctx.user_data.setdefault(uid, {})["waiting_for_paid_receipt"] = True
    await q.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")

async def handle_paid_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    day = ctx.user_data[uid].get("paid_current_day", 1)
    if day < 5:
        ctx.user_data[uid]["paid_current_day"] = day + 1
        await start_paid_course(q.message, ctx, uid)
    else:
        await q.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
        ctx.user_data[uid].pop("paid_current_day", None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if ctx.user_data.get(uid, {}).get("waiting_for_paid_receipt"):
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–ß–µ–∫ (–æ–ø–ª–∞—Ç–∞) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {uid}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
        photo_id = update.message.photo[-1].file_id
        await ctx.bot.send_photo(
            chat_id=GROUP_ID,
            photo=photo_id,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=r"^confirm_payment_(\d+)$")]])
        )
        await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        ctx.user_data[uid].pop("waiting_for_paid_receipt", None)
        return
    await update.message.reply_text("–≠—Ç–æ—Ç —Ç–∏–ø —Ñ–æ—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ.")

async def confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = int(q.data.split("_")[-1])
    user_status[uid] = statuses[2]  # –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    del user_waiting_for_receipt[uid]
    await ctx.bot.send_message(chat_id=uid, text="–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É. üéâ")
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if ctx.user_data.get(uid, {}).get("paid_course"):
        ctx.user_data[uid]["paid_current_day"] = 1
        await start_paid_course(q.message, ctx, uid)

async def handle_paid_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    uname = update.message.from_user.first_name
    day = ctx.user_data[uid].get("paid_current_day")
    if day:
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–ü–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {uname} (ID: {uid}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
        user_scores[uid] = user_scores.get(uid, 0) + 30
        ctx.user_data[uid]["paid_current_day"] = day + 1
        if day < 5:
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[uid]}.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({day+1})?",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {day+1}", callback_data="paid_next_day")]])
            )
        else:
            await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[uid]}.", reply_markup=main_menu())
            ctx.user_data[uid].pop("paid_current_day", None)
    else:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞.")

async def handle_video_dispatch(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if "paid_current_day" in ctx.user_data.get(uid, {}):
        await handle_paid_video(update, ctx)
    else:
        await handle_video(update, ctx)

async def handle_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

# 5. –û—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–ö–ë–ñ–£, –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç, –û–±–æ –º–Ω–µ, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å/–ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã)
async def handle_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:\n\n1. –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n2. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "3. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n4. –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id, photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9699.PNG?raw=true", caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã': {e}")
        await q.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    score = user_scores.get(uid, 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã:\n\n–£ –≤–∞—Å –µ—Å—Ç—å {score} –±–∞–ª–ª–æ–≤.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n"
            "- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id, photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9692.PNG?raw=true", caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã': {e}")
        await q.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    uid = q.from_user.id
    score = user_scores.get(uid, 0)
    stat = user_status.get(uid, statuses[0])
    text = f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n\n–°—Ç–∞—Ç—É—Å: {stat}\n–ë–∞–ª–ª—ã: {score}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤!"
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id, photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true", caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç': {e}")
        await q.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ:\n\n–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π –í–∏—Ç–∞–ª—å–µ–≤–∏—á\n–û–±—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–∞–∂ - 20 –ª–µ—Ç\n–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã - 15 –ª–µ—Ç\n"
            "–ú–° - –ø–æ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ\n–ú–° - –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n–°—É–¥—å—è - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n"
            "–ö–ú–° - –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É\n\n20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ!")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id, photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025.jpg?raw=true", caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–û–±–æ –º–Ω–µ': {e}")
        await q.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ö–ë–ñ–£
async def process_kbju_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if "kbju_step" not in ctx.user_data:
        return
    step = ctx.user_data["kbju_step"]
    try:
        val = float(update.message.text)
    except ValueError:
        return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    if step == "age":
        ctx.user_data.setdefault("kbju", {})["age"] = val
        ctx.user_data["kbju_step"] = "height"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    elif step == "height":
        ctx.user_data.setdefault("kbju", {})["height"] = val
        ctx.user_data["kbju_step"] = "activity"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ú–∞–ª–∞—è", callback_data="kbju_activity_low"),
             InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="kbju_activity_medium"),
             InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è", callback_data="kbju_activity_high")]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=kb)
    elif step == "weight":
        ctx.user_data.setdefault("kbju", {})["weight"] = val
        ctx.user_data["kbju_step"] = "goal"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="kbju_goal_maintain"),
             InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="kbju_goal_lose"),
             InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="kbju_goal_gain")]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)

# --------------- Main ---------------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern=r"^instructor_"))
    app.add_handler(CallbackQueryHandler(handle_free_course_callback, pattern=r"^(free_course|next_day)$"))
    app.add_handler(CallbackQueryHandler(handle_gender, pattern=r"^gender_"))
    app.add_handler(CallbackQueryHandler(handle_program, pattern=r"^program_"))
    app.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"^send_report_day_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_challenges, pattern=r"^challenge_menu$"))
    app.add_handler(CallbackQueryHandler(buy_challenge, pattern=r"^buy_challenge$"))
    app.add_handler(CallbackQueryHandler(handle_paid_course, pattern=r"^paid_course$"))
    app.add_handler(CallbackQueryHandler(confirm_payment, pattern=r"^confirm_payment_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_my_cabinet, pattern=r"^my_cabinet$"))
    app.add_handler(CallbackQueryHandler(handle_about_me, pattern=r"^about_me$"))
    app.add_handler(CallbackQueryHandler(handle_earn_points, pattern=r"^earn_points$"))
    app.add_handler(CallbackQueryHandler(handle_spend_points, pattern=r"^spend_points$"))
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern=r"^nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_buy_nutrition_menu, pattern=r"^buy_nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_referral, pattern=r"^referral$"))
    app.add_handler(CallbackQueryHandler(handle_challenge_next_day, pattern=r"^challenge_next$"))
    app.add_handler(CallbackQueryHandler(handle_back, pattern=r"^back$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–ë–ñ–£
    app.add_handler(CallbackQueryHandler(handle_kbju_calc, pattern=r"^kbju_calc$"))
    app.add_handler(CallbackQueryHandler(handle_buy_kbju, pattern=r"^buy_kbju$"))
    app.add_handler(CallbackQueryHandler(handle_kbju_gender, pattern=r"^kbju_gender_"))
    app.add_handler(CallbackQueryHandler(handle_kbju_activity, pattern=r"^kbju_activity_"))
    app.add_handler(CallbackQueryHandler(handle_kbju_goal, pattern=r"^kbju_goal_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_kbju_text))
    # –í–∏–¥–µ–æ–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.VIDEO, handle_video_dispatch))
    app.add_handler(MessageHandler(filters.PHOTO, handle_receipt))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —á–µ–∫–∞
    app.add_handler(CallbackQueryHandler(handle_send_paid_receipt, pattern=r"^send_paid_receipt_day_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_paid_next_day, pattern=r"^paid_next_day$"))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    app.run_polling()

if __name__ == "__main__":
    main()
