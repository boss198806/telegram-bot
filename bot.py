import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7761949562:AAF-zTgYwd5rzETyr3OnAGCGxrSQefFuKZs"
GROUP_ID = "-1002451371911"

# ------------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –∏ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏) -------------------------
# –ï–≤–≥–µ–Ω–∏–π
user_scores_evg = {}
user_status_evg = {}
user_reports_sent_evg = {}
user_waiting_for_video_evg = {}
user_waiting_for_receipt_evg = {}
user_challenges_evg = {}
user_data_free_evg = {}     # (gender, program, current_day)
user_data_paid_evg = {}     # (gender, program, current_day)

# –ê–Ω–∞—Å—Ç–∞—Å–∏—è
user_scores_ana = {}
user_status_ana = {}
user_reports_sent_ana = {}
user_waiting_for_video_ana = {}
user_waiting_for_receipt_ana = {}
user_challenges_ana = {}
user_data_free_ana = {}
user_data_paid_ana = {}

statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# --------------------- –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞—Ä–µ–π —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ¬ª) ---------------------
# 1) –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏—è
evg_free_exercises = {
    ("male", "home"): {
        1: [
            "1) –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 3x15",
            "2) –û—Ç–∂–∏–º–∞–Ω–∏—è 3x12",
            "3) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3x20",
        ],
        2: [
            "1) –í—ã–ø–∞–¥—ã 3x15",
            "2) –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω",
            "3) –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x20",
        ],
        3: [
            "1) –ü—Ä–∏—Å–µ–¥ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º 3x12",
            "2) –û—Ç–∂–∏–º–∞–Ω–∏—è —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3x10",
            "3) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—É 3x20",
        ],
        4: [
            "1) –ú–∞—Ö–∏ –Ω–æ–≥–∞–º–∏ 3x20",
            "2) –ü–æ–¥—ä—ë–º—ã —Ç–∞–∑–∞ 3x15",
            "3) –ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è 3x30 c",
        ],
        5: [
            "1) –ü—Ä–∏—Å–µ–¥ + –ø—Ä—ã–∂–æ–∫ 3x10",
            "2) –ë–µ—Ä–ø–∏ 3x10",
            "3) –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x20",
        ]
    },
    ("male", "gym"): {
        1: [
            "1) –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 3x10",
            "2) –ñ–∏–º –ª–µ–∂–∞ 3x8",
            "3) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3x15",
        ],
        2: [
            "1) –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 3x8",
            "2) –¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞ 3x12",
            "3) –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω",
        ],
        3: [
            "1) –í—ã–ø–∞–¥—ã —Å–æ —à—Ç–∞–Ω–≥–æ–π 3x10",
            "2) –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3xMax",
            "3) –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç —Å–æ —à—Ç–∞–Ω–≥–æ–π 3x12",
        ],
        4: [
            "1) –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3x10",
            "2) –û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö 3xMax",
            "3) –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –≤ –≤–∏—Å–µ 3x15",
        ],
        5: [
            "1) –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ 3x8",
            "2) –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 3x8",
            "3) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3x15",
        ]
    },
    ("female", "home"): {
        1: [
            "1) –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
            "2) –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
            "3) –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)",
        ],
        2: [
            "1) –û—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
            "2) –õ–æ–¥–æ—á–∫–∞ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
            "3) –ü–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)",
        ],
        3: [
            "1) –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2) –ú–∞—Ö–∏ –≤ –±–æ–∫ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
            "3) –ö–æ—Å—ã–µ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)",
        ],
        4: [
            "1) –ü–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
            "2) –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
            "3) –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
        ],
        5: [
            "1) –ü—Ä–∏—Å–µ–¥ (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2) –ú–∞—Ö–∏ –ø–æ–¥ 45 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
            "3) –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)",
        ]
    },
    ("female", "gym"): {
        1: [
            "1) –ü—Ä–∏—Å–µ–¥ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ –°–º–∏—Ç–∞ 3x12",
            "2) –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3x15",
            "3) –°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3x15",
        ],
        2: [
            "1) –ñ–∏–º –Ω–æ–≥–∞–º–∏ 3x12",
            "2) –ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è 3x15",
            "3) –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω",
        ],
        3: [
            "1) –í—ã–ø–∞–¥—ã —Å–æ —à—Ç–∞–Ω–≥–æ–π 3x10",
            "2) –¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞ 3x12",
            "3) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—É 3x20",
        ],
        4: [
            "1) –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π 3x10",
            "2) –°—Ç–∞–Ω–æ–≤–∞—è —Ä—É–º—ã–Ω—Å–∫–∞—è 3x8",
            "3) –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x12",
        ],
        5: [
            "1) –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 3x10",
            "2) –¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ 3x12",
            "3) –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ 3x15",
        ]
    }
}

# 2) –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏—è
evg_paid_exercises = {
    ("male", "gym"): {
        1: [
            "–ú—É–∂—á–∏–Ω–∞/–ó–∞–ª, –î–µ–Ω—å 1: –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ...",
            "...."
        ],
        2: [
            "–ú—É–∂—á–∏–Ω–∞/–ó–∞–ª, –î–µ–Ω—å 2: ...",
        ],
        3: [
            "–ú—É–∂—á–∏–Ω–∞/–ó–∞–ª, –î–µ–Ω—å 3: ...",
        ],
        4: [
            "–ú—É–∂—á–∏–Ω–∞/–ó–∞–ª, –î–µ–Ω—å 4: ...",
        ],
        5: [
            "–ú—É–∂—á–∏–Ω–∞/–ó–∞–ª, –î–µ–Ω—å 5: ...",
        ],
    },
    ("male", "home"): {
        1: [
            "–ú—É–∂—á–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 1: ...",
        ],
        2: [
            "–ú—É–∂—á–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 2: ...",
        ],
        3: [
            "–ú—É–∂—á–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 3: ...",
        ],
        4: [
            "–ú—É–∂—á–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 4: ...",
        ],
        5: [
            "–ú—É–∂—á–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 5: ...",
        ],
    },
    ("female", "gym"): {
        1: [
            "1) –ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
            "2) –í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
            "3) –†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
            "4) –°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
            "5) –°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131"
        ],
        2: [
            "1) –ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
            "2) –û—Ç–∂–∏–º–∞–Ω–∏—è 3x15+5 https://t.me/c/2241417709/167/168",
            "3) –õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
            "4) –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 https://t.me/c/2241417709/175/176",
            "5) –ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
            "6) –†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261"
        ],
        3: [
            "1) –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
            "2) –†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
            "3) –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
            "4) –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
            "5) –î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
            "6) –ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ 3—Ö15+5 https://t.me/c/2241417709/136/137"
        ],
        4: [
            "1) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
            "2) –û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• 3—Ö15+5 https://t.me/c/2241417709/159/160",
            "3) –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• 3—Ö15 https://t.me/c/2241417709/188/189",
            "4) –†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/169/170",
            "5) –¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ 3—Ö12 https://t.me/c/2241417709/210/211",
            "6) –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
            "7) –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273"
        ],
        5: [
            "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üèÜ"
        ]
    },
    ("female", "home"): {
        1: [
            "–ñ–µ–Ω—â–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 1: ...", 
        ],
        2: [
            "–ñ–µ–Ω—â–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 2: ...", 
        ],
        3: [
            "–ñ–µ–Ω—â–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 3: ...", 
        ],
        4: [
            "–ñ–µ–Ω—â–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 4: ...", 
        ],
        5: [
            "–ñ–µ–Ω—â–∏–Ω–∞/–î–æ–º, –î–µ–Ω—å 5: ...", 
        ],
    }
}

# 3) –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏
ana_paid_exercises = {
    ("male", "gym"): {
        1: ["–ê–Ω–∞—Å—Ç–∞—Å–∏—è / –ú—É–∂—á–∏–Ω–∞ / –ó–∞–ª, –î–µ–Ω—å 1..."],
        2: ["–î–µ–Ω—å 2..."],
        3: ["–î–µ–Ω—å 3..."],
        4: ["–î–µ–Ω—å 4..."],
        5: ["–î–µ–Ω—å 5..."],
    },
    ("male", "home"): {
        1: ["–ê–Ω–∞—Å—Ç–∞—Å–∏—è / –ú—É–∂—á–∏–Ω–∞ / –î–æ–º, –î–µ–Ω—å 1..."],
        2: ["–î–µ–Ω—å 2..."],
        3: ["–î–µ–Ω—å 3..."],
        4: ["–î–µ–Ω—å 4..."],
        5: ["–î–µ–Ω—å 5..."],
    },
    ("female", "gym"): {
        1: [
            "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
            "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
            "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
            "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
            "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
        ],
        2: [
            "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
            "–õ–æ–¥–æ—á–∫–∞ 3—Ö20+5 https://t.me/c/2241417709/183/184",
            "...",
        ],
        3: [
            "...",
        ],
        4: [
            "...",
        ],
        5: [
            "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üèÜ",
        ]
    },
    ("female", "home"): {
        1: ["–ê–Ω–∞—Å—Ç–∞—Å–∏—è / –ñ–µ–Ω—â–∏–Ω–∞ / –î–æ–º, –î–µ–Ω—å 1..."],
        2: ["..."],
        3: ["..."],
        4: ["..."],
        5: ["–§–∏–Ω–∞–ª..."]
    }
}

# -------------------------------------------------------------------------------------
#             –§–û–†–ú–£–õ–ê –î–õ–Ø –ö–ë–ñ–£ + –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –®–ê–ì–û–í (–° –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ê–ú–ò)
# -------------------------------------------------------------------------------------
KBJU_EVGENIY_STATE = {}    # user_id -> dict c –¥–∞–Ω–Ω—ã–º–∏
KBJU_ANASTASIYA_STATE = {} # user_id -> dict

(
    EVG_KBJU_GENDER,
    EVG_KBJU_WEIGHT,
    EVG_KBJU_HEIGHT,
    EVG_KBJU_AGE,
    EVG_KBJU_ACTIVITY,
    EVG_KBJU_GOAL
) = range(6)  # –µ—Å–ª–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ConversationHandler –¥–ª—è —Ç–µ–∫—Å—Ç–∞

# –ï—Å–ª–∏ —Ö–æ—Ç–∏–º *—Ç–æ–ª—å–∫–æ inline-–∫–Ω–æ–ø–∫–∏* ‚Äì –º–æ–∂–Ω–æ –∏–Ω–∞—á–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏.

def calc_kbju(gender: str, weight: float, height: float, age: int, activity: float, goal: str):
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Mifflin-St Jeor. 
    """
    if gender.lower().startswith("m"):  # male
        bmr = 10*weight + 6.25*height - 5*age + 5
    else:
        bmr = 10*weight + 6.25*height - 5*age - 161

    cal = bmr * activity
    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        cal *= 0.85
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å":
        cal *= 1.15
    return round(cal, 2)

# -------------------------------------------------------------------------------------
#                              –ú–ï–ù–Æ / –°–¢–ê–†–¢
# -------------------------------------------------------------------------------------
def start_menu():
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_evg"),
            InlineKeyboardButton("üí´ –ê–Ω–∞—Å—Ç–∞—Å–∏—è", callback_data="instructor_ana")
        ],
        [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
        [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
        [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")]
    ])
    return kb

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ—Å—Å—ã–ª–∫–∏
    if ctx.args:
        try:
            ref = int(ctx.args[0])
            if ref != user_id:
                user_scores_evg[ref] = user_scores_evg.get(ref, 0) + 100
                try:
                    await ctx.bot.send_message(ref, text="üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏—à—ë–ª! +100 –±–∞–ª–ª–æ–≤")
                except:
                    pass
        except:
            pass

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:",
        reply_markup=start_menu()
    )

async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data == "instructor_evg":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏
        user_scores_evg[user_id] = user_scores_evg.get(user_id, 0)
        user_status_evg[user_id] = user_status_evg.get(user_id, statuses[0])
        ctx.user_data[user_id] = {"instructor": "evg"}

        await ctx.bot.send_video(
            chat_id=query.message.chat_id,
            video="https://t.me/PRIVETSTVIEC/2",
            caption="üé• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω",
            reply_markup=main_menu_evg()
        )

    elif data == "instructor_ana":
        user_scores_ana[user_id] = user_scores_ana.get(user_id, 0)
        user_status_ana[user_id] = user_status_ana.get(user_id, statuses[0])
        ctx.user_data[user_id] = {"instructor": "ana"}

        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–Ω–∞—Å—Ç–∞—Å–∏—è üí´")
        await ctx.bot.send_photo(
            chat_id=query.message.chat_id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025-02-08_22-08-36.jpg?raw=true",
            caption="üì∏ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–Ω–∞—Å—Ç–∞—Å–∏—è",
            reply_markup=main_menu_ana()
        )
    else:
        # –¢—Ä–µ–Ω–µ—Ä—ã 3,4,5 - –ø–æ–∫–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        await query.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...",
            reply_markup=start_menu()
        )

async def handle_back_to_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞:", reply_markup=start_menu())


# -------------------------------------------------------------------------------------
#                       –ú–ï–ù–Æ –î–õ–Ø –ï–í–ì–ï–ù–ò–Ø / –ê–ù–ê–°–¢–ê–°–ò–ò
# -------------------------------------------------------------------------------------
def main_menu_evg():
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥.)", callback_data="evg_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥.)", callback_data="evg_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥.)", callback_data="evg_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ï–≤–≥.)", callback_data="evg_my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã (–ï–≤–≥.)", callback_data="evg_earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ï–≤–≥.)", callback_data="evg_spend_points")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ï–≤–≥.)", callback_data="evg_referral")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ï–≤–≥.)", callback_data="evg_kbju")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ (–ï–≤–≥.)", callback_data="evg_about_me")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
    ])
    return kb

def main_menu_ana():
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç.)", callback_data="ana_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ê–Ω–∞—Å—Ç.)", callback_data="ana_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç.)", callback_data="ana_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ê–Ω–∞—Å—Ç.)", callback_data="ana_my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã (–ê–Ω–∞—Å—Ç.)", callback_data="ana_earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ê–Ω–∞—Å—Ç.)", callback_data="ana_spend_points")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ê–Ω–∞—Å—Ç.)", callback_data="ana_referral")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ê–Ω–∞—Å—Ç.)", callback_data="ana_kbju")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ (–ê–Ω–∞—Å—Ç.)", callback_data="ana_about_me")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
    ])
    return kb


# -------------------------------------------------------------------------------------
#                    –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–°: –ï–í–ì–ï–ù–ò–ô
# -------------------------------------------------------------------------------------
async def evg_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    info = user_data_free_evg.get(user_id, {})
    if "gender" not in info or "program" not in info:
        # –°–ø—Ä–æ—Å–∏–º –ø–æ–ª
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="evg_free_gender_male"),
                InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="evg_free_gender_female")
            ]
        ])
        await query.message.reply_text("–í–∞—à –ø–æ–ª (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π)?", reply_markup=kb)
    else:
        await start_free_course_evg(query.message, ctx, user_id)

async def evg_free_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if "male" in query.data else "female"
    if user_id not in user_data_free_evg:
        user_data_free_evg[user_id] = {}
    user_data_free_evg[user_id]["gender"] = gender

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="evg_free_program_home"),
            InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="evg_free_program_gym")
        ]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π):", reply_markup=kb)

async def evg_free_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    program = "home" if "home" in query.data else "gym"

    if user_id not in user_data_free_evg:
        user_data_free_evg[user_id] = {}
    user_data_free_evg[user_id]["program"] = program
    user_data_free_evg[user_id]["current_day"] = 1

    await start_free_course_evg(query.message, ctx, user_id)

async def start_free_course_evg(msg, ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    info = user_data_free_evg[user_id]
    gender = info["gender"]
    program = info["program"]
    day = info.get("current_day", 1)
    if day > 5:
        await msg.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)! üéâ", reply_markup=main_menu_evg())
        return

    # –î–æ—Å—Ç–∞—ë–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    ex_dict = evg_free_exercises.get((gender, program))
    if not ex_dict:
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞
        await msg.reply_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ï–≤–≥–µ–Ω–∏–π).", reply_markup=main_menu_evg())
        return

    day_ex = ex_dict.get(day, [])
    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π): –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(day_ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á—ë—Ç!"

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"evg_free_send_report_day_{day}")]
    ])
    try:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ). –î–ª—è –ø—Ä–∏–º–µ—Ä–∞:
        await ctx.bot.send_message(
            chat_id=msg.chat_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ free day {day} (–ï–≤–≥.): {e}")
        await msg.reply_text(text, reply_markup=kb)


async def evg_free_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])
    if user_reports_sent_evg.get(user_id, {}).get(day):
        await query.message.reply_text(f"–£–∂–µ –µ—Å—Ç—å –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å {day} (–ï–≤–≥.)")
        return

    user_waiting_for_video_evg[user_id] = ("free", day)
    await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á—ë—Ç (–ï–≤–≥.)")

async def evg_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    if user_id not in user_waiting_for_video_evg:
        return

    course_type, day = user_waiting_for_video_evg[user_id]
    if course_type == "free":
        # –û—Ç–ø—Ä–∞–≤–∏–º –≤ –≥—Ä—É–ø–ø—É
        await ctx.bot.send_message(GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (free –ï–≤–≥.) –æ—Ç {user_name} –∑–∞ –¥–µ–Ω—å {day}")
        await ctx.bot.send_video(GROUP_ID, video=update.message.video.file_id)

        # –ë–∞–ª–ª—ã
        user_scores_evg[user_id] = user_scores_evg.get(user_id, 0) + 60

        if user_id not in user_reports_sent_evg:
            user_reports_sent_evg[user_id] = {}
        user_reports_sent_evg[user_id][day] = True

        current_day = user_data_free_evg[user_id]["current_day"]
        if current_day < 5:
            user_data_free_evg[user_id]["current_day"] = current_day + 1
            new_day = current_day + 1
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç (–ï–≤–≥.)! –í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_evg[user_id]}.\n"
                f"–ì–æ—Ç–æ–≤—ã –∫ –¥–Ω—é {new_day}?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {new_day}", callback_data="evg_free_next_day")]
                ])
            )
        else:
            user_status_evg[user_id] = statuses[1]
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å (–ï–≤–≥.) –æ–∫–æ–Ω—á–µ–Ω. –ë–∞–ª–ª—ã: {user_scores_evg[user_id]}",
                reply_markup=main_menu_evg()
            )
        del user_waiting_for_video_evg[user_id]

    elif course_type == "paid":
        # –ü–ª–∞—Ç–Ω—ã–π
        await ctx.bot.send_message(GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (paid –ï–≤–≥.) –æ—Ç {user_name} –∑–∞ –¥–µ–Ω—å {day}")
        await ctx.bot.send_video(GROUP_ID, video=update.message.video.file_id)

        user_scores_evg[user_id] = user_scores_evg.get(user_id, 0) + 30
        del user_waiting_for_video_evg[user_id]

        current_day = user_data_paid_evg[user_id].get("current_day", 1)
        if current_day < 5:
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {day} (–ï–≤–≥.) –ø—Ä–∏–Ω—è—Ç! –í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_evg[user_id]}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="evg_paid_next_day")]
                ])
            )
        else:
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥.) –æ–∫–æ–Ω—á–µ–Ω. –ë–∞–ª–ª—ã: {user_scores_evg[user_id]}",
                reply_markup=main_menu_evg()
            )
            user_data_paid_evg[user_id].pop("current_day", None)

async def evg_free_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await start_free_course_evg(query.message, ctx, user_id)


# -------------------------------------------------------------------------------------
#                    –ß–ï–õ–õ–ï–ù–î–ñ (–ï–≤–≥–µ–Ω–∏–π)
# -------------------------------------------------------------------------------------
async def evg_challenge_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    if user_id in user_challenges_evg:
        await send_challenge_task_evg(query.message, user_id)
    else:
        if score >= 300:
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å (300)", callback_data="evg_buy_challenge"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="evg_back")
                ]
            ])
            await query.message.reply_text("–ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥.) —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –ö—É–ø–∏—Ç—å?", reply_markup=kb)
        else:
            await query.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ (–ï–≤–≥.): {score}/300")

async def evg_buy_challenge(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    if score >= 300:
        user_scores_evg[user_id] = score - 300
        user_challenges_evg[user_id] = {"current_day": 1}
        await query.message.reply_text("–ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥.) –∫—É–ø–ª–µ–Ω!", reply_markup=main_menu_evg())
        await send_challenge_task_evg(query.message, user_id)
    else:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ (–ï–≤–≥.).")

async def send_challenge_task_evg(message, user_id: int):
    day = user_challenges_evg[user_id]["current_day"]
    # –ü—Ä–∏–º–µ—Ä —á–µ–ª–ª–µ–Ω–¥–∂–∞
    challenge_evg = {
        1: ["–ó–∞–¥–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –ï–≤–≥. –î–µ–Ω—å 1"],
        2: ["–î–µ–Ω—å 2 ..."],
        3: ["–î–µ–Ω—å 3 ..."],
        4: ["–î–µ–Ω—å 4 ..."],
        5: ["–î–µ–Ω—å 5 ..."],
    }
    ex = challenge_evg.get(day, ["–ù–µ—Ç –∑–∞–¥–∞—á."])

    text = f"–ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥.), –î–µ–Ω—å {day}\n\n" + "\n".join(ex)
    if day < 5:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="evg_challenge_next")]])
    else:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é –ï–≤–≥.", callback_data="evg_back")]])

    await message.reply_text(text, reply_markup=kb)

async def evg_challenge_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id not in user_challenges_evg:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥.)")
        return
    day = user_challenges_evg[user_id]["current_day"]
    if day < 5:
        user_challenges_evg[user_id]["current_day"] = day + 1
        await send_challenge_task_evg(query.message, user_id)
    else:
        await query.message.reply_text("–ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥.) –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=main_menu_evg())
        del user_challenges_evg[user_id]


# -------------------------------------------------------------------------------------
#                    –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)
# -------------------------------------------------------------------------------------
async def evg_paid_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    discount = min(score*2, 600)
    price = 2000 - discount

    user_waiting_for_receipt_evg[user_id] = True
    await query.message.reply_text(
        f"–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥.)\n\n–¶–µ–Ω–∞ 2000, —Å–∫–∏–¥–∫–∞ {discount}, –∏—Ç–æ–≥–æ {price}.\n"
        f"–û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É 89236950304. –ü—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ (–ï–≤–≥.)", callback_data="evg_send_receipt")]])
    )

async def evg_send_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt_evg[user_id] = True
    await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ï–≤–≥.).")

async def evg_handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    if user_id not in user_waiting_for_receipt_evg:
        return

    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ï–≤–≥.).")
        return

    photo_id = update.message.photo[-1].file_id
    await ctx.bot.send_message(
        GROUP_ID,
        text=f"–ß–µ–∫ (–ï–≤–≥.) –æ—Ç {user_name} (ID: {user_id}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    )
    await ctx.bot.send_photo(
        GROUP_ID,
        photo=photo_id,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"evg_confirm_payment_{user_id}")]
        ])
    )
    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–ï–≤–≥.).")

async def evg_confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = int(data.split("_")[-1])

    user_status_evg[user_id] = statuses[2]
    if user_id in user_waiting_for_receipt_evg:
        del user_waiting_for_receipt_evg[user_id]

    await ctx.bot.send_message(
        chat_id=user_id,
        text="–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–ï–≤–≥.). –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É."
    )
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="evg_paid_gender_male"),
            InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="evg_paid_gender_female")
        ]
    ])
    await ctx.bot.send_message(user_id, text="–ö–∞–∫–æ–π –≤–∞—à –ø–æ–ª (–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥.)?", reply_markup=kb)

async def evg_paid_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if "male" in query.data else "female"

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data=f"evg_paid_program_{gender}_gym"),
            InlineKeyboardButton("üè† –î–æ–º–∞", callback_data=f"evg_paid_program_{gender}_home")
        ]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–ø–ª–∞—Ç–Ω—ã–π –ï–≤–≥.)", reply_markup=kb)

async def evg_paid_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä evg_paid_program_male_gym
    parts = data.split("_")  # ["evg", "paid", "program", "male", "gym"]
    gender = parts[3]
    program = parts[4]

    user_id = query.from_user.id
    user_data_paid_evg[user_id] = {
        "gender": gender,
        "program": program,
        "current_day": 1
    }

    await evg_show_paid_day(query.message, user_id, 1)

async def evg_show_paid_day(msg, user_id, day: int):
    gp = user_data_paid_evg[user_id]
    gender = gp["gender"]
    program = gp["program"]

    ex_dict = evg_paid_exercises.get((gender, program))
    if not ex_dict:
        await msg.reply_text("–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ (–ï–≤–≥. Paid).", reply_markup=main_menu_evg())
        return

    ex_list = ex_dict.get(day, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."])
    text = f"üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥.): –î–µ–Ω—å {day}\n\n" + "\n".join(ex_list)

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"evg_paid_video_day_{day}")]
    ])
    await msg.reply_text(text, reply_markup=kb)

async def evg_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])
    user_waiting_for_video_evg[user_id] = ("paid", day)
    await query.message.reply_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ï–≤–≥.)")

async def evg_paid_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    cd = user_data_paid_evg[user_id]["current_day"]
    if cd < 5:
        user_data_paid_evg[user_id]["current_day"] = cd + 1
        await evg_show_paid_day(query.message, user_id, cd+1)
    else:
        await query.message.reply_text("–ö—É—Ä—Å (–ï–≤–≥.) –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=main_menu_evg())
        user_data_paid_evg[user_id].pop("current_day", None)

# -------------------------------------------------------------------------------------
#            –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç / –æ–±–æ –º–Ω–µ / earn / spend / referral (–ï–≤–≥–µ–Ω–∏–π)
# -------------------------------------------------------------------------------------
async def evg_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    status = user_status_evg.get(user_id, statuses[0])
    text = f"üë§ –ö–∞–±–∏–Ω–µ—Ç (–ï–≤–≥.)\n–°—Ç–∞—Ç—É—Å: {status}\n–ë–∞–ª–ª—ã: {score}"
    await query.message.reply_text(text)

async def evg_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = "–û –ï–≤–≥–µ–Ω–∏–∏..."
    await query.message.reply_text(text)

async def evg_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã (–ï–≤–≥.)"
    await query.message.reply_text(text)

async def evg_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    text = f"–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ï–≤–≥.)\n–£ –≤–∞—Å {score}."
    await query.message.reply_text(text)

async def evg_referral(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    me = await ctx.bot.get_me()
    link = f"https://t.me/{me.username}?start={user_id}"
    await query.message.reply_text(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ï–≤–≥.): {link}")

async def evg_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–ú–µ–Ω—é –ï–≤–≥–µ–Ω–∏—è", reply_markup=main_menu_evg())


# -------------------------------------------------------------------------------------
#                   –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è –ê–ù–ê–°–¢–ê–°–ò–ò (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø–ª–∞—Ç–Ω—ã–π, —á–µ–ª–ª–µ–Ω–¥–∂ –∏ —Ç.–¥.)
# -------------------------------------------------------------------------------------
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ï–≤–≥–µ–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤—Å—ë —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ ‚Äì –æ—Å—Ç–∞–≤–ª—é –ª–∏—à—å –∫—Ä–∞—Ç–∫–æ
# (–í–ê–ñ–ù–û: —É –≤–∞—Å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ user_data_free_ana –∏ —Ç.–ø.)

async def ana_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    info = user_data_free_ana.get(user_id, {})
    if "gender" not in info or "program" not in info:
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="ana_free_gender_male"),
                InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="ana_free_gender_female")
            ]
        ])
        await query.message.reply_text("–í–∞—à –ø–æ–ª (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è)?", reply_markup=kb)
    else:
        await start_free_course_ana(query.message, ctx, user_id)

async def ana_free_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if "male" in query.data else "female"
    if user_id not in user_data_free_ana:
        user_data_free_ana[user_id] = {}
    user_data_free_ana[user_id]["gender"] = gender
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="ana_free_program_home"),
            InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="ana_free_program_gym")
        ]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç.)", reply_markup=kb)

async def ana_free_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    program = "home" if "home" in query.data else "gym"
    if user_id not in user_data_free_ana:
        user_data_free_ana[user_id] = {}
    user_data_free_ana[user_id]["program"] = program
    user_data_free_ana[user_id]["current_day"] = 1

    await start_free_course_ana(query.message, ctx, user_id)

async def start_free_course_ana(msg, ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    info = user_data_free_ana[user_id]
    gender = info["gender"]
    program = info["program"]
    day = info.get("current_day", 1)

    if day > 5:
        await msg.reply_text("–ö—É—Ä—Å (–ê–Ω–∞—Å—Ç.) –æ–∫–æ–Ω—á–µ–Ω!", reply_markup=main_menu_ana())
        return

    ex_dict = evg_free_exercises.get((gender, program))  # –∏–ª–∏ —É –≤–∞—Å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–Ω–∞—Å—Ç–∞—Å–∏–∏
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —è —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É—é evg_free_exercises, –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å ana_free_exercises
    if not ex_dict:
        await msg.reply_text("–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–ê–Ω–∞—Å—Ç.).", reply_markup=main_menu_ana())
        return

    day_ex = ex_dict.get(day, [])
    text = f"üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç.): –î–µ–Ω—å {day}\n\n" + "\n".join(day_ex)

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"ana_free_send_report_day_{day}")]
    ])
    await msg.reply_text(text, reply_markup=kb)

async def ana_free_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])
    if user_reports_sent_ana.get(user_id, {}).get(day):
        await query.message.reply_text("–£–∂–µ –µ—Å—Ç—å –æ—Ç—á—ë—Ç (–ê–Ω–∞—Å—Ç.)")
        return

    user_waiting_for_video_ana[user_id] = ("free", day)
    await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–ê–Ω–∞—Å—Ç.)")

async def ana_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    if user_id not in user_waiting_for_video_ana:
        return

    ctype, day = user_waiting_for_video_ana[user_id]
    if ctype == "free":
        await ctx.bot.send_message(GROUP_ID, text=f"–í–∏–¥–µ–æ (free –ê–Ω–∞—Å—Ç.) –æ—Ç {user_name} –¥–µ–Ω—å {day}")
        await ctx.bot.send_video(GROUP_ID, video=update.message.video.file_id)
        user_scores_ana[user_id] = user_scores_ana.get(user_id, 0) + 60

        if user_id not in user_reports_sent_ana:
            user_reports_sent_ana[user_id] = {}
        user_reports_sent_ana[user_id][day] = True

        current_day = user_data_free_ana[user_id]["current_day"]
        if current_day < 5:
            user_data_free_ana[user_id]["current_day"] = current_day + 1
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç.) –ø—Ä–∏–Ω—è—Ç. –ë–∞–ª–ª—ã: {user_scores_ana[user_id]}.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {current_day+1}", callback_data="ana_free_next_day")]
                ])
            )
        else:
            user_status_ana[user_id] = statuses[1]
            await update.message.reply_text(
                f"–ö—É—Ä—Å (–ê–Ω–∞—Å—Ç.) –æ–∫–æ–Ω—á–µ–Ω. –ë–∞–ª–ª—ã: {user_scores_ana[user_id]}",
                reply_markup=main_menu_ana()
            )
        del user_waiting_for_video_ana[user_id]

    elif ctype == "paid":
        await ctx.bot.send_message(GROUP_ID, text=f"–í–∏–¥–µ–æ (paid –ê–Ω–∞—Å—Ç.) –æ—Ç {user_name} –¥–µ–Ω—å {day}")
        await ctx.bot.send_video(GROUP_ID, video=update.message.video.file_id)
        user_scores_ana[user_id] = user_scores_ana.get(user_id, 0) + 30
        del user_waiting_for_video_ana[user_id]

        cd = user_data_paid_ana[user_id]["current_day"]
        if cd < 5:
            await update.message.reply_text(
                f"–û—Ç—á—ë—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç.) –ø—Ä–∏–Ω—è—Ç. –ë–∞–ª–ª—ã: {user_scores_ana[user_id]}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥. –î–µ–Ω—å", callback_data="ana_paid_next_day")]
                ])
            )
        else:
            await update.message.reply_text(
                f"–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç.) –æ–∫–æ–Ω—á–µ–Ω! –ë–∞–ª–ª—ã: {user_scores_ana[user_id]}",
                reply_markup=main_menu_ana()
            )
            user_data_paid_ana[user_id].pop("current_day", None)

async def ana_free_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await start_free_course_ana(query.message, ctx, user_id)

# –ß–µ–ª–ª–µ–Ω–¥–∂ (–ê–Ω–∞—Å—Ç.), –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç.) –∏ —Ç.–¥. ‚Äì –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ï–≤–≥–µ–Ω–∏—é...

# -------------------------------------------------------------------------------------
#                           –ö–ë–ñ–£ –ß–ï–†–ï–ó –ö–ù–û–ü–ö–ò
# -------------------------------------------------------------------------------------
# –ù–∏–∂–µ ‚Äì —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.
# –î–ª—è –≤–µ—Å–∞/—Ä–æ—Å—Ç–∞/–≤–æ–∑—Ä–∞—Å—Ç–∞ —á–∞—Å—Ç–æ –≤—Å—ë –∂–µ –ø–∏—à—É—Ç –≤—Ä—É—á–Ω—É—é, –∏–Ω–∞—á–µ –ø—Ä–∏–¥—ë—Ç—Å—è –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫.
# –°–¥–µ–ª–∞—é –≥–∏–±—Ä–∏–¥: –ø–æ–ª –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å/—Ü–µ–ª—å ‚Äì –∫–Ω–æ–ø–∫–∏, –∞ –≤–µ—Å/—Ä–æ—Å—Ç/–≤–æ–∑—Ä–∞—Å—Ç ‚Äì —Ç–µ–∫—Å—Ç.

(
    EVG_KBJU_STEP_GENDER,
    EVG_KBJU_STEP_WEIGHT,
    EVG_KBJU_STEP_HEIGHT,
    EVG_KBJU_STEP_AGE,
    EVG_KBJU_STEP_ACTIVITY,
    EVG_KBJU_STEP_GOAL
) = range(100, 106)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º ConversationHandler –∏–ª–∏ —Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä—É—á–Ω—É—é

# –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ ‚Äì ConversationHandler –¥–ª—è –ï–≤–≥–µ–Ω–∏—è:
async def evg_kbju_entry(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    # –ù–∞—á–∏–Ω–∞–µ–º "–æ–ø—Ä–æ—Å"
    # –®–∞–≥ 1: –ü–æ–ª
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="evg_kbju_gender_male"),
            InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="evg_kbju_gender_female"),
        ]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª (–ï–≤–≥.)", reply_markup=kb)

async def evg_kbju_gender_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data  # evg_kbju_gender_male / evg_kbju_gender_female
    gender = "male" if "male" in data else "female"
    user_id = query.from_user.id
    KBJU_EVGENIY_STATE[user_id] = {"gender": gender}

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥) —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 70.5:")
    # –î–∞–ª–µ–µ –ª–æ–≤–∏–º TEXT –≤ MessageHandler

async def evg_kbju_weight_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    try:
        weight = float(text)
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ (–≤–µ—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    KBJU_EVGENIY_STATE[user_id]["weight"] = weight
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º), –Ω–∞–ø—Ä. 175:")

async def evg_kbju_height_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    try:
        height = float(text)
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ (—Ä–æ—Å—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    KBJU_EVGENIY_STATE[user_id]["height"] = height
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç), —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

async def evg_kbju_age_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    try:
        age = int(text)
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    KBJU_EVGENIY_STATE[user_id]["age"] = age

    # –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("1.2", callback_data="evg_kbju_act_1.2"),
            InlineKeyboardButton("1.375", callback_data="evg_kbju_act_1.375"),
        ],
        [
            InlineKeyboardButton("1.55", callback_data="evg_kbju_act_1.55"),
            InlineKeyboardButton("1.7", callback_data="evg_kbju_act_1.7"),
            InlineKeyboardButton("1.9", callback_data="evg_kbju_act_1.9"),
        ]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ï–≤–≥.)", reply_markup=kb)

async def evg_kbju_act_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    act = float(query.data.split("_")[-1])  # evg_kbju_act_1.2 => "1.2"
    KBJU_EVGENIY_STATE[user_id]["activity"] = act

    # –¶–µ–ª—å
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü–æ—Ö—É–¥–µ—Ç—å", callback_data="evg_kbju_goal_loss"),
            InlineKeyboardButton("–ù–∞–±—Ä–∞—Ç—å", callback_data="evg_kbju_goal_gain"),
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="evg_kbju_goal_keep"),
        ]
    ])
    await query.message.reply_text("–ö–∞–∫–∞—è —Ü–µ–ª—å (–ï–≤–≥.)?", reply_markup=kb)

async def evg_kbju_goal_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data  # evg_kbju_goal_loss, etc.
    if "loss" in data:
        goal = "–ø–æ—Ö—É–¥–µ—Ç—å"
    elif "gain" in data:
        goal = "–Ω–∞–±—Ä–∞—Ç—å"
    else:
        goal = "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"

    KBJU_EVGENIY_STATE[user_id]["goal"] = goal
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
    st = KBJU_EVGENIY_STATE[user_id]
    gender = st["gender"]
    weight = st["weight"]
    height = st["height"]
    age = st["age"]
    act = st["activity"]

    res = calc_kbju(gender, weight, height, age, act, goal)
    await query.message.reply_text(f"–í–∞—à –ö–ë–ñ–£ (–ï–≤–≥.) ~ {res} –∫–∫–∞–ª/—Å—É—Ç–∫–∏.")
    del KBJU_EVGENIY_STATE[user_id]


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –ê–Ω–∞—Å—Ç–∞—Å–∏–∏.

# -------------------------------------------------------------------------------------
def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CommandHandler("start", start))

    # –í—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))
    # –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ä—Ç
    app.add_handler(CallbackQueryHandler(handle_back_to_start, pattern="^back_to_start$"))

    # ---------- –ï–≤–≥–µ–Ω–∏–π: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å ----------
    app.add_handler(CallbackQueryHandler(evg_free_course, pattern="^evg_free_course$"))
    app.add_handler(CallbackQueryHandler(evg_free_gender, pattern="^evg_free_gender_"))
    app.add_handler(CallbackQueryHandler(evg_free_program, pattern="^evg_free_program_"))
    app.add_handler(CallbackQueryHandler(evg_free_next_day, pattern="^evg_free_next_day$"))
    app.add_handler(CallbackQueryHandler(evg_free_send_report, pattern=r"^evg_free_send_report_day_\d+$"))
    # –í–∏–¥–µ–æ (–ï–≤–≥.)
    app.add_handler(MessageHandler(filters.VIDEO, evg_handle_video))

    # ---------- –ï–≤–≥–µ–Ω–∏–π: —á–µ–ª–ª–µ–Ω–¥–∂ ----------
    app.add_handler(CallbackQueryHandler(evg_challenge_menu, pattern="^evg_challenge_menu$"))
    app.add_handler(CallbackQueryHandler(evg_buy_challenge, pattern="^evg_buy_challenge$"))
    app.add_handler(CallbackQueryHandler(evg_challenge_next_day, pattern="^evg_challenge_next$"))

    # ---------- –ï–≤–≥–µ–Ω–∏–π: –ø–ª–∞—Ç–Ω—ã–π ----------
    app.add_handler(CallbackQueryHandler(evg_paid_course, pattern="^evg_paid_course$"))
    app.add_handler(CallbackQueryHandler(evg_send_receipt, pattern="^evg_send_receipt$"))
    app.add_handler(MessageHandler(filters.PHOTO, evg_handle_receipt))
    app.add_handler(CallbackQueryHandler(evg_confirm_payment, pattern="^evg_confirm_payment_"))
    app.add_handler(CallbackQueryHandler(evg_paid_gender, pattern="^evg_paid_gender_"))
    app.add_handler(CallbackQueryHandler(evg_paid_program, pattern="^evg_paid_program_"))
    app.add_handler(CallbackQueryHandler(evg_send_paid_report, pattern=r"^evg_paid_video_day_\d+$"))
    app.add_handler(CallbackQueryHandler(evg_paid_next_day, pattern="^evg_paid_next_day$"))

    # ---------- –ï–≤–≥–µ–Ω–∏–π: –∫–∞–±–∏–Ω–µ—Ç, etc. ----------
    app.add_handler(CallbackQueryHandler(evg_my_cabinet, pattern="^evg_my_cabinet$"))
    app.add_handler(CallbackQueryHandler(evg_about_me, pattern="^evg_about_me$"))
    app.add_handler(CallbackQueryHandler(evg_earn_points, pattern="^evg_earn_points$"))
    app.add_handler(CallbackQueryHandler(evg_spend_points, pattern="^evg_spend_points$"))
    app.add_handler(CallbackQueryHandler(evg_referral, pattern="^evg_referral$"))
    app.add_handler(CallbackQueryHandler(evg_back, pattern="^evg_back$"))

    # ---------- –ï–≤–≥–µ–Ω–∏–π: –ö–ë–ñ–£ (—á–µ—Ä–µ–∑ callback) ----------
    app.add_handler(CallbackQueryHandler(evg_kbju_entry, pattern="^evg_kbju$"))
    app.add_handler(CallbackQueryHandler(evg_kbju_gender_handler, pattern="^evg_kbju_gender_"))
    app.add_handler(CallbackQueryHandler(evg_kbju_act_handler, pattern="^evg_kbju_act_"))
    app.add_handler(CallbackQueryHandler(evg_kbju_goal_handler, pattern="^evg_kbju_goal_"))

    # –î–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞, —Ä–æ—Å—Ç–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞ - MessageHandler (—Ç–µ–∫—Å—Ç):
    app.add_handler(MessageHandler(filters.Regex(r"^\d+(\.\d+)?$"), evg_kbju_weight_handler), 1)
    app.add_handler(MessageHandler(filters.Regex(r"^\d+(\.\d+)?$"), evg_kbju_height_handler), 2)
    app.add_handler(MessageHandler(filters.Regex(r"^\d+$"), evg_kbju_age_handler), 3)
    # (–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω—É–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –æ—á–µ—Ä–µ–¥—å—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.)

    # ---------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π ----------
    app.add_handler(CallbackQueryHandler(ana_free_course, pattern="^ana_free_course$"))
    app.add_handler(CallbackQueryHandler(ana_free_gender, pattern="^ana_free_gender_"))
    app.add_handler(CallbackQueryHandler(ana_free_program, pattern="^ana_free_program_"))
    app.add_handler(CallbackQueryHandler(ana_free_next_day, pattern="^ana_free_next_day$"))
    app.add_handler(CallbackQueryHandler(ana_free_send_report, pattern=r"^ana_free_send_report_day_\d+$"))
    # –í–∏–¥–µ–æ (–ê–Ω–∞—Å—Ç.)
    app.add_handler(MessageHandler(filters.VIDEO, ana_handle_video))

    # –ò —Ç.–¥. –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏).
    # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å –≤—Å—ë, –≤—ã –ø–æ–Ω—è–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é.

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
