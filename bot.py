import logging
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ===== –¢–æ–∫–µ–Ω –∏ ID –≥—Ä—É–ø–ø—ã =====
TOKEN = "7761949562:AAF-zTgYwd5rzETyr3OnAGCGxrSQefFuKZs"
GROUP_ID = "-1002451371911"

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ (–†–∞–∑–¥–µ–ª—å–Ω–æ –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –∏ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏) =====
# -- –ï–≤–≥–µ–Ω–∏–π
user_scores_evg = {}
user_status_evg = {}
user_reports_sent_evg = {}
user_waiting_for_video_evg = {}
user_waiting_for_receipt_evg = {}
user_challenges_evg = {}
user_data_free_evg = {}   # —Ö—Ä–∞–Ω–µ–Ω–∏–µ (gender, program, current_day) –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
user_data_paid_evg = {}   # —Ö—Ä–∞–Ω–µ–Ω–∏–µ current_day –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞

# -- –ê–Ω–∞—Å—Ç–∞—Å–∏—è
user_scores_ana = {}
user_status_ana = {}
user_reports_sent_ana = {}
user_waiting_for_video_ana = {}
user_waiting_for_receipt_ana = {}
user_challenges_ana = {}
user_data_free_ana = {}
user_data_paid_ana = {}

# –°—Ç–∞—Ç—É—Å—ã –ø—Ä–∏–º–µ—Ä–Ω—ã–µ
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler (–ö–ë–ñ–£) ======
(
    EVG_KBJU_GENDER,
    EVG_KBJU_WEIGHT,
    EVG_KBJU_HEIGHT,
    EVG_KBJU_AGE,
    EVG_KBJU_ACTIVITY,
    EVG_KBJU_GOAL,
) = range(6)

(
    ANA_KBJU_GENDER,
    ANA_KBJU_WEIGHT,
    ANA_KBJU_HEIGHT,
    ANA_KBJU_AGE,
    ANA_KBJU_ACTIVITY,
    ANA_KBJU_GOAL,
) = range(16, 22)  # –†–∞–∑–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, —á—Ç–æ–±—ã ConversationHandler‚Äô—ã –Ω–µ –ø—É—Ç–∞–ª–∏—Å—å

# ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£ =====
def calculate_kbju(gender: str, weight: float, height: float, age: int, activity: float, goal: str) -> float:
    """
    –ü—Ä–∏–º–µ—Ä —É–ø—Ä–æ—â—ë–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã Mifflin-St Jeor:
    BMR (–º—É–∂)   = 10 * –≤–µ—Å + 6.25 * —Ä–æ—Å—Ç - 5 * –≤–æ–∑—Ä–∞—Å—Ç + 5
    BMR (–∂–µ–Ω)   = 10 * –≤–µ—Å + 6.25 * —Ä–æ—Å—Ç - 5 * –≤–æ–∑—Ä–∞—Å—Ç - 161

    –ó–∞—Ç–µ–º —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
      - –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (1.2)
      - –õ—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.375)
      - –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.55)
      - –í—ã—Å–æ–∫–∞—è (1.7)
      - –≠–∫—Å—Ç—Ä–∞ (1.9)

    –ó–∞—Ç–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ —Ü–µ–ª—å:
      - –ü–æ—Ö—É–¥–µ—Ç—å: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 0.85 (–ø—Ä–∏–º–µ—Ä–Ω–æ -15%)
      - –ù–∞–±—Ä–∞—Ç—å: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.15 (–ø—Ä–∏–º–µ—Ä–Ω–æ +15%)
      - –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.0
    """
    if gender.lower() in ["–º", "m"]:
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    cal = bmr * activity

    if goal == "–ø–æ—Ö—É–¥–µ—Ç—å":
        cal *= 0.85
    elif goal == "–Ω–∞–±—Ä–∞—Ç—å":
        cal *= 1.15
    else:
        cal *= 1.0

    return round(cal, 2)


# --------------------------------------------------------------------------------------
#                             –ú–ï–ù–Æ –î–õ–Ø –ï–í–ì–ï–ù–ò–Ø
# --------------------------------------------------------------------------------------
def main_menu_evg():
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ï–≤–≥–µ–Ω–∏—è –ö—É—Ä–æ—á–∫–∏–Ω–∞.
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)", callback_data="evg_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥–µ–Ω–∏–π)", callback_data="evg_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)", callback_data="evg_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ï–≤–≥–µ–Ω–∏–π)", callback_data="evg_my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="evg_earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="evg_spend_points")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="evg_referral")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ï–≤–≥–µ–Ω–∏–π)", callback_data="evg_kbju")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ (–ï–≤–≥–µ–Ω–∏–π)", callback_data="evg_about_me")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
    ])


# --------------------------------------------------------------------------------------
#                             –ú–ï–ù–Æ –î–õ–Ø –ê–ù–ê–°–¢–ê–°–ò–ò
# --------------------------------------------------------------------------------------
def main_menu_ana():
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ê–Ω–∞—Å—Ç–∞—Å–∏–∏.
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="ana_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="ana_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="ana_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="ana_my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="ana_earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="ana_spend_points")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ana_referral")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="ana_kbju")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="ana_about_me")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
    ])


# --------------------------------------------------------------------------------------
#                    /start –∏ –≤—ã–±–æ—Ä —Ç—Ä–µ–Ω–µ—Ä–∞ (–ø–µ—Ä–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
# --------------------------------------------------------------------------------------
def start_menu():
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_evg"),
         InlineKeyboardButton("üí´ –ê–Ω–∞—Å—Ç–∞—Å–∏—è", callback_data="instructor_ana")],
        [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
        [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
        [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")],
    ])
    return kb


async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start: 
    1. –°—á–∏—Ç—ã–≤–∞–µ—Ç ref (—Ä–µ—Ñ.—Å—Å—ã–ª–∫–∞), –µ—Å–ª–∏ –µ—Å—Ç—å.
    2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞.
    """
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ.—Å—Å—ã–ª–∫–∞
    if ctx.args:
        try:
            ref = int(ctx.args[0])
            if ref != user_id:
                # –ú–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä—É –±–∞–ª–ª—ã (–∫—É–¥–∞ –∏–º–µ–Ω–Ω–æ ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é; –∑–¥–µ—Å—å ¬´–≥–ª–æ–±–∞–ª—å–Ω–æ¬ª –Ω–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è, 
                # —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –∑–Ω–∞–µ–º, –∫–∞–∫–æ–π —Ç—Ä–µ–Ω–µ—Ä —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
                # –ù–æ –ø–æ –∑–∞–¥–∞—á–µ ‚Äì "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!", –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏—Å–ª—è–µ–º –≤ ¬´–Ω–∏—á–µ–π–Ω–æ–º¬ª —Å–ª–æ–≤–∞—Ä–µ
                # –∏–ª–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–æ–±–∞–≤–∏–º –≤ user_scores_evg.
                user_scores_evg[ref] = user_scores_evg.get(ref, 0) + 100
                try:
                    await ctx.bot.send_message(
                        chat_id=ref,
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!"
                    )
                except Exception as e:
                    logger.error(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {e}")
        except ValueError:
            pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
    await update.message.reply_text(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:",
        reply_markup=start_menu()
    )


# --------------------------------------------------------------------------------------
#               –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –¢–†–ï–ù–ï–†–ê (–ï–í–ì–ï–ù–ò–ô / –ê–ù–ê–°–¢–ê–°–ò–Ø / –ø—Ä–æ—á–∏–µ)
# --------------------------------------------------------------------------------------
async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data == "instructor_evg":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ï–≤–≥–µ–Ω–∏—è
        ctx.user_data[user_id] = {"instructor": "evg"}
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç–∞, –µ—Å–ª–∏ –Ω–∞–¥–æ
        user_scores_evg[user_id] = user_scores_evg.get(user_id, 0)
        user_status_evg[user_id] = user_status_evg.get(user_id, statuses[0])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
        await ctx.bot.send_video(
            chat_id=query.message.chat_id,
            video="https://t.me/PRIVETSTVIEC/2",  # –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏ (–∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞)
            supports_streaming=True,
            caption="üé• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω",
            reply_markup=main_menu_evg()
        )

    elif data == "instructor_ana":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ê–Ω–∞—Å—Ç–∞—Å–∏—é
        ctx.user_data[user_id] = {"instructor": "ana"}
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å
        user_scores_ana[user_id] = user_scores_ana.get(user_id, 0)
        user_status_ana[user_id] = user_status_ana.get(user_id, statuses[0])

        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–Ω–∞—Å—Ç–∞—Å–∏—è üí´")
        await ctx.bot.send_photo(
            chat_id=query.message.chat_id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025-02-08_22-08-36.jpg?raw=true",
            caption="üì∏ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–Ω–∞—Å—Ç–∞—Å–∏—è",
            reply_markup=main_menu_ana()
        )

    else:
        # –ü—Ä–æ—á–∏–µ —Ç—Ä–µ–Ω–µ—Ä—ã (3, 4, 5) - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
        if data == "instructor_3":
            sel = "–¢—Ä–µ–Ω–µ—Ä 3 üèãÔ∏è"
        elif data == "instructor_4":
            sel = "–¢—Ä–µ–Ω–µ—Ä 4 ü§º"
        elif data == "instructor_5":
            sel = "–¢—Ä–µ–Ω–µ—Ä 5 ü§∏"
        else:
            sel = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä"

        await query.message.edit_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: {sel}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω üöß\n"
                 f"–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        )
        # –ú–æ–∂–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, —Ç.–∫. —É –≤–∞—Å –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ–Ω—é –¥–ª—è —ç—Ç–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤


# --------------------------------------------------------------------------------------
#    –í–û–ó–í–†–ê–¢ –ö –°–¢–ê–†–¢–û–í–û–ú–£ –ú–ï–ù–Æ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ω–∞–∑–∞–¥" –∏–∑ –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞)
# --------------------------------------------------------------------------------------
async def handle_back_to_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:",
        reply_markup=start_menu()
    )


# --------------------------------------------------------------------------------------
#                           –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–° - –ï–í–ì–ï–ù–ò–ô
# --------------------------------------------------------------------------------------
async def evg_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ï–≤–≥–µ–Ω–∏—è.
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ user_data_free_evg[user_id] –ø–æ–ª—è gender, program.
    –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º. –ï—Å–ª–∏ –¥–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ start_free_course_evg().
    """
    query = update.callback_query
    user_id = query.from_user.id

    user_info = user_data_free_evg.get(user_id, {})
    if "gender" not in user_info or "program" not in user_info:
        # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="evg_free_gender_male"),
                InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="evg_free_gender_female")
            ]
        ])
        await query.message.reply_text("–í–∞—à –ø–æ–ª (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π):", reply_markup=kb)
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—É—Ä—Å
        await start_free_course_evg(query.message, ctx, user_id)


async def handle_evg_free_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (–ï–≤–≥–µ–Ω–∏–π)
    """
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if "male" in query.data else "female"

    if user_id not in user_data_free_evg:
        user_data_free_evg[user_id] = {}
    user_data_free_evg[user_id]["gender"] = gender

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="evg_free_program_home"),
            InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="evg_free_program_gym")
        ]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π):", reply_markup=kb)


async def handle_evg_free_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–æ–º/–∑–∞–ª) –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (–ï–≤–≥–µ–Ω–∏–π).
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ - —Å—Ç–∞—Ä—Ç—É–µ–º —Å–∞–º –∫—É—Ä—Å.
    """
    query = update.callback_query
    user_id = query.from_user.id
    program = "home" if "home" in query.data else "gym"

    if user_id not in user_data_free_evg:
        user_data_free_evg[user_id] = {}

    user_data_free_evg[user_id]["program"] = program
    user_data_free_evg[user_id]["current_day"] = 1

    await start_free_course_evg(query.message, ctx, user_id)


async def start_free_course_evg(msg, ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ï–≤–≥–µ–Ω–∏—è:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º gender + program. –ï—Å–ª–∏ –Ω–µ (female/home) ‚Äî –≥–æ–≤–æ—Ä–∏–º ¬´–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ¬ª.
       (–ü–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –≤–∏–¥–Ω–æ, —á—Ç–æ —Ç–æ–ª—å–∫–æ "–∂–µ–Ω—â–∏–Ω–∞ + –¥–æ–º–∞" –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–Ω—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.)
    2. –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å > 5, –∑–Ω–∞—á–∏—Ç –∫—É—Ä—Å –ø—Ä–æ–π–¥–µ–Ω.
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–Ω—è + –∫–Ω–æ–ø–∫—É ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç¬ª.
    """

    user_info = user_data_free_evg.get(user_id, {})
    if not (user_info.get("gender") == "female" and user_info.get("program") == "home"):
        await msg.reply_text("–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π) üöß", reply_markup=main_menu_evg())
        return

    day = user_info.get("current_day", 1)
    if day > 5:
        await msg.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)! üéâ", reply_markup=main_menu_evg())
        return

    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photos = {
        1: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9647.PNG?raw=true",
        2: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9648.PNG?raw=true",
        3: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9649.PNG?raw=true",
        4: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9650.PNG?raw=true",
        5: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9651.PNG?raw=true",
    }

    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    course = {
        1: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
            "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        2: [
            "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
        3: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
            "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)"
        ],
        4: [
            "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
            "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
            "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
            "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
        ],
    }

    exercises = course.get(day, [])
    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π): –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(exercises) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"evg_free_send_report_day_{day}")]
    ])

    try:
        await ctx.bot.send_photo(
            chat_id=msg.chat_id,
            photo=photos.get(day),
            caption=text,
            parse_mode="Markdown",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ï–≤–≥–µ–Ω–∏–π free day {day}): {e}")
        await msg.reply_text(
            text="–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.\n\n" + text,
            parse_mode="Markdown",
            reply_markup=kb
        )


async def evg_free_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç" –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –∫—É—Ä—Å–µ –ï–≤–≥–µ–Ω–∏—è.
    """
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])  # evg_free_send_report_day_X

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ
    if user_reports_sent_evg.get(user_id, {}).get(day):
        await query.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ï–≤–≥–µ–Ω–∏–π).")
        return

    # –ñ–¥–µ–º –≤–∏–¥–µ–æ:
    user_waiting_for_video_evg[user_id] = ("free", day)
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (–ï–≤–≥–µ–Ω–∏–π) üé•")


async def evg_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏—Ö–æ–¥–∏—Ç –≤–∏–¥–µ–æ –≤ —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —ç—Ç–æ –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ï–≤–≥–µ–Ω–∏—è.
    """
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –≤–∏–¥–µ–æ –∏–º–µ–Ω–Ω–æ –æ—Ç –ï–≤–≥–µ–Ω–∏—è
    if user_id not in user_waiting_for_video_evg:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º

    data = user_waiting_for_video_evg[user_id]
    course_type = data[0]

    if course_type == "free":
        day = data[1]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π) –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        user_scores_evg[user_id] = user_scores_evg.get(user_id, 0) + 60

        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        if user_id not in user_reports_sent_evg:
            user_reports_sent_evg[user_id] = {}
        user_reports_sent_evg[user_id][day] = True

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–µ–Ω—å
        current_day = user_data_free_evg[user_id]["current_day"]
        if current_day < 5:
            user_data_free_evg[user_id]["current_day"] = current_day + 1
            new_day = user_data_free_evg[user_id]["current_day"]

            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ï–≤–≥–µ–Ω–∏–π) –ø—Ä–∏–Ω—è—Ç! üéâ\n"
                f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_evg[user_id]}.\n"
                f"–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({new_day})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {new_day}", callback_data="evg_free_next_day")]
                ])
            )
        else:
            user_status_evg[user_id] = statuses[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—ã—Å–∏–º —Å—Ç–∞—Ç—É—Å
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)! üéâ\n"
                f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_evg[user_id]}.",
                reply_markup=main_menu_evg()
            )

        del user_waiting_for_video_evg[user_id]

    elif course_type == "paid":
        paid_day = data[1]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        await ctx.bot.send_message(
            chat_id=GROUP_ID,
            text=f"–ü–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–ï–≤–≥–µ–Ω–∏–π) –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {paid_day}."
        )
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

        # –ù–∞—á–∏—Å–ª–∏–º –±–∞–ª–ª—ã
        user_scores_evg[user_id] = user_scores_evg.get(user_id, 0) + 30

        # –£–±–µ—Ä–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        del user_waiting_for_video_evg[user_id]

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        current_day = user_data_paid_evg[user_id].get("current_day", 1)
        if current_day < 5:
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} (–ï–≤–≥–µ–Ω–∏–π) –ø—Ä–∏–Ω—è—Ç! üéâ\n"
                f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_evg[user_id]}.\n"
                f"–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({current_day + 1})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="evg_paid_next_day")]
                ])
            )
        else:
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_evg[user_id]}.",
                reply_markup=main_menu_evg()
            )
            user_data_paid_evg[user_id].pop("current_day", None)

    else:
        # –ö–∞–∫–∞—è-—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–ï–≤–≥–µ–Ω–∏–π).")


async def evg_free_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "‚û°Ô∏è –î–µ–Ω—å N" –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –∫—É—Ä—Å–µ –ï–≤–≥–µ–Ω–∏—è.
    –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å—Ç–∞—Ä—Ç–∞ –∫—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
    """
    query = update.callback_query
    user_id = query.from_user.id
    await start_free_course_evg(query.message, ctx, user_id)


# --------------------------------------------------------------------------------------
#                    –ß–ï–õ–õ–ï–ù–î–ñ - –ï–í–ì–ï–ù–ò–ô
# --------------------------------------------------------------------------------------
async def evg_challenge_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–ª–µ–Ω –ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ —É –ï–≤–≥–µ–Ω–∏—è, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 300+ –±–∞–ª–ª–æ–≤ –∏ —Ç.–¥.
    """
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)

    if user_id in user_challenges_evg:
        # –£–∂–µ –∫—É–ø–∏–ª —á–µ–ª–ª–µ–Ω–¥–∂
        await send_challenge_task_evg(query.message, user_id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–ª—ã
        if score >= 300:
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="evg_buy_challenge"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="evg_back")
                ]
            ])
            await query.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º (–ï–≤–≥–µ–Ω–∏–π) —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", reply_markup=kb)
        else:
            await query.message.reply_text(
                f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º (–ï–≤–≥–µ–Ω–∏–π) –Ω—É–∂–Ω–æ 300 –±–∞–ª–ª–æ–≤.\n"
                f"–£ –≤–∞—Å: {score} –±–∞–ª–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
            )


async def evg_buy_challenge(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    if score >= 300:
        user_scores_evg[user_id] = score - 300
        user_challenges_evg[user_id] = {"current_day": 1}
        await query.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º (–ï–≤–≥–µ–Ω–∏–π) –æ—Ç–∫—Ä—ã—Ç!", reply_markup=main_menu_evg())
        await send_challenge_task_evg(query.message, user_id)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É (–ï–≤–≥–µ–Ω–∏–π)!")


async def send_challenge_task_evg(message, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–ï–≤–≥–µ–Ω–∏–π) –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    """
    day = user_challenges_evg[user_id]["current_day"]
    # –ü—Ä–∏–º–µ—Ä —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–∞ 5 –¥–Ω–µ–π
    exercises_by_day = {
        1: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 30 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        2: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 25 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 30 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
        3: [
            "1Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)",
            "2Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
        ],
        4: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 60 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/183/184)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 50 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 40 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/393/394)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 50 —Ä–∞–∑ [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
        ],
    }
    exercises = exercises_by_day.get(day, [])
    text = f"üí™ **–ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥–µ–Ω–∏–π): –î–µ–Ω—å {day}** üí™\n\n" + "\n".join(exercises)

    if day < 5:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="evg_challenge_next")]
        ])
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="evg_back")]
        ])

    await message.reply_text(text, parse_mode="Markdown", reply_markup=kb)


async def evg_challenge_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in user_challenges_evg:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥–µ–Ω–∏–π)! üöß")
        return

    day = user_challenges_evg[user_id]["current_day"]
    if day < 5:
        user_challenges_evg[user_id]["current_day"] = day + 1
        await send_challenge_task_evg(query.message, user_id)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ (–ï–≤–≥–µ–Ω–∏–π)! üéâ", reply_markup=main_menu_evg())
        del user_challenges_evg[user_id]


# --------------------------------------------------------------------------------------
#                   –ü–õ–ê–¢–ù–´–ô –ö–£–†–° - –ï–í–ì–ï–ù–ò–ô
# --------------------------------------------------------------------------------------
async def evg_paid_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫—É–ø–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —É –ï–≤–≥–µ–Ω–∏—è.
    –õ–æ–≥–∏–∫–∞ —Å–∫–∏–¥–∫–∏: 1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è, –º–∞–∫—Å —Å–∫–∏–¥–∫–∞ = 600.
    –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: 2000 - discount.
    """
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    discount = min(score * 2, 600)
    price = 2000 - discount

    user_waiting_for_receipt_evg[user_id] = True

    await query.message.reply_text(
        f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)** üìö\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 2000 —Ä—É–±. üíµ\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±. üîñ\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price} —Ä—É–±. üí≥\n\n"
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É: 89236950304 (–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫) üè¶\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="evg_send_receipt")]])
    )


async def evg_send_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt_evg[user_id] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (–ï–≤–≥–µ–Ω–∏–π) üì∏.")


async def evg_handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ï–≤–≥–µ–Ω–∏–π).
    """
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    if user_id not in user_waiting_for_receipt_evg:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º —á–µ–∫

    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ï–≤–≥–µ–Ω–∏–π) üì∏.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    photo_id = update.message.photo[-1].file_id
    await ctx.bot.send_message(chat_id=GROUP_ID, text=f"üßæ –ß–µ–∫ (–ï–≤–≥–µ–Ω–∏–π) –æ—Ç {user_name} (ID: {user_id}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
    await ctx.bot.send_photo(chat_id=GROUP_ID, photo=photo_id,
                             reply_markup=InlineKeyboardMarkup([
                                 [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"evg_confirm_payment_{user_id}")]
                             ]))

    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–ï–≤–≥–µ–Ω–∏–π). –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥.")


async def evg_confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ê–¥–º–∏–Ω –≤ –≥—Ä—É–ø–ø–µ –Ω–∞–∂–∏–º–∞–µ—Ç "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É –ï–≤–≥–µ–Ω–∏—è.
    """
    query = update.callback_query
    data = query.data
    # data = "evg_confirm_payment_{user_id}"
    user_id = int(data.split("_")[-1])

    user_status_evg[user_id] = statuses[2]  # –ü—Ä–∏–º–µ—Ä–Ω–æ "–ß–µ–º–ø–∏–æ–Ω"
    if user_id in user_waiting_for_receipt_evg:
        del user_waiting_for_receipt_evg[user_id]

    await ctx.bot.send_message(
        chat_id=user_id,
        text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! (–ï–≤–≥–µ–Ω–∏–π)\n–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É. üéâ"
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="evg_paid_gender_male"),
            InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="evg_paid_gender_female")
        ]
    ])
    await ctx.bot.send_message(
        chat_id=user_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (–ï–≤–≥–µ–Ω–∏–π):",
        reply_markup=kb
    )


async def evg_paid_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    if "male" in data:
        await query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß (–º—É–∂—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ï–≤–≥–µ–Ω–∏–π)")
    else:
        # –ñ–µ–Ω—â–∏–Ω–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="evg_paid_program_gym"),
                InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="evg_paid_program_home")
            ]
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π):", reply_markup=kb)


async def evg_paid_program_gym(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç—É–µ–º –¥–µ–Ω—å 1 –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ï–≤–≥–µ–Ω–∏—è (–∂–µ–Ω—â–∏–Ω–∞, –∑–∞–ª).
    """
    query = update.callback_query
    user_id = query.from_user.id
    user_data_paid_evg[user_id] = {"current_day": 1}

    await evg_show_paid_day(query.message, user_id, day=1)


async def evg_paid_program_home(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß (–¥–æ–º–∞—à–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏–π)")


async def evg_show_paid_day(msg, user_id, day: int):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞ day (–ï–≤–≥–µ–Ω–∏–π, –ø–ª–∞—Ç–Ω—ã–π).
    """
    paid_program = {
        1: [
            "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
            "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
            "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
            "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
            "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
        ],
        2: [
            "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
            "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 (–≤–µ—Å –ø–æ–¥–±–∏—Ä–∞–µ—à—å) https://t.me/c/2241417709/175/176",
            "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261",
        ],
        3: [
            "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
            "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
            "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
            "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
            "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/136/137",
        ],
        4: [
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5 https://t.me/c/2241417709/159/160",
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15 https://t.me/c/2241417709/188/189",
            "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5 https://t.me/c/2241417709/169/170",
            "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12 https://t.me/c/2241417709/210/211",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273",
        ],
        5: [
            "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèÜ",
        ],
    }

    ex = paid_program.get(day, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"])
    text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π): –î–µ–Ω—å {day}** üìö\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"evg_paid_video_day_{day}")]
    ])
    await msg.reply_text(text, parse_mode="Markdown", reply_markup=kb)


async def evg_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç" –≤ –ø–ª–∞—Ç–Ω–æ–º –∫—É—Ä—Å–µ (–ï–≤–≥–µ–Ω–∏–π).
    """
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = int(query.data.split("_")[-1])
    user_waiting_for_video_evg[user_id] = ("paid", paid_day)

    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} (–ï–≤–≥–µ–Ω–∏–π) üé•")


async def evg_paid_next_day_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å" –≤ –ø–ª–∞—Ç–Ω–æ–º –∫—É—Ä—Å–µ (–ï–≤–≥–µ–Ω–∏–π).
    """
    query = update.callback_query
    user_id = query.from_user.id
    current_day = user_data_paid_evg[user_id].get("current_day", 1)

    if current_day < 5:
        next_day = current_day + 1
        user_data_paid_evg[user_id]["current_day"] = next_day
        await evg_show_paid_day(query.message, user_id, next_day)
    else:
        await query.message.reply_text(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–≤–≥–µ–Ω–∏–π)! üéâ",
            reply_markup=main_menu_evg()
        )
        user_data_paid_evg[user_id].pop("current_day", None)


# --------------------------------------------------------------------------------------
#                  –ú–ï–ù–Æ "–ú–û–ô –ö–ê–ë–ò–ù–ï–¢" / "–û–ë–û –ú–ù–ï" / "–ö–ê–ö –ó–ê–†–ê–ë–û–¢–ê–¢–¨" / "–ö–ê–ö –ü–û–¢–†–ê–¢–ò–¢–¨"
#                                 (–ï–≤–≥–µ–Ω–∏–π)
# --------------------------------------------------------------------------------------
async def evg_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    status = user_status_evg.get(user_id, statuses[0])
    text = (f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç (–ï–≤–≥–µ–Ω–∏–π):\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ë–∞–ª–ª—ã: {score}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤! üí™")

    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' (–ï–≤–≥–µ–Ω–∏–π): {e}")
        await query.message.reply_text(text)


async def evg_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ (–ï–≤–≥–µ–Ω–∏–π):\n\n"
            "–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π –í–∏—Ç–∞–ª—å–µ–≤–∏—á\n"
            "–û–±—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–∞–∂ - 20 –ª–µ—Ç\n"
            "–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã - 15 –ª–µ—Ç\n"
            "–ú–° - –ø–æ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ\n"
            "–ú–° - –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n"
            "–°—É–¥—å—è - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n"
            "–ö–ú–° - –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É\n\n"
            "20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ! üí•")

    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025.jpg?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–û–±–æ –º–Ω–µ' (–ï–≤–≥–µ–Ω–∏–π): {e}")
        await query.message.reply_text(text)


async def evg_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã (–ï–≤–≥–µ–Ω–∏–π):\n\n"
            "1Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "2Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
            "4Ô∏è‚É£ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.")

    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9699.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã' (–ï–≤–≥–µ–Ω–∏–π): {e}")
        await query.message.reply_text(text)


async def evg_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_evg.get(user_id, 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ï–≤–≥–µ–Ω–∏–π):\n\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å {score} –±–∞–ª–ª–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n"
            "- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n"
            "- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")

    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9692.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã' (–ï–≤–≥–µ–Ω–∏–π): {e}")
        await query.message.reply_text(text)


async def evg_referral(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    me = await ctx.bot.get_me()
    link = f"https://t.me/{me.username}?start={user_id}"
    await query.message.reply_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ï–≤–≥–µ–Ω–∏–π):\n{link}\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –±–∞–ª–ª–æ–≤! üéâ"
    )


async def evg_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ï–≤–≥–µ–Ω–∏–π)", reply_markup=main_menu_evg())


# --------------------------------------------------------------------------------------
#                       –†–ê–°–ß–Å–¢ –ö–ë–ñ–£ (–ï–≤–≥–µ–Ω–∏–π) - ConversationHandler
# --------------------------------------------------------------------------------------
async def evg_kbju_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ö–ë–ñ–£ (–ï–≤–≥–µ–Ω–∏–π).
    """
    query = update.callback_query
    await query.message.reply_text(
        "–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (M / –ñ):",
        reply_markup=ReplyKeyboardRemove()
    )
    return EVG_KBJU_GENDER


async def evg_kbju_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.strip().lower()
    ctx.user_data["evg_kbju_gender"] = gender
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥), –Ω–∞–ø—Ä–∏–º–µ—Ä 70.5:")
    return EVG_KBJU_WEIGHT


async def evg_kbju_weight(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    weight = update.message.text.strip()
    ctx.user_data["evg_kbju_weight"] = float(weight)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º), –Ω–∞–ø—Ä–∏–º–µ—Ä 170:")
    return EVG_KBJU_HEIGHT


async def evg_kbju_height(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    height = update.message.text.strip()
    ctx.user_data["evg_kbju_height"] = float(height)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 30:")
    return EVG_KBJU_AGE


async def evg_kbju_age(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    age = update.message.text.strip()
    ctx.user_data["evg_kbju_age"] = int(age)

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    msg = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "1.2 - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è\n"
        "1.375 - –ª—ë–≥–∫–∞—è\n"
        "1.55 - —Å—Ä–µ–¥–Ω—è—è\n"
        "1.7 - –≤—ã—Å–æ–∫–∞—è\n"
        "1.9 - —ç–∫—Å—Ç—Ä–∞\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ:"
    )
    await update.message.reply_text(msg)
    return EVG_KBJU_ACTIVITY


async def evg_kbju_activity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    act = update.message.text.strip()
    ctx.user_data["evg_kbju_activity"] = float(act)

    # –¶–µ–ª—å
    msg = "–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å? –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: –ø–æ—Ö—É–¥–µ—Ç—å / –Ω–∞–±—Ä–∞—Ç—å / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"
    await update.message.reply_text(msg)
    return EVG_KBJU_GOAL


async def evg_kbju_goal(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.strip().lower()
    ctx.user_data["evg_kbju_goal"] = goal

    # –¢–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º
    gender = ctx.user_data["evg_kbju_gender"]
    weight = ctx.user_data["evg_kbju_weight"]
    height = ctx.user_data["evg_kbju_height"]
    age = ctx.user_data["evg_kbju_age"]
    act = ctx.user_data["evg_kbju_activity"]

    cal = calculate_kbju(gender, weight, height, age, act, goal)
    await update.message.reply_text(
        f"–í–∞—à —Å—É—Ç–æ—á–Ω—ã–π –∫–∞–ª–æ—Ä–∞–∂ –ø—Ä–∏–º–µ—Ä–Ω–æ: {cal} –∫–∫–∞–ª.\n"
        f"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º."
    )
    return ConversationHandler.END


async def evg_kbju_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –ö–ë–ñ–£ –æ—Ç–º–µ–Ω—ë–Ω (–ï–≤–≥–µ–Ω–∏–π).", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# --------------------------------------------------------------------------------------
#                       –ê–ù–ê–õ–û–ì–ò–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–ù–ê–°–¢–ê–°–ò–ò
# --------------------------------------------------------------------------------------

# ----------- –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–° (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) -----------
async def ana_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    user_info = user_data_free_ana.get(user_id, {})
    if "gender" not in user_info or "program" not in user_info:
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="ana_free_gender_male"),
                InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="ana_free_gender_female")
            ]
        ])
        await query.message.reply_text("–í–∞—à –ø–æ–ª (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è):", reply_markup=kb)
    else:
        await start_free_course_ana(query.message, ctx, user_id)


async def handle_ana_free_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if "male" in query.data else "female"

    if user_id not in user_data_free_ana:
        user_data_free_ana[user_id] = {}
    user_data_free_ana[user_id]["gender"] = gender

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="ana_free_program_home"),
            InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="ana_free_program_gym")
        ]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è):", reply_markup=kb)


async def handle_ana_free_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    program = "home" if "home" in query.data else "gym"

    if user_id not in user_data_free_ana:
        user_data_free_ana[user_id] = {}

    user_data_free_ana[user_id]["program"] = program
    user_data_free_ana[user_id]["current_day"] = 1

    await start_free_course_ana(query.message, ctx, user_id)


async def start_free_course_ana(msg, ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    """
    –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ï–≤–≥–µ–Ω–∏—é. 
    –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –∏–∑ –ï–≤–≥–µ–Ω–∏—è, –Ω–æ —Ö—Ä–∞–Ω–∏–º –≤—Å—ë –≤ —Å–ª–æ–≤–∞—Ä—è—Ö –ê–Ω–∞—Å—Ç–∞—Å–∏–∏.
    """
    user_info = user_data_free_ana.get(user_id, {})
    # –ï—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ —Ç–∞–∫–∞—è –∂–µ (female/home), —Ç–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if not (user_info.get("gender") == "female" and user_info.get("program") == "home"):
        await msg.reply_text("–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è) üöß", reply_markup=main_menu_ana())
        return

    day = user_info.get("current_day", 1)
    if day > 5:
        await msg.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)! üéâ", reply_markup=main_menu_ana())
        return

    photos = {
        1: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9647.PNG?raw=true",
        2: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9648.PNG?raw=true",
        3: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9649.PNG?raw=true",
        4: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9650.PNG?raw=true",
        5: "https://github.com/boss198806/telegram-bot/blob/main/IMG_9651.PNG?raw=true",
    }

    course = {
        1: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20",
            "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15"
        ],
        2: [
            "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20"
        ],
        3: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20",
            "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15"
        ],
        4: [
            "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20",
            "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15",
            "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20",
            "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15"
        ],
    }

    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è): –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(course[day]) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"ana_free_send_report_day_{day}")]
    ])

    try:
        await ctx.bot.send_photo(
            chat_id=msg.chat_id,
            photo=photos[day],
            caption=text,
            parse_mode="Markdown",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è free day {day}): {e}")
        await msg.reply_text(
            "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ–∑ —Ñ–æ—Ç–æ.\n\n" + text,
            parse_mode="Markdown",
            reply_markup=kb
        )


async def ana_free_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])  # ana_free_send_report_day_X

    if user_reports_sent_ana.get(user_id, {}).get(day):
        await query.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")
        return

    user_waiting_for_video_ana[user_id] = ("free", day)
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) üé•")


async def ana_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    if user_id not in user_waiting_for_video_ana:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∂–¥–µ–º

    data = user_waiting_for_video_ana[user_id]
    course_type = data[0]

    if course_type == "free":
        day = data[1]
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è) –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

        user_scores_ana[user_id] = user_scores_ana.get(user_id, 0) + 60

        if user_id not in user_reports_sent_ana:
            user_reports_sent_ana[user_id] = {}
        user_reports_sent_ana[user_id][day] = True

        current_day = user_data_free_ana[user_id]["current_day"]
        if current_day < 5:
            user_data_free_ana[user_id]["current_day"] = current_day + 1
            new_day = user_data_free_ana[user_id]["current_day"]
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –ø—Ä–∏–Ω—è—Ç! üéâ\n"
                f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_ana[user_id]}.\n"
                f"–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({new_day})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {new_day}", callback_data="ana_free_next_day")]
                ])
            )
        else:
            user_status_ana[user_id] = statuses[1]
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)! üéâ\n"
                f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_ana[user_id]}.",
                reply_markup=main_menu_ana()
            )

        del user_waiting_for_video_ana[user_id]

    elif course_type == "paid":
        paid_day = data[1]
        await ctx.bot.send_message(
            chat_id=GROUP_ID,
            text=f"–ü–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {paid_day}."
        )
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

        user_scores_ana[user_id] = user_scores_ana.get(user_id, 0) + 30
        del user_waiting_for_video_ana[user_id]

        current_day = user_data_paid_ana[user_id].get("current_day", 1)
        if current_day < 5:
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –ø—Ä–∏–Ω—è—Ç! üéâ\n"
                f"–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_ana[user_id]}.\n"
                f"–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({current_day + 1})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="ana_paid_next_day")]
                ])
            )
        else:
            await update.message.reply_text(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores_ana[user_id]}.",
                reply_markup=main_menu_ana()
            )
            user_data_paid_ana[user_id].pop("current_day", None)

    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")


async def ana_free_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await start_free_course_ana(query.message, ctx, user_id)


# ----------- –ß–ï–õ–õ–ï–ù–î–ñ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) -----------
async def ana_challenge_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_ana.get(user_id, 0)

    if user_id in user_challenges_ana:
        await send_challenge_task_ana(query.message, user_id)
    else:
        if score >= 300:
            kb = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="ana_buy_challenge"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ana_back")
                ]
            ])
            await query.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?", reply_markup=kb)
        else:
            await query.message.reply_text(
                f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –Ω—É–∂–Ω–æ 300 –±–∞–ª–ª–æ–≤.\n"
                f"–£ –≤–∞—Å: {score} –±–∞–ª–ª–æ–≤.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
            )


async def ana_buy_challenge(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_ana.get(user_id, 0)
    if score >= 300:
        user_scores_ana[user_id] = score - 300
        user_challenges_ana[user_id] = {"current_day": 1}
        await query.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –æ—Ç–∫—Ä—ã—Ç!", reply_markup=main_menu_ana())
        await send_challenge_task_ana(query.message, user_id)
    else:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)!")


async def send_challenge_task_ana(message, user_id: int):
    day = user_challenges_ana[user_id]["current_day"]
    exercises_by_day = {
        1: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 40 —Ä–∞–∑",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 30 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É"
        ],
        2: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 30 —Ä–∞–∑",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 25 —Ä–∞–∑",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 30 —Ä–∞–∑"
        ],
        3: [
            "1Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3 –º–∏–Ω",
            "2Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15"
        ],
        4: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 60 —Ä–∞–∑",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 50 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É"
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 50 —Ä–∞–∑",
            "2Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 40 —Ä–∞–∑",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 50 —Ä–∞–∑"
        ],
    }
    exercises = exercises_by_day.get(day, [])
    text = f"üí™ **–ß–µ–ª–ª–µ–Ω–¥–∂ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è): –î–µ–Ω—å {day}** üí™\n\n" + "\n".join(exercises)

    if day < 5:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="ana_challenge_next")]
        ])
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="ana_back")]
        ])

    await message.reply_text(text, parse_mode="Markdown", reply_markup=kb)


async def ana_challenge_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_id not in user_challenges_ana:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)! üöß")
        return

    day = user_challenges_ana[user_id]["current_day"]
    if day < 5:
        user_challenges_ana[user_id]["current_day"] = day + 1
        await send_challenge_task_ana(query.message, user_id)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)! üéâ", reply_markup=main_menu_ana())
        del user_challenges_ana[user_id]


# ----------- –ü–õ–ê–¢–ù–´–ô –ö–£–†–° (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) -----------
async def ana_paid_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_ana.get(user_id, 0)
    discount = min(score * 2, 600)
    price = 2000 - discount

    user_waiting_for_receipt_ana[user_id] = True

    await query.message.reply_text(
        f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)** üìö\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 2000 —Ä—É–±. üíµ\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±. üîñ\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price} —Ä—É–±. üí≥\n\n"
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É: 89236950304 (–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫) üè¶\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="ana_send_receipt")]])
    )


async def ana_send_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt_ana[user_id] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) üì∏.")


async def ana_handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    if user_id not in user_waiting_for_receipt_ana:
        return

    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) üì∏.")
        return

    photo_id = update.message.photo[-1].file_id
    await ctx.bot.send_message(chat_id=GROUP_ID, text=f"üßæ –ß–µ–∫ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –æ—Ç {user_name} (ID: {user_id}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
    await ctx.bot.send_photo(
        chat_id=GROUP_ID,
        photo=photo_id,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"ana_confirm_payment_{user_id}")]
        ])
    )
    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (–ê–Ω–∞—Å—Ç–∞—Å–∏—è). –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥.")


async def ana_confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = int(data.split("_")[-1])

    user_status_ana[user_id] = statuses[2]
    if user_id in user_waiting_for_receipt_ana:
        del user_waiting_for_receipt_ana[user_id]

    await ctx.bot.send_message(
        chat_id=user_id,
        text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)\n–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É. üéâ"
    )

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª
    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="ana_paid_gender_male"),
            InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="ana_paid_gender_female")
        ]
    ])
    await ctx.bot.send_message(
        chat_id=user_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):",
        reply_markup=kb
    )


async def ana_paid_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    if "male" in data:
        await query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß (–º—É–∂—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è)")
    else:
        # –ñ–µ–Ω—â–∏–Ω–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="ana_paid_program_gym"),
                InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="ana_paid_program_home")
            ]
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É (–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è):", reply_markup=kb)


async def ana_paid_program_gym(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_data_paid_ana[user_id] = {"current_day": 1}

    await ana_show_paid_day(query.message, user_id, day=1)


async def ana_paid_program_home(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß (–¥–æ–º–∞—à–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏—è)")


async def ana_show_paid_day(msg, user_id, day: int):
    paid_program = {
        1: [
            "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5",
            "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥",
            "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20",
            "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20",
            "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15",
        ],
        2: [
            "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5",
            "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5",
            "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5",
        ],
        3: [
            "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5",
            "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15",
            "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5",
            "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5",
            "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5",
        ],
        4: [
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5",
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15",
            "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5",
            "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12",
            "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12",
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20",
        ],
        5: [
            "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèÜ",
        ],
    }
    ex = paid_program.get(day, ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å"])
    text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è): –î–µ–Ω—å {day}** üìö\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"ana_paid_video_day_{day}")]
    ])
    await msg.reply_text(text, parse_mode="Markdown", reply_markup=kb)


async def ana_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = int(query.data.split("_")[-1])
    user_waiting_for_video_ana[user_id] = ("paid", paid_day)

    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) üé•")


async def ana_paid_next_day_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    current_day = user_data_paid_ana[user_id].get("current_day", 1)

    if current_day < 5:
        next_day = current_day + 1
        user_data_paid_ana[user_id]["current_day"] = next_day
        await ana_show_paid_day(query.message, user_id, next_day)
    else:
        await query.message.reply_text(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)! üéâ",
            reply_markup=main_menu_ana()
        )
        user_data_paid_ana[user_id].pop("current_day", None)


# ----------- –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç / –æ–±–æ –º–Ω–µ / –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å / –∫–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) -----------
async def ana_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_ana.get(user_id, 0)
    status = user_status_ana.get(user_id, statuses[0])
    text = (f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ë–∞–ª–ª—ã: {score}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤! üí™")

    try:
        await ctx.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true",
            caption=text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' (–ê–Ω–∞—Å—Ç–∞—Å–∏—è): {e}")
        await query.message.reply_text(text)


async def ana_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):\n\n"
            "–ü—Ä–∏–º–µ—Ä –±–∏–æ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏...\n"
            "–°—Ç–∞–∂, —Ä–µ–≥–∞–ª–∏–∏ –∏ —Ç.–¥.\n\n"
            "15 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ! üí• (–ø—Ä–∏–º–µ—Ä)")

    await query.message.reply_text(text)


async def ana_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):\n\n"
            "1Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "2Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
            "4Ô∏è‚É£ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.")

    await query.message.reply_text(text)


async def ana_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores_ana.get(user_id, 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):\n\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å {score} –±–∞–ª–ª–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n"
            "- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n"
            "- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")

    await query.message.reply_text(text)


async def ana_referral(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    me = await ctx.bot.get_me()
    link = f"https://t.me/{me.username}?start={user_id}"
    await query.message.reply_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):\n{link}\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –±–∞–ª–ª–æ–≤! üéâ"
    )


async def ana_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", reply_markup=main_menu_ana())


# ----------- –†–ê–°–ß–Å–¢ –ö–ë–ñ–£ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) -----------
async def ana_kbju_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è), –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (M / –ñ):")
    return ANA_KBJU_GENDER


async def ana_kbju_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.strip().lower()
    ctx.user_data["ana_kbju_gender"] = gender
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥), –Ω–∞–ø—Ä–∏–º–µ—Ä 70.5:")
    return ANA_KBJU_WEIGHT


async def ana_kbju_weight(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    weight = update.message.text.strip()
    ctx.user_data["ana_kbju_weight"] = float(weight)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º), –Ω–∞–ø—Ä–∏–º–µ—Ä 170:")
    return ANA_KBJU_HEIGHT


async def ana_kbju_height(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    height = update.message.text.strip()
    ctx.user_data["ana_kbju_height"] = float(height)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä 30:")
    return ANA_KBJU_AGE


async def ana_kbju_age(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    age = update.message.text.strip()
    ctx.user_data["ana_kbju_age"] = int(age)

    msg = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "1.2 - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è\n"
        "1.375 - –ª—ë–≥–∫–∞—è\n"
        "1.55 - —Å—Ä–µ–¥–Ω—è—è\n"
        "1.7 - –≤—ã—Å–æ–∫–∞—è\n"
        "1.9 - —ç–∫—Å—Ç—Ä–∞\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ:"
    )
    await update.message.reply_text(msg)
    return ANA_KBJU_ACTIVITY


async def ana_kbju_activity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    act = update.message.text.strip()
    ctx.user_data["ana_kbju_activity"] = float(act)

    msg = "–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å? –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ –∏–∑: –ø–æ—Ö—É–¥–µ—Ç—å / –Ω–∞–±—Ä–∞—Ç—å / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"
    await update.message.reply_text(msg)
    return ANA_KBJU_GOAL


async def ana_kbju_goal(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    goal = update.message.text.strip().lower()
    ctx.user_data["ana_kbju_goal"] = goal

    gender = ctx.user_data["ana_kbju_gender"]
    weight = ctx.user_data["ana_kbju_weight"]
    height = ctx.user_data["ana_kbju_height"]
    age = ctx.user_data["ana_kbju_age"]
    act = ctx.user_data["ana_kbju_activity"]

    cal = calculate_kbju(gender, weight, height, age, act, goal)
    await update.message.reply_text(
        f"–í–∞—à —Å—É—Ç–æ—á–Ω—ã–π –∫–∞–ª–æ—Ä–∞–∂ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) –ø—Ä–∏–º–µ—Ä–Ω–æ: {cal} –∫–∫–∞–ª.\n"
        f"–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á—ë—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º."
    )
    return ConversationHandler.END


async def ana_kbju_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –ö–ë–ñ–£ –æ—Ç–º–µ–Ω—ë–Ω (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# --------------------------------------------------------------------------------------
#                                MAIN
# --------------------------------------------------------------------------------------
def main():
    app = Application.builder().token(TOKEN).build()

    # ---------- ConversationHandler –¥–ª—è –ö–ë–ñ–£ (–ï–≤–≥–µ–Ω–∏–π) ----------
    evg_kbju_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(evg_kbju_start, pattern="^evg_kbju$")],
        states={
            EVG_KBJU_GENDER: [MessageHandler(filters.TEXT, evg_kbju_gender)],
            EVG_KBJU_WEIGHT: [MessageHandler(filters.TEXT, evg_kbju_weight)],
            EVG_KBJU_HEIGHT: [MessageHandler(filters.TEXT, evg_kbju_height)],
            EVG_KBJU_AGE: [MessageHandler(filters.TEXT, evg_kbju_age)],
            EVG_KBJU_ACTIVITY: [MessageHandler(filters.TEXT, evg_kbju_activity)],
            EVG_KBJU_GOAL: [MessageHandler(filters.TEXT, evg_kbju_goal)],
        },
        fallbacks=[CommandHandler("cancel", evg_kbju_cancel)]
    )

    # ---------- ConversationHandler –¥–ª—è –ö–ë–ñ–£ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è) ----------
    ana_kbju_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(ana_kbju_start, pattern="^ana_kbju$")],
        states={
            ANA_KBJU_GENDER: [MessageHandler(filters.TEXT, ana_kbju_gender)],
            ANA_KBJU_WEIGHT: [MessageHandler(filters.TEXT, ana_kbju_weight)],
            ANA_KBJU_HEIGHT: [MessageHandler(filters.TEXT, ana_kbju_height)],
            ANA_KBJU_AGE: [MessageHandler(filters.TEXT, ana_kbju_age)],
            ANA_KBJU_ACTIVITY: [MessageHandler(filters.TEXT, ana_kbju_activity)],
            ANA_KBJU_GOAL: [MessageHandler(filters.TEXT, ana_kbju_goal)],
        },
        fallbacks=[CommandHandler("cancel", ana_kbju_cancel)]
    )

    # -------------------------- –ö–æ–º–∞–Ω–¥–∞ /start --------------------------
    app.add_handler(CommandHandler("start", start))

    # -------------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ ----------------
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))

    # -------------------------- –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç—É ------------------------
    app.add_handler(CallbackQueryHandler(handle_back_to_start, pattern="^back_to_start$"))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å ----------------
    app.add_handler(CallbackQueryHandler(evg_free_course, pattern="^evg_free_course$"))
    app.add_handler(CallbackQueryHandler(handle_evg_free_gender, pattern="^evg_free_gender_"))
    app.add_handler(CallbackQueryHandler(handle_evg_free_program, pattern="^evg_free_program_"))
    app.add_handler(CallbackQueryHandler(evg_free_next_day, pattern="^evg_free_next_day$"))
    app.add_handler(CallbackQueryHandler(evg_free_send_report, pattern=r"^evg_free_send_report_day_\d+$"))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –í–∏–¥–µ–æ ----------------
    #   –õ–æ–≤–∏–º –≤—Å–µ –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ
    app.add_handler(MessageHandler(filters.VIDEO, evg_handle_video))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –ß–µ–ª–ª–µ–Ω–¥–∂ ----------------
    app.add_handler(CallbackQueryHandler(evg_challenge_menu, pattern="^evg_challenge_menu$"))
    app.add_handler(CallbackQueryHandler(evg_buy_challenge, pattern="^evg_buy_challenge$"))
    app.add_handler(CallbackQueryHandler(evg_challenge_next_day, pattern="^evg_challenge_next$"))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å ----------------
    app.add_handler(CallbackQueryHandler(evg_paid_course, pattern="^evg_paid_course$"))
    app.add_handler(CallbackQueryHandler(evg_send_receipt, pattern="^evg_send_receipt$"))
    app.add_handler(CallbackQueryHandler(evg_confirm_payment, pattern="^evg_confirm_payment_\d+$"))
    #   –í—ã–±–æ—Ä –ø–æ–ª–∞
    app.add_handler(CallbackQueryHandler(evg_paid_gender, pattern="^evg_paid_gender_"))
    #   –ü—Ä–æ–≥—Ä–∞–º–º–∞
    app.add_handler(CallbackQueryHandler(evg_paid_program_gym, pattern="^evg_paid_program_gym$"))
    app.add_handler(CallbackQueryHandler(evg_paid_program_home, pattern="^evg_paid_program_home$"))
    #   –î–Ω–∏
    app.add_handler(CallbackQueryHandler(evg_send_paid_report, pattern=r"^evg_paid_video_day_\d+$"))
    app.add_handler(CallbackQueryHandler(evg_paid_next_day_handler, pattern="^evg_paid_next_day$"))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –§–æ—Ç–æ —á–µ–∫–∞ ----------------
    app.add_handler(MessageHandler(filters.PHOTO, evg_handle_receipt))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ----------------
    app.add_handler(CallbackQueryHandler(evg_my_cabinet, pattern="^evg_my_cabinet$"))
    app.add_handler(CallbackQueryHandler(evg_about_me, pattern="^evg_about_me$"))
    app.add_handler(CallbackQueryHandler(evg_earn_points, pattern="^evg_earn_points$"))
    app.add_handler(CallbackQueryHandler(evg_spend_points, pattern="^evg_spend_points$"))
    app.add_handler(CallbackQueryHandler(evg_referral, pattern="^evg_referral$"))
    app.add_handler(CallbackQueryHandler(evg_back, pattern="^evg_back$"))

    # -------------------------- –ï–≤–≥–µ–Ω–∏–π: –ö–ë–ñ–£ (ConversationHandler) -------
    app.add_handler(evg_kbju_conv)

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å ----------------
    app.add_handler(CallbackQueryHandler(ana_free_course, pattern="^ana_free_course$"))
    app.add_handler(CallbackQueryHandler(handle_ana_free_gender, pattern="^ana_free_gender_"))
    app.add_handler(CallbackQueryHandler(handle_ana_free_program, pattern="^ana_free_program_"))
    app.add_handler(CallbackQueryHandler(ana_free_next_day, pattern="^ana_free_next_day$"))
    app.add_handler(CallbackQueryHandler(ana_free_send_report, pattern=r"^ana_free_send_report_day_\d+$"))

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –í–∏–¥–µ–æ ----------------
    app.add_handler(MessageHandler(filters.VIDEO, ana_handle_video))

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –ß–µ–ª–ª–µ–Ω–¥–∂ ----------------
    app.add_handler(CallbackQueryHandler(ana_challenge_menu, pattern="^ana_challenge_menu$"))
    app.add_handler(CallbackQueryHandler(ana_buy_challenge, pattern="^ana_buy_challenge$"))
    app.add_handler(CallbackQueryHandler(ana_challenge_next_day, pattern="^ana_challenge_next$"))

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å ----------------
    app.add_handler(CallbackQueryHandler(ana_paid_course, pattern="^ana_paid_course$"))
    app.add_handler(CallbackQueryHandler(ana_send_receipt, pattern="^ana_send_receipt$"))
    app.add_handler(CallbackQueryHandler(ana_confirm_payment, pattern="^ana_confirm_payment_\d+$"))
    #   –í—ã–±–æ—Ä –ø–æ–ª–∞
    app.add_handler(CallbackQueryHandler(ana_paid_gender, pattern="^ana_paid_gender_"))
    #   –ü—Ä–æ–≥—Ä–∞–º–º–∞
    app.add_handler(CallbackQueryHandler(ana_paid_program_gym, pattern="^ana_paid_program_gym$"))
    app.add_handler(CallbackQueryHandler(ana_paid_program_home, pattern="^ana_paid_program_home$"))
    #   –î–Ω–∏
    app.add_handler(CallbackQueryHandler(ana_send_paid_report, pattern=r"^ana_paid_video_day_\d+$"))
    app.add_handler(CallbackQueryHandler(ana_paid_next_day_handler, pattern="^ana_paid_next_day$"))

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –§–æ—Ç–æ —á–µ–∫–∞ ----------------
    app.add_handler(MessageHandler(filters.PHOTO, ana_handle_receipt))

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ----------------
    app.add_handler(CallbackQueryHandler(ana_my_cabinet, pattern="^ana_my_cabinet$"))
    app.add_handler(CallbackQueryHandler(ana_about_me, pattern="^ana_about_me$"))
    app.add_handler(CallbackQueryHandler(ana_earn_points, pattern="^ana_earn_points$"))
    app.add_handler(CallbackQueryHandler(ana_spend_points, pattern="^ana_spend_points$"))
    app.add_handler(CallbackQueryHandler(ana_referral, pattern="^ana_referral$"))
    app.add_handler(CallbackQueryHandler(ana_back, pattern="^ana_back$"))

    # -------------------------- –ê–Ω–∞—Å—Ç–∞—Å–∏—è: –ö–ë–ñ–£ (ConversationHandler) ------
    app.add_handler(ana_kbju_conv)

    # -------------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -------------------------------
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üöÄ")
    app.run_polling()


if __name__ == "__main__":
    main()
