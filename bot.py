import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)
TOKEN = "7761949562:AAF-zTgYwd5rzETyr3OnAGCGxrSQefFuKZs"
GROUP_ID = "-1002451371911"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
user_scores = {}           # –ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—â–∏–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
user_status = {}
free_reports = {}          # –û—Ç—á—ë—Ç—ã –ø–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É
paid_reports = {}          # –û—Ç—á—ë—Ç—ã –ø–æ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É
free_waiting_for_video = {}    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å): {user_id: day}
paid_waiting_for_video = {}    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å): {user_id: day}
user_waiting_for_challenge_video = {}
user_waiting_for_receipt = {}  # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å)
user_challenges = {}
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞)
def main_menu():
    buttons = [
        ("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", "free_course"),
        ("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", "challenge_menu"),
        ("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", "paid_course"),
        ("üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", "nutrition_menu"),
        ("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", "my_cabinet"),
        ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", "earn_points"),
        ("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", "spend_points"),
        ("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", "about_me"),
        ("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "referral"),
        ("üçé –ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£", "calc_kbju")
    ]
    kb = []
    for i in range(0, len(buttons), 2):
        row = [InlineKeyboardButton(buttons[i][0], callback_data=buttons[i][1])]
        if i + 1 < len(buttons):
            row.append(InlineKeyboardButton(buttons[i+1][0], callback_data=buttons[i+1][1]))
        kb.append(row)
    return InlineKeyboardMarkup(kb)

def get_report_button_text(ctx: ContextTypes.DEFAULT_TYPE, user_id: int):
    gender = ctx.user_data[user_id].get("gender", "male")
    prog = ctx.user_data[user_id].get("program", "home")
    return (("üë©" if gender=="female" else "üë®") + ("üè†" if prog=="home" else "üèãÔ∏è") + " –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç üìπ")

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê /start ---------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if ctx.args:
            try:
                ref = int(ctx.args[0])
                if ref != user_id:
                    user_scores[ref] = user_scores.get(ref, 0) + 100
                    await ctx.bot.send_message(chat_id=ref,
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!")
            except ValueError:
                pass
        ctx.user_data.setdefault(user_id, {"current_day": 1})
        user_scores[user_id] = user_scores.get(user_id, 0)
        user_status[user_id] = user_status.get(user_id, statuses[0])
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_1"),
             InlineKeyboardButton("üí´ –ê–ù–ê–°–¢–ê–°–ò–Ø", callback_data="instructor_2")],
            [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
            [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
            [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")]
        ])
        await ctx.bot.send_message(chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ò–ù–°–¢–†–£–ö–¢–û–†–ê ---------------------
async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()
    if data == "instructor_1":
        ctx.user_data[user_id]["instructor"] = "evgeniy"
        await ctx.bot.send_video(chat_id=query.message.chat_id,
            video="https://t.me/PRIVETSTVIEC/2",
            supports_streaming=True,
            caption="üé• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω",
            reply_markup=main_menu())
    elif data == "instructor_2":
        ctx.user_data[user_id]["instructor"] = "anastasiya"
        await query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø üí´")
        await ctx.bot.send_photo(chat_id=query.message.chat_id,
            photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025-02-08_22-08-36.jpg?raw=true",
            caption="üì∏ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–ù–ê–°–¢–ê–°–ò–Ø",
            reply_markup=main_menu())
    else:
        sel = {"instructor_3": "–¢—Ä–µ–Ω–µ—Ä 3 üèãÔ∏è", "instructor_4": "–¢—Ä–µ–Ω–µ—Ä 4 ü§º", "instructor_5": "–¢—Ä–µ–Ω–µ—Ä 5 ü§∏"}.get(data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä")
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: {sel}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω üöß\n–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ö–£–†–°–ê ---------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def handle_free_course_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "free_course" and ("gender" not in ctx.user_data[user_id] or "program" not in ctx.user_data[user_id]):
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
                                      InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]])
        return await query.message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=kb)
    await start_free_course(query.message, ctx, user_id)

async def handle_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["gender"] = "male" if query.data=="gender_male" else "female"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="program_home"),
                                  InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="program_gym")]])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_program(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["program"] = "home" if query.data=="program_home" else "gym"
    ctx.user_data[user_id]["current_day"] = 1
    await start_free_course(query.message, ctx, user_id)

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –û–¢–ß–ï–¢–ê (–ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–°) ---------------------
async def handle_send_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    day = int(query.data.split("_")[-1])
    if free_reports.get(user_id, {}).get(day):
        return await query.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day}.")
    free_waiting_for_video[user_id] = day
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å üé•")

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û –û–¢–ß–ï–¢–ê (–ë–ï–°–ü–õ–ê–¢–ù–´–ô/–ü–õ–ê–¢–ù–´–ô) ---------------------
async def handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    if user_id in free_waiting_for_video:
        day = free_waiting_for_video[user_id]
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
        free_reports.setdefault(user_id, {})[day] = True
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 60 –±–∞–ª–ª–æ–≤ –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
        instructor = ctx.user_data[user_id].get("instructor")
        if instructor in ["evgeniy", "anastasiya"]:
            ctx.user_data[user_id][f"{instructor}_score"] = ctx.user_data[user_id].get(f"{instructor}_score", 0) + 60
        else:
            user_scores[user_id] += 60
        del free_waiting_for_video[user_id]
        if day < 5:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if instructor in ["evgeniy", "anastasiya"]:
                ctx.user_data[user_id][f"{instructor}_free_day"] = day + 1
            else:
                ctx.user_data[user_id]["current_day"] = day + 1
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({day+1})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {day+1}", callback_data="next_day")]])
            )
        else:
            user_status[user_id] = statuses[1]
            await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu())
    elif user_id in paid_waiting_for_video:
        day = paid_waiting_for_video[user_id]
        await ctx.bot.send_message(chat_id=GROUP_ID, text=f"–ü–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {day}.")
        await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
        paid_reports.setdefault(user_id, {})[day] = True
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 30 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
        user_scores[user_id] = user_scores.get(user_id, 0) + 30
        del paid_waiting_for_video[user_id]
        if day < 5:
            ctx.user_data[user_id]["paid_current_day"] = day + 1
            await update.message.reply_text(
                f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é ({day+1})? ‚û°Ô∏è",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {day+1}", callback_data="paid_next_day")]])
            )
        else:
            await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu())
            ctx.user_data[user_id].pop("paid_current_day", None)
    else:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –º–µ–Ω—é.")

# --------------------- –ü–õ–ê–¢–ù–´–ô –ö–£–†–° ---------------------
async def handle_paid_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    discount = min(ctx.user_data[user_id].get("global_score", 0) * 2, 600)
    price = 2000 - discount
    instructor = ctx.user_data[user_id].get("instructor")
    callback_receipt = "send_receipt" if instructor == "evgeniy" else "send_receipt_anastasiya"
    await query.message.reply_text(
        f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å** üìö\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: 2000 —Ä—É–±. üíµ\n–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±. üîñ\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price} —Ä—É–±. üí≥\n\n"
        f"üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É: 89236950304 (–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫) üè¶\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=callback_receipt)]])
    )
    user_waiting_for_receipt[user_id] = True

async def handle_send_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt[user_id] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ üì∏.")

async def handle_send_receipt_anastasiya(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt[user_id] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ üì∏.")

async def handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    if not user_waiting_for_receipt.get(user_id) and not ctx.user_data.get(user_id, {}).get("paid_current_day"):
        return await update.message.reply_text("–Ø –Ω–µ –∂–¥—É —á–µ–∫ –æ—Ç –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫. üöß")
    if not update.message.photo:
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ üì∏.")
    await ctx.bot.send_message(chat_id=GROUP_ID, text=f"üßæ –ß–µ–∫ –æ—Ç {user_name} (ID: {user_id}). –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.")
    photo_id = update.message.photo[-1].file_id
    await ctx.bot.send_photo(chat_id=GROUP_ID, photo=photo_id,
         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user_id}")]]))
    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚è≥.")

async def confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[-1])
    user_status[user_id] = statuses[2]
    if user_id in user_waiting_for_receipt:
        del user_waiting_for_receipt[user_id]
    await ctx.bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É. üéâ")
    if ctx.user_data[user_id].get("instructor") == "evgeniy":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="paid_gender_male"),
             InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="paid_gender_female")]
        ])
        await ctx.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=kb)
    else:
        ctx.user_data[user_id]["paid_current_day"] = 1
        day1_ex = [
            "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
            "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
            "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
            "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
            "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
        ]
        txt_day1 = ("üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å 1** üìö\n\n" + "\n".join(day1_ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•")
        kb_day1 = InlineKeyboardMarkup([[InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="paid_video_day_1")]])
        await ctx.bot.send_message(chat_id=user_id, text=txt_day1, parse_mode="Markdown", reply_markup=kb_day1)

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ü–û–õ–ê –î–õ–Ø –ü–õ–ê–¢–ù–û–ì–û –ö–£–†–°–ê (–¢–û–õ–¨–ö–û –î–õ–Ø EVGENIY) ---------------------
async def handle_paid_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "paid_gender_male":
        await query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")
    elif query.data == "paid_gender_female":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="paid_program_gym"),
                                     InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="paid_program_home")]])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_paid_program_gym(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["paid_current_day"] = 1
    day1_ex = [
        "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
        "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
        "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
        "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
        "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
    ]
    txt_day1 = ("üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å 1** üìö\n\n" + "\n".join(day1_ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•")
    kb_day1 = InlineKeyboardMarkup([[InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="paid_video_day_1")]])
    await ctx.bot.send_message(chat_id=user_id, text=txt_day1, parse_mode="Markdown", reply_markup=kb_day1)

async def handle_paid_program_home(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")

async def handle_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = int(query.data.split("_")[-1])
    paid_waiting_for_video[user_id] = paid_day
    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} üé•")

async def handle_paid_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = ctx.user_data[user_id].get("paid_current_day", 1)
    if paid_day < 5:
        next_day = paid_day + 1
        ctx.user_data[user_id]["paid_current_day"] = next_day
        paid_program = {
            1: [
                "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
                "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
                "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
                "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
                "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
            ],
            2: [
                "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
                "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
                "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 (–≤–µ—Å –ø–æ–¥–±–∏—Ä–∞–µ—à—å) https://t.me/c/2241417709/175/176",
                "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261",
            ],
            3: [
                "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
                "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
                "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
                "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
                "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/136/137",
            ],
            4: [
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
                "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5 https://t.me/c/2241417709/159/160",
                "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15 https://t.me/c/2241417709/188/189",
                "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5 https://t.me/c/2241417709/169/170",
                "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12 https://t.me/c/2241417709/210/211",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273",
            ],
            5: [
                "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèÜ",
            ],
        }
        ex = paid_program[next_day]
        text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {next_day}** üìö\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"paid_video_day_{next_day}")]])
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
        ctx.user_data[user_id].pop("paid_current_day", None)

# --------------------- –ü–û–î–°–ß–ï–¢ –ö–ë–ñ–£ ---------------------
async def handle_calc_kbju(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_kbju"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è ¬´–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£¬ª —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? üíµ", reply_markup=kb)

async def handle_buy_kbju(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data[user_id].get("instructor")
    if instructor in ["evgeniy", "anastasiya"]:
        score_key = f"{instructor}_score"
        current_score = ctx.user_data[user_id].get(score_key, 0)
        if current_score < 300:
            return await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ¬´–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£¬ª.", reply_markup=main_menu())
        ctx.user_data[user_id][score_key] = current_score - 300
    else:
        current_score = ctx.user_data[user_id].get("global_score", 0)
        if current_score < 300:
            return await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ¬´–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£¬ª.", reply_markup=main_menu())
        ctx.user_data[user_id]["global_score"] = current_score - 300
    ctx.user_data[user_id]["kbju"] = {}
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="kbju_gender_male"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="kbju_gender_female")]
    ])
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£:", reply_markup=kb)

async def handle_kbju_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if query.data == "kbju_gender_male" else "female"
    ctx.user_data[user_id]["kbju"]["gender"] = gender
    ctx.user_data[user_id]["awaiting_kbju_age_height"] = True
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25,175):")

async def handle_kbju_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if ctx.user_data.get(user_id, {}).get("awaiting_kbju_age_height"):
        try:
            parts = update.message.text.split(',')
            age = int(parts[0].strip())
            height = int(parts[1].strip())
            ctx.user_data[user_id]["kbju"]["age"] = age
            ctx.user_data[user_id]["kbju"]["height"] = height
            ctx.user_data[user_id].pop("awaiting_kbju_age_height", None)
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìâ –ú–∞–ª–∞—è", callback_data="kbju_activity_low"),
                 InlineKeyboardButton("üìà –°—Ä–µ–¥–Ω—è—è", callback_data="kbju_activity_medium"),
                 InlineKeyboardButton("üöÄ –í—ã—Å–æ–∫–∞—è", callback_data="kbju_activity_high")]
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Ä–æ—Å—Ç–∞: {e}")
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 25,175")
    elif ctx.user_data.get(user_id, {}).get("awaiting_kbju_weight"):
        try:
            weight = float(update.message.text.strip())
            ctx.user_data[user_id]["kbju"]["weight"] = weight
            ctx.user_data[user_id].pop("awaiting_kbju_weight", None)
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="kbju_goal_maintain"),
                 InlineKeyboardButton("‚¨áÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="kbju_goal_lose"),
                 InlineKeyboardButton("‚¨ÜÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="kbju_goal_gain")]
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–µ—Å–∞: {e}")
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70")
    else:
        pass

async def handle_kbju_activity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    activity = "low" if query.data == "kbju_activity_low" else ("medium" if query.data == "kbju_activity_medium" else "high")
    ctx.user_data[user_id]["kbju"]["activity"] = activity
    ctx.user_data[user_id]["awaiting_kbju_weight"] = True
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):")

async def handle_kbju_goal(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    goal = "maintain" if query.data == "kbju_goal_maintain" else ("lose" if query.data == "kbju_goal_lose" else "gain")
    ctx.user_data[user_id]["kbju"]["goal"] = goal
    kbju_data = ctx.user_data[user_id]["kbju"]
    result = (f"–í–∞—à —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£:\n–ö–∞–ª–æ—Ä–∏–π: 2200 –∫–∫–∞–ª\n–ë–µ–ª–∫–æ–≤: 150 –≥\n–ñ–∏—Ä–æ–≤: 70 –≥\n–£–≥–ª–µ–≤–æ–¥–æ–≤: 250 –≥\n\n"
              f"(–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª: {kbju_data.get('gender')}, –≤–æ–∑—Ä–∞—Å—Ç: {kbju_data.get('age')}, "
              f"—Ä–æ—Å—Ç: {kbju_data.get('height')} —Å–º, –≤–µ—Å: {kbju_data.get('weight')} –∫–≥, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {kbju_data.get('activity')}, —Ü–µ–ª—å: {kbju_data.get('goal')})")
    await query.message.reply_text(result, reply_markup=main_menu())
    ctx.user_data[user_id].pop("kbju", None)

# --------------------- –û–°–¢–ê–õ–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ---------------------
async def handle_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data[user_id].get("instructor")
    score = ctx.user_data[user_id].get(f"{instructor}_score", 0) if instructor in ["evgeniy", "anastasiya"] else ctx.user_data[user_id].get("global_score", 0)
    status = user_status.get(user_id, statuses[0])
    text = f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n\n–°—Ç–∞—Ç—É—Å: {status}\n–ë–∞–ª–ª—ã: {score}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤! üí™"
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ:\n\n–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π –í–∏—Ç–∞–ª—å–µ–≤–∏—á\n–û–±—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–∞–∂ - 20 –ª–µ—Ç\n–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã - 15 –ª–µ—Ç\n"
            "–ú–° - –ø–æ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ\n–ú–° - –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n–°—É–¥—å—è - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n"
            "–ö–ú–° - –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É\n\n20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ! üí•")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025.jpg?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–û–±–æ –º–Ω–µ': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:\n\n1Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "2Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
            "4Ô∏è‚É£ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9699.PNG?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data[user_id].get("instructor")
    score = ctx.user_data[user_id].get(f"{instructor}_score", 0) if instructor in ["evgeniy", "anastasiya"] else ctx.user_data[user_id].get("global_score", 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã:\n\n–£ –≤–∞—Å –µ—Å—Ç—å {score} –±–∞–ª–ª–æ–≤.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9692.PNG?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–ê/–ü–†–û–ì–†–ê–ú–ú–´ –î–õ–Ø –ü–õ–ê–¢–ù–û–ì–û –ö–£–†–°–ê (–¢–û–õ–¨–ö–û –î–õ–Ø EVGENIY) ---------------------
async def handle_paid_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.data == "paid_gender_male":
        await query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")
    elif query.data == "paid_gender_female":
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="paid_program_gym"),
                                     InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="paid_program_home")]])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_paid_program_gym(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    ctx.user_data[user_id]["paid_current_day"] = 1
    day1_ex = [
        "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
        "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
        "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
        "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
        "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
    ]
    txt_day1 = ("üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å 1** üìö\n\n" + "\n".join(day1_ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•")
    kb_day1 = InlineKeyboardMarkup([[InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="paid_video_day_1")]])
    await ctx.bot.send_message(chat_id=user_id, text=txt_day1, parse_mode="Markdown", reply_markup=kb_day1)

async def handle_paid_program_home(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß")

async def handle_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = int(query.data.split("_")[-1])
    paid_waiting_for_video[user_id] = paid_day
    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} üé•")

async def handle_paid_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    paid_day = ctx.user_data[user_id].get("paid_current_day", 1)
    if paid_day < 5:
        next_day = paid_day + 1
        ctx.user_data[user_id]["paid_current_day"] = next_day
        paid_program = {
            1: [
                "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ —Å —É—Ç—è–∂–µ–ª–∏—Ç–µ–ª—è–º–∏ 3—Ö25+5 https://t.me/c/2241417709/337/338",
                "–í—ã–ø–∞–¥—ã 3—Ö30 —à–∞–≥–æ–≤ —Ö 2–∫–≥ https://t.me/c/2241417709/157/158",
                "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/128/129",
                "–°–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3—Ö20 https://t.me/c/2241417709/126/127",
                "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15 https://t.me/c/2241417709/130/131",
            ],
            2: [
                "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö30+10 https://t.me/c/2241417709/284/285",
                "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3—Ö15+5 https://t.me/c/2241417709/167/168",
                "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3—Ö20+5 https://t.me/c/2241417709/183/184",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 3—Ö15+5 (–≤–µ—Å –ø–æ–¥–±–∏—Ä–∞–µ—à—å) https://t.me/c/2241417709/175/176",
                "–ì–∞–Ω—Ç–µ–ª–∏ –≤ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ 3—Ö15+5 https://t.me/c/2241417709/222/223",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Å –≤–µ—Ä–µ–≤–∫–æ–π 3—Ö1+5 https://t.me/c/2241417709/260/261",
            ],
            3: [
                "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/270/271",
                "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5 https://t.me/c/2241417709/134/135",
                "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3—Ö15 https://t.me/c/2241417709/155/156",
                "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5 https://t.me/c/2241417709/381/382",
                "–î–≤–æ–π–Ω—ã–µ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–æ–≥ 3—Ö20+5 https://t.me/c/2241417709/123/125",
                "–ú–µ—Ä—Ç–≤–∞—è —Ç—è–≥–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 3—Ö15+5 https://t.me/c/2241417709/136/137",
            ],
            4: [
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3—Ö20+10 https://t.me/c/2241417709/379/380",
                "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15+5 https://t.me/c/2241417709/159/160",
                "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• —Ä–µ–º–Ω—è—Ö 3—Ö15 https://t.me/c/2241417709/188/189",
                "–†–∞–∑–≤–æ–¥–∫–∞ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 35 3—Ö15+5 https://t.me/c/2241417709/169/170",
                "–¢—è–≥–∞ –±–ª–æ–∫–∞ –∫ –≥—Ä—É–¥–∏ —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º 3—Ö12 https://t.me/c/2241417709/210/211",
                "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è 3—Ö12 https://t.me/c/2241417709/115/117",
                "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ 3—Ö20 https://t.me/c/2241417709/272/273",
            ],
            5: [
                "–í–º–µ—Å—Ç–æ –¥–Ω—è 5 –æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèÜ",
            ],
        }
        ex = paid_program[next_day]
        text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {next_day}** üìö\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"paid_video_day_{next_day}")]])
        await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)
    else:
        await query.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
        ctx.user_data[user_id].pop("paid_current_day", None)

# --------------------- –ü–û–î–°–ß–ï–¢ –ö–ë–ñ–£ ---------------------
async def handle_calc_kbju(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_kbju"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è ¬´–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£¬ª —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? üíµ", reply_markup=kb)

async def handle_buy_kbju(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data[user_id].get("instructor")
    if instructor in ["evgeniy", "anastasiya"]:
        score_key = f"{instructor}_score"
        current_score = ctx.user_data[user_id].get(score_key, 0)
        if current_score < 300:
            return await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ¬´–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£¬ª.", reply_markup=main_menu())
        ctx.user_data[user_id][score_key] = current_score - 300
    else:
        current_score = ctx.user_data[user_id].get("global_score", 0)
        if current_score < 300:
            return await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ¬´–ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£¬ª.", reply_markup=main_menu())
        ctx.user_data[user_id]["global_score"] = current_score - 300
    ctx.user_data[user_id]["kbju"] = {}
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="kbju_gender_male"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="kbju_gender_female")]
    ])
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ö–ë–ñ–£:", reply_markup=kb)

async def handle_kbju_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    gender = "male" if query.data == "kbju_gender_male" else "female"
    ctx.user_data[user_id]["kbju"]["gender"] = gender
    ctx.user_data[user_id]["awaiting_kbju_age_height"] = True
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ä–æ—Å—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25,175):")

async def handle_kbju_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if ctx.user_data.get(user_id, {}).get("awaiting_kbju_age_height"):
        try:
            parts = update.message.text.split(',')
            age = int(parts[0].strip())
            height = int(parts[1].strip())
            ctx.user_data[user_id]["kbju"]["age"] = age
            ctx.user_data[user_id]["kbju"]["height"] = height
            ctx.user_data[user_id].pop("awaiting_kbju_age_height", None)
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìâ –ú–∞–ª–∞—è", callback_data="kbju_activity_low"),
                 InlineKeyboardButton("üìà –°—Ä–µ–¥–Ω—è—è", callback_data="kbju_activity_medium"),
                 InlineKeyboardButton("üöÄ –í—ã—Å–æ–∫–∞—è", callback_data="kbju_activity_high")]
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Ä–æ—Å—Ç–∞: {e}")
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 25,175")
    elif ctx.user_data.get(user_id, {}).get("awaiting_kbju_weight"):
        try:
            weight = float(update.message.text.strip())
            ctx.user_data[user_id]["kbju"]["weight"] = weight
            ctx.user_data[user_id].pop("awaiting_kbju_weight", None)
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", callback_data="kbju_goal_maintain"),
                 InlineKeyboardButton("‚¨áÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="kbju_goal_lose"),
                 InlineKeyboardButton("‚¨ÜÔ∏è –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", callback_data="kbju_goal_gain")]
            ])
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤–µ—Å–∞: {e}")
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70")
    else:
        pass

async def handle_kbju_activity(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    activity = "low" if query.data == "kbju_activity_low" else ("medium" if query.data == "kbju_activity_medium" else "high")
    ctx.user_data[user_id]["kbju"]["activity"] = activity
    ctx.user_data[user_id]["awaiting_kbju_weight"] = True
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):")

async def handle_kbju_goal(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    goal = "maintain" if query.data == "kbju_goal_maintain" else ("lose" if query.data == "kbju_goal_lose" else "gain")
    ctx.user_data[user_id]["kbju"]["goal"] = goal
    kbju_data = ctx.user_data[user_id]["kbju"]
    result = (f"–í–∞—à —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£:\n–ö–∞–ª–æ—Ä–∏–π: 2200 –∫–∫–∞–ª\n–ë–µ–ª–∫–æ–≤: 150 –≥\n–ñ–∏—Ä–æ–≤: 70 –≥\n–£–≥–ª–µ–≤–æ–¥–æ–≤: 250 –≥\n\n"
              f"(–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª: {kbju_data.get('gender')}, –≤–æ–∑—Ä–∞—Å—Ç: {kbju_data.get('age')}, "
              f"—Ä–æ—Å—Ç: {kbju_data.get('height')} —Å–º, –≤–µ—Å: {kbju_data.get('weight')} –∫–≥, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {kbju_data.get('activity')}, —Ü–µ–ª—å: {kbju_data.get('goal')})")
    await query.message.reply_text(result, reply_markup=main_menu())
    ctx.user_data[user_id].pop("kbju", None)

# --------------------- –û–°–¢–ê–õ–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ---------------------
async def handle_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data[user_id].get("instructor")
    score = ctx.user_data[user_id].get(f"{instructor}_score", 0) if instructor in ["evgeniy", "anastasiya"] else ctx.user_data[user_id].get("global_score", 0)
    status = user_status.get(user_id, statuses[0])
    text = f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n\n–°—Ç–∞—Ç—É—Å: {status}\n–ë–∞–ª–ª—ã: {score}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤! üí™"
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9695.PNG?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_about_me(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ:\n\n–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π –í–∏—Ç–∞–ª—å–µ–≤–∏—á\n–û–±—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Å—Ç–∞–∂ - 20 –ª–µ—Ç\n–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã - 15 –ª–µ—Ç\n"
            "–ú–° - –ø–æ —Å—Ç–∞–Ω–æ–≤–æ–π —Ç—è–≥–µ\n–ú–° - –ø–æ –∂–∏–º—É —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞\n–°—É–¥—å—è - —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n"
            "–ö–ú–° - –ø–æ –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥—É\n\n20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ! üí•")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/photo_2025.jpg?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–û–±–æ –º–Ω–µ': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_earn_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:\n\n1Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n"
            "2Ô∏è‚É£ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã.\n3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
            "4Ô∏è‚É£ –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã.")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9699.PNG?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    instructor = ctx.user_data[user_id].get("instructor")
    score = ctx.user_data[user_id].get(f"{instructor}_score", 0) if instructor in ["evgeniy", "anastasiya"] else ctx.user_data[user_id].get("global_score", 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã:\n\n–£ –≤–∞—Å –µ—Å—Ç—å {score} –±–∞–ª–ª–æ–≤.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã –Ω–∞:\n- –°–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ (1 –±–∞–ª–ª = 2 —Ä—É–±–ª—è).\n"
            "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 600 —Ä—É–±–ª–µ–π.\n- –î—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!")
    try:
        await ctx.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo="https://github.com/boss198806/telegram-bot/blob/main/IMG_9692.PNG?raw=true",
                                   caption=text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è '–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã': {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

# --------------------- MAIN ---------------------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))
    app.add_handler(CallbackQueryHandler(handle_free_course_callback, pattern="^(free_course|next_day)$"))
    app.add_handler(CallbackQueryHandler(handle_gender, pattern="^gender_"))
    app.add_handler(CallbackQueryHandler(handle_program, pattern="^program_"))
    app.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"^send_report_day_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_challenges, pattern="^challenge_menu$"))
    app.add_handler(CallbackQueryHandler(buy_challenge, pattern="^buy_challenge$"))
    app.add_handler(CallbackQueryHandler(handle_paid_course, pattern="^paid_course$"))
    app.add_handler(CallbackQueryHandler(handle_send_receipt, pattern="^send_receipt$"))
    app.add_handler(CallbackQueryHandler(handle_send_receipt_anastasiya, pattern="^send_receipt_anastasiya$"))
    app.add_handler(CallbackQueryHandler(confirm_payment, pattern="^confirm_payment_"))
    app.add_handler(CallbackQueryHandler(handle_send_paid_report, pattern=r"^paid_video_day_(\d+)$"))
    app.add_handler(CallbackQueryHandler(handle_paid_next_day, pattern="^paid_next_day$"))
    app.add_handler(CallbackQueryHandler(handle_paid_gender, pattern="^paid_gender_"))
    app.add_handler(CallbackQueryHandler(handle_paid_program_gym, pattern="^paid_program_gym$"))
    app.add_handler(CallbackQueryHandler(handle_paid_program_home, pattern="^paid_program_home$"))
    app.add_handler(CallbackQueryHandler(handle_my_cabinet, pattern="^my_cabinet$"))
    app.add_handler(CallbackQueryHandler(handle_about_me, pattern="^about_me$"))
    app.add_handler(CallbackQueryHandler(handle_earn_points, pattern="^earn_points$"))
    app.add_handler(CallbackQueryHandler(handle_spend_points, pattern="^spend_points$"))
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern="^nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_buy_nutrition_menu, pattern="^buy_nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_referral, pattern="^referral$"))
    app.add_handler(CallbackQueryHandler(handle_challenge_next_day, pattern="^challenge_next$"))
    app.add_handler(CallbackQueryHandler(handle_back, pattern="^back$"))
    app.add_handler(CallbackQueryHandler(handle_calc_kbju, pattern="^calc_kbju$"))
    app.add_handler(CallbackQueryHandler(handle_buy_kbju, pattern="^buy_kbju$"))
    app.add_handler(CallbackQueryHandler(handle_kbju_gender, pattern="^kbju_gender_"))
    app.add_handler(CallbackQueryHandler(handle_kbju_activity, pattern="^kbju_activity_"))
    app.add_handler(CallbackQueryHandler(handle_kbju_goal, pattern="^kbju_goal_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_kbju_text))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.PHOTO, handle_receipt))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()
