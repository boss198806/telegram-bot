import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ------------------------ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–õ–û–í–ê–†–ò –ò –°–¢–ê–¢–£–°–´ ------------------------

user_data = {}  # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id: { ... }}
user_scores = {}  # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤: {user_id: int}
user_reports_sent = {}  # –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏, —á—Ç–æ –æ—Ç—á–µ—Ç –ø–æ –¥–Ω—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
user_waiting_for_video = {}  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –∑–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ
user_waiting_for_receipt = {}  # –∂–¥—ë–º —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ
user_challenges = {}  # —á–µ–ª–ª–µ–Ω–¥–∂–∏
user_status = {}  # —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# ------------------------ –ú–ï–ù–Æ ------------------------

def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å", callback_data="paid_course")],
        [InlineKeyboardButton("üçΩ –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è", callback_data="nutrition_menu")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="my_cabinet")],
        [InlineKeyboardButton("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="earn_points")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã", callback_data="spend_points")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û–±–æ –º–Ω–µ", callback_data="about_me")],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral")],
    ])

# ------------------------ –°–¢–ê–†–¢ / –ò–ù–°–¢–†–£–ö–¢–û–† ------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id
    user_data.setdefault(user_id, {
        "current_day": 1,
        "instructor": None,
        "gender": None,
        "program": None,
        "paid_current_day": 1,
    })
    user_scores.setdefault(user_id, 0)
    user_status.setdefault(user_id, statuses[0])
    user_reports_sent.setdefault(user_id, {})
    user_challenges.setdefault(user_id, {"current_day": 0})

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    if context.args:
        try:
            ref = int(context.args[0])
            if ref != user_id:
                # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                user_scores[ref] = user_scores.get(ref, 0) + 100
                await context.bot.send_message(chat_id=ref, text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –í—ã –ø–æ–ª—É—á–∏–ª–∏ 100 –±–∞–ª–ª–æ–≤!")
        except ValueError:
            pass

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_1"),
         InlineKeyboardButton("üí´ –ê–Ω–∞—Å—Ç–∞—Å–∏—è", callback_data="instructor_2")],
        [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
        [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
        [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")],
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–∏—Ç–Ω–µ—Å‚Äë–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:", reply_markup=kb)

async def handle_instructor_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫–æ–π —Ç—Ä–µ–Ω–µ—Ä) –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "instructor_1":
        user_data[user_id]["instructor"] = "evgeniy"
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω",
            reply_markup=main_menu()
        )
    elif data == "instructor_2":
        user_data[user_id]["instructor"] = "anastasiya"
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: –ê–Ω–∞—Å—Ç–∞—Å–∏—è",
            reply_markup=main_menu()
        )
    else:
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∏
        sel = {
            "instructor_3": "–¢—Ä–µ–Ω–µ—Ä 3",
            "instructor_4": "–¢—Ä–µ–Ω–µ—Ä 4",
            "instructor_5": "–¢—Ä–µ–Ω–µ—Ä 5",
        }.get(data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä")
        await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {sel}. –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=main_menu())

# ------------------------ –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–° ------------------------

def get_free_course_day_text(day: int) -> str:
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞ –¥–µ–Ω—å day. """
    course = {
        1: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/example1)",
            "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/example2)",
            "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/example3)",
        ],
        2: [
            "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/example4)",
            "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/example5)",
            "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/example6)",
        ],
        3: [
            "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/example7)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 [–í–∏–¥–µ–æ](https://t.me/example8)",
            "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 [–í–∏–¥–µ–æ](https://t.me/example9)",
        ],
        4: [
            "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/example10)",
            "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/example11)",
            "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/example12)",
        ],
        5: [
            "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/example13)",
            "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/example14)",
            "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/example15)",
        ],
    }
    arr = course.get(day, [])
    text = f"üî• **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}** üî•\n\n" + "\n".join(arr) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å! üé•"
    return text

async def handle_free_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    profile = user_data[user_id]
    # –ï—Å–ª–∏ –ø–æ–ª/–ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–ø—Ä–æ—Å–∏–º
    if profile["gender"] is None or profile["program"] is None:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞", callback_data="gender_male"),
             InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]
        ])
        await query.message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=kb)
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    day = profile.get("current_day", 1)
    if day < 1 or day > 5:
        profile["current_day"] = 1
        day = 1

    if day > 5:
        await query.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ", reply_markup=main_menu())
        return

    text = get_free_course_day_text(day)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"send_report_day_{day}")]
    ])
    await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)

async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "gender_male":
        user_data[user_id]["gender"] = "male"
    else:
        user_data[user_id]["gender"] = "female"

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="program_home"),
         InlineKeyboardButton("üèãÔ∏è –í –∑–∞–ª–µ", callback_data="program_gym")]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

async def handle_program(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if query.data == "program_home":
        user_data[user_id]["program"] = "home"
    else:
        user_data[user_id]["program"] = "gym"
    user_data[user_id]["current_day"] = 1
    await handle_free_course(update, context)

async def handle_send_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–µ–Ω—å –∏–∑ callback_data
    try:
        parts = query.data.split("_")
        day = int(parts[-1])
    except ValueError:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ
    if user_reports_sent.get(user_id, {}).get(day):
        await query.message.reply_text(f"–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day}.")
        return

    # –ñ–¥—ë–º –≤–∏–¥–µ–æ
    user_waiting_for_video[user_id] = day
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç üé•")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_waiting_for_video:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –º–µ–Ω—é.")
        return

    day = user_waiting_for_video[user_id]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É
    try:
        await context.bot.send_message(chat_id=GROUP_ID, text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {update.message.from_user.first_name} (ID: {user_id}) –∑–∞ –¥–µ–Ω—å {day}.")
        await context.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É.")
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
    user_scores[user_id] = user_scores.get(user_id, 0) + 60
    user_reports_sent.setdefault(user_id, {})[day] = True
    del user_waiting_for_video[user_id]

    if day < 5:
        user_data[user_id]["current_day"] = day + 1
        await update.message.reply_text(
            f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}\n–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {day+1}", callback_data="free_course")]
            ])
        )
    else:
        user_status[user_id] = statuses[1]
        await update.message.reply_text(
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å! üéâ\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}",
            reply_markup=main_menu()
        )

# ------------------------ –ü–õ–ê–¢–ù–´–ô –ö–£–†–° ------------------------

async def handle_paid_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    score = user_scores.get(user_id, 0)
    discount = min(score * 2, 600)
    price = 2000 - discount
    text = (f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å** üìö\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: 2000 —Ä—É–±.\n"
            f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±.\n"
            f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price} —Ä—É–±.\n\n"
            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É 89236950304 (–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫). –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.")
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="send_receipt")]
    ])
    user_waiting_for_receipt[user_id] = True
    await query.message.reply_text(text, parse_mode="Markdown", reply_markup=kb)

async def handle_send_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    user_waiting_for_receipt[user_id] = True
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ.")

async def handle_receipt_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id not in user_waiting_for_receipt or not user_waiting_for_receipt[user_id]:
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É —á–µ–∫ –æ—Ç –≤–∞—Å.")
        return

    photo = update.message.photo[-1]
    try:
        await context.bot.send_message(chat_id=GROUP_ID, text=f"–ß–µ–∫ –æ—Ç {update.message.from_user.first_name} (ID: {user_id}).")
        await context.bot.send_photo(chat_id=GROUP_ID, photo=photo.file_id, caption="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
                                     reply_markup=InlineKeyboardMarkup([
                                         [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_payment_{user_id}")]
                                     ]))
        await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞.")
        return

async def handle_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    # confirm_payment_userid
    user_id_str = data.replace("confirm_payment_", "")
    try:
        user_id = int(user_id_str)
    except ValueError:
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    user_status[user_id] = statuses[2]
    user_waiting_for_receipt[user_id] = False
    await context.bot.send_message(chat_id=user_id, text="–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É.")

    # –î–æ–ø—É—Å—Ç–∏–º, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    user_data[user_id]["paid_current_day"] = 1
    await send_paid_day(user_id, context)

async def send_paid_day(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    day = user_data[user_id].get("paid_current_day", 1)
    paid_program = {
        1: [
            "–ú–∞—Ö–∏ –Ω–∞–∑–∞–¥ 3x25+5",
            "–í—ã–ø–∞–¥—ã 3x30 —à–∞–≥–æ–≤",
            "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–≥ 3x20"
        ],
        2: [
            "–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3x30+10",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15+5",
            "–õ–æ–¥–æ—á–∫–∞ —Å –ª–æ–∫—Ç—è–º–∏ 3x20+5"
        ],
        3: [
            "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ 3—Ö15+5",
            "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ 3—Ö15+5",
            "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3—Ö20+5"
        ],
        4: [
            "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3x20+10",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è –≤ –¢–†–• 3x15+5",
            "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤ –¢–†–• 3—Ö15"
        ],
        5: [
            "–§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å üèÜ"
        ],
    }
    ex = paid_program.get(day, [])
    text = f"üìö **–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å: –î–µ–Ω—å {day}**\n\n" + "\n".join(ex) + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç!"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"paid_video_day_{day}")]
    ])
    await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown", reply_markup=kb)

async def handle_paid_send_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    # paid_video_day_X
    day_str = data.replace("paid_video_day_", "")
    try:
        day = int(day_str)
    except ValueError:
        await query.answer("–û—à–∏–±–∫–∞.")
        return

    user_waiting_for_video[user_id] = ("paid", day)
    await query.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {day}.")

async def handle_video_paid(update: Update, context: ContextTypes.DEFAULT_TYPE, paid_day: int):
    user_id = update.message.from_user.id
    # –û—Ç–ø—Ä–∞–≤–∏–º –≤ –≥—Ä—É–ø–ø—É
    try:
        await context.bot.send_message(chat_id=GROUP_ID, text=f"–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç {update.message.from_user.first_name} (ID: {user_id}), –¥–µ–Ω—å {paid_day}.")
        await context.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")
        return

    # –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
    user_scores[user_id] += 30
    del user_waiting_for_video[user_id]

    if paid_day < 5:
        user_data[user_id]["paid_current_day"] = paid_day + 1
        await update.message.reply_text(
            f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} –ø—Ä–∏–Ω—è—Ç!\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚û°Ô∏è –î–µ–Ω—å {paid_day+1}", callback_data="paid_next_day")]
            ])
        )
    else:
        await update.message.reply_text(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å!\n–í–∞—à–∏ –±–∞–ª–ª—ã: {user_scores[user_id]}", reply_markup=main_menu())
        user_data[user_id]["paid_current_day"] = 1
        user_status[user_id] = statuses[3]

async def handle_paid_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    current_day = user_data[user_id].get("paid_current_day", 1)
    if current_day <= 5:
        await send_paid_day(user_id, context)
    else:
        await query.message.reply_text("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å!", reply_markup=main_menu())

# ------------------------ –ß–ï–õ–õ–ï–ù–î–ñ–ò ------------------------

def get_challenge_text(day: int) -> str:
    data = {
        1: [
            "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 40 —Ä–∞–∑",
            "–õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ –≤ –ª–æ–∫—Ç—è—Ö 50 —Ä–∞–∑",
            "–í–µ–ª–æ—Å–∏–ø–µ–¥ 30 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É"
        ],
        2: [
            "–ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 30 —Ä–∞–∑",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 25 —Ä–∞–∑",
            "–ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 30 —Ä–∞–∑"
        ],
        3: [
            "–ü–ª–∞–Ω–∫–∞ 3 –º–∏–Ω",
            "–ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15"
        ],
        4: [
            "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 60 —Ä–∞–∑",
            "–õ–æ–¥–æ—á–∫–∞ + —Å–≥–∏–±–∞–Ω–∏–µ 50 —Ä–∞–∑",
            "–í–µ–ª–æ—Å–∏–ø–µ–¥ 50 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É"
        ],
        5: [
            "–ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π 50 —Ä–∞–∑",
            "–û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫ 40 —Ä–∞–∑",
            "–ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 50 —Ä–∞–∑"
        ],
    }
    arr = data.get(day, [])
    return f"üí™ **–ß–µ–ª–ª–µ–Ω–¥–∂: –î–µ–Ω—å {day}**\n\n" + "\n".join(arr)

async def handle_challenges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_challenges[user_id].get("current_day", 0) > 0:
        # —É–∂–µ –∫—É–ø–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂
        await send_challenge_day(query.message, user_id)
    else:
        if user_scores.get(user_id, 0) >= 300:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_challenge"),
                 InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
            ])
            await query.message.reply_text("–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –∑–∞ 300 –±–∞–ª–ª–æ–≤?", reply_markup=kb)
        else:
            await query.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù—É–∂–Ω–æ 300, —É –≤–∞—Å {user_scores.get(user_id, 0)}",
                reply_markup=main_menu()
            )

async def buy_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_scores.get(user_id, 0) >= 300:
        user_scores[user_id] -= 300
        user_challenges[user_id]["current_day"] = 1
        await query.message.reply_text("–î–æ—Å—Ç—É–ø –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º –ø–æ–ª—É—á–µ–Ω!", reply_markup=main_menu())
        await send_challenge_day(query.message, user_id)
    else:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!", reply_markup=main_menu())

async def send_challenge_day(msg, user_id: int):
    day = user_challenges[user_id].get("current_day", 1)
    if day < 1 or day > 5:
        user_challenges[user_id]["current_day"] = 1
        day = 1
    text = get_challenge_text(day)
    if day < 5:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="challenge_next")]
        ])
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
        ])
    await msg.reply_text(text, parse_mode="Markdown", reply_markup=kb)

async def handle_challenge_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    current_day = user_challenges[user_id].get("current_day", 1)
    if current_day < 5:
        user_challenges[user_id]["current_day"] = current_day + 1
        await send_challenge_day(query.message, user_id)
    else:
        await query.message.reply_text("–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏!", reply_markup=main_menu())

# ------------------------ –ú–ï–ù–Æ –ü–ò–¢–ê–ù–ò–Ø, –†–ï–§–ï–†–ê–õ–´ –ò –î–†–£–ì–û–ï ------------------------

async def handle_nutrition_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üç¥ –ö—É–ø–∏—Ç—å –º–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –∑–∞ 300 –±–∞–ª–ª–æ–≤", callback_data="buy_nutrition_menu"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await query.message.reply_text("–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", reply_markup=kb)

async def handle_buy_nutrition_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if user_scores[user_id] >= 300:
        user_scores[user_id] -= 300
        await query.message.reply_text("–ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è –∫—É–ø–ª–µ–Ω–æ! –í–æ—Ç —Å—Å—ã–ª–∫–∞: https://t.me/...", reply_markup=main_menu())
    else:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤!", reply_markup=main_menu())

async def handle_referral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    me = await context.bot.get_me()
    link = f"https://t.me/{me.username}?start={query.from_user.id}"
    await query.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")

async def handle_my_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    sc = user_scores.get(user_id, 0)
    st = user_status.get(user_id, statuses[0])
    text = f"üë§ –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:\n–°—Ç–∞—Ç—É—Å: {st}\n–ë–∞–ª–ª—ã: {sc}"
    await query.message.reply_text(text, reply_markup=main_menu())

async def handle_about_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üë§ –û —Ç—Ä–µ–Ω–µ—Ä–µ:\n\n"
            "–ö—É—Ä–æ—á–∫–∏–Ω –ï–≤–≥–µ–Ω–∏–π...\n"
            "20 –ª–µ—Ç –≤ —Ñ–∏—Ç–Ω–µ—Å–µ!")
    await query.message.reply_text(text, reply_markup=main_menu())

async def handle_earn_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = ("üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:\n\n"
            "1) –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å\n"
            "2) –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n"
            "3) –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
            "4) –ü–æ–∫—É–ø–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å")
    await query.message.reply_text(text, reply_markup=main_menu())

async def handle_spend_points(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    sc = user_scores.get(user_id, 0)
    text = (f"üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã:\n\n"
            f"–£ –≤–∞—Å {sc} –±–∞–ª–ª–æ–≤.\n"
            "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (1 –±–∞–ª–ª = 2 —Ä—É–±, –º–∞–∫—Å —Å–∫–∏–¥–∫–∞ 600 —Ä—É–±)\n")
    await query.message.reply_text(text, reply_markup=main_menu())

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

# ------------------------ –§–£–ù–ö–¶–ò–Ø MAIN ------------------------

def main():
    app = Application.builder().token(TOKEN).build()

    # /start
    app.add_handler(CommandHandler("start", start))

    # –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    app.add_handler(CallbackQueryHandler(handle_instructor_selection, pattern="^instructor_"))

    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    app.add_handler(CallbackQueryHandler(handle_free_course, pattern="^free_course$"))
    app.add_handler(CallbackQueryHandler(handle_gender, pattern="^gender_"))
    app.add_handler(CallbackQueryHandler(handle_program, pattern="^program_"))
    app.add_handler(CallbackQueryHandler(handle_send_report, pattern=r"^send_report_day_\d+$"))

    # –í–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    app.add_handler(MessageHandler(filters.VIDEO & (~filters.COMMAND), handle_video))

    # –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    app.add_handler(CallbackQueryHandler(handle_paid_course, pattern="^paid_course$"))
    app.add_handler(CallbackQueryHandler(handle_send_receipt, pattern="^send_receipt$"))
    app.add_handler(CallbackQueryHandler(handle_confirm_payment, pattern="^confirm_payment_"))
    app.add_handler(MessageHandler(filters.PHOTO & (~filters.COMMAND), handle_receipt_photo))
    app.add_handler(CallbackQueryHandler(handle_paid_send_report, pattern="^paid_video_day_\d+$"))
    app.add_handler(CallbackQueryHandler(handle_paid_next_day, pattern="^paid_next_day$"))

    # –ß–µ–ª–ª–µ–Ω–¥–∂–∏
    app.add_handler(CallbackQueryHandler(handle_challenges, pattern="^challenge_menu$"))
    app.add_handler(CallbackQueryHandler(buy_challenge, pattern="^buy_challenge$"))
    app.add_handler(CallbackQueryHandler(handle_challenge_next_day, pattern="^challenge_next$"))

    # –ü—Ä–æ—á–µ–µ
    app.add_handler(CallbackQueryHandler(handle_nutrition_menu, pattern="^nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_buy_nutrition_menu, pattern="^buy_nutrition_menu$"))
    app.add_handler(CallbackQueryHandler(handle_referral, pattern="^referral$"))
    app.add_handler(CallbackQueryHandler(handle_my_cabinet, pattern="^my_cabinet$"))
    app.add_handler(CallbackQueryHandler(handle_about_me, pattern="^about_me$"))
    app.add_handler(CallbackQueryHandler(handle_earn_points, pattern="^earn_points$"))
    app.add_handler(CallbackQueryHandler(handle_spend_points, pattern="^spend_points$"))
    app.add_handler(CallbackQueryHandler(handle_back, pattern="^back$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()
