import logging
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ï–≤–≥–µ–Ω–∏—è
evgeniy_user_scores = {}
evgeniy_user_status = {}
evgeniy_user_reports_sent = {}
evgeniy_user_waiting_for_video = {}
evgeniy_user_challenges = {}
evgeniy_user_waiting_for_receipt = {}

# –°—Ç–∞—Ç—É—Å—ã
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GROUP_ID = os.getenv("GROUP_ID")  # –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ load_dotenv()

######################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
######################
def get_score(user_id: int) -> int:
    return evgeniy_user_scores.get(user_id, 0)

def add_score(user_id: int, amount: int) -> None:
    evgeniy_user_scores[user_id] = evgeniy_user_scores.get(user_id, 0) + amount

def get_status(user_id: int) -> str:
    return evgeniy_user_status.get(user_id, statuses[0])

def set_status(user_id: int, new_status: str) -> None:
    evgeniy_user_status[user_id] = new_status

def evgeniy_main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üî• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–í–ì–ï–ù–ò–ô)", callback_data="evgeniy_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ï–í–ì–ï–ù–ò–ô)", callback_data="evgeniy_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ï–í–ì–ï–ù–ò–ô)", callback_data="evgeniy_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ï–í–ì–ï–ù–ò–ô)", callback_data="evgeniy_my_cabinet")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ï–í–ì–ï–ù–ò–ô)", callback_data="evgeniy_spend_points")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ï–í–ì–ï–ù–ò–ô)", callback_data="evgeniy_kbju")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="choose_instructor_back")]
    ]
    return InlineKeyboardMarkup(keyboard)

######################
# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
######################
course = {
    1: [
        "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å –º–∞—Ö–æ–º 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/363/364)",
        "2Ô∏è‚É£ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/381/382)",
        "3Ô∏è‚É£ –í–µ–ª–æ—Å–∏–ø–µ–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/278/279)"
    ],
    2: [
        "1Ô∏è‚É£ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/167/168)",
        "2Ô∏è‚É£ –õ–æ–¥–æ—á–∫–∞ –ø—Ä—è–º—ã–µ —Ä—É–∫–∏ 3x30 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/395/396)",
        "3Ô∏è‚É£ –ü–æ–ª–Ω—ã–µ –ø–æ–¥—ä—ë–º—ã –∫–æ—Ä–ø—É—Å–∞ 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/274/275)"
    ],
    3: [
        "1Ô∏è‚É£ –í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/155/156)",
        "2Ô∏è‚É£ –ú–∞—Ö–∏ –≤ –±–æ–∫ —Å –∫–æ–ª–µ–Ω 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/385/386)",
        "3Ô∏è‚É£ –ö–æ—Å—ã–µ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø—è—Ç–æ–∫ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/282/283)"
    ],
    4: [
        "1Ô∏è‚É£ –ü–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø–æ–¥—ä–µ–º—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ 4x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/226/227)",
        "2Ô∏è‚É£ –£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/256/257)",
        "3Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ 3x1 –º–∏–Ω [–í–∏–¥–µ–æ](https://t.me/c/2241417709/286/296)"
    ],
    5: [
        "1Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π (–±–µ–∑ —à—Ç–∞–Ω–≥–∏) 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/140/141)",
        "2Ô∏è‚É£ –ú–∞—Ö–∏ –ø–æ–¥ 45 —Å —Ä–µ–∑–∏–Ω–∫–æ–π 3x20 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/339/340)",
        "3Ô∏è‚É£ –ü–æ–¥—ä—ë–º—ã –Ω–æ–≥ –ª—ë–∂–∞ 3x15 [–í–∏–¥–µ–æ](https://t.me/c/2241417709/367/368)"
    ]
}

async def evgeniy_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
    if "evgeniy_free_day" not in ctx.user_data[user_id]:
        ctx.user_data[user_id]["evgeniy_free_day"] = 1
    day = ctx.user_data[user_id]["evgeniy_free_day"]
    if day > 5:
        await query.message.reply_text(
            "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏—è!",
            reply_markup=evgeniy_main_menu()
        )
        return

    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∞
    text = f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏—è, –¥–µ–Ω—å {day}:\n\n" + "\n".join(course[day])
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–î–µ–Ω—å {day})", callback_data=f"evgeniy_send_report_{day}")]
    ])
    await query.message.reply_text(text, reply_markup=kb)

######################
# –í–∏–¥–µ–æ –æ—Ç—á–µ—Ç—ã –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
######################
async def evgeniy_send_report_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data  # evgeniy_send_report_1
    day = int(data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ
    if evgeniy_user_reports_sent.get(user_id, {}).get(day):
        await query.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å!")
        return

    evgeniy_user_waiting_for_video[user_id] = day
    await query.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ï–≤–≥–µ–Ω–∏–π).")

async def evgeniy_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –õ–æ–≤–∏–º –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –±–æ—Ç –∂–¥–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
    """
    user_id = update.message.from_user.id
    if user_id in evgeniy_user_waiting_for_video:
        data = evgeniy_user_waiting_for_video[user_id]
        if isinstance(data, int):
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
            day = data
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            user_name = update.message.from_user.first_name
            if GROUP_ID:
                await ctx.bot.send_message(chat_id=GROUP_ID,
                    text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}), –¥–µ–Ω—å {day} (–ï–≤–≥–µ–Ω–∏–π)."
                )
                await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            evgeniy_user_reports_sent.setdefault(user_id, {})[day] = True
            add_score(user_id, 60)  # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –æ—Ç—á–µ—Ç
            del evgeniy_user_waiting_for_video[user_id]

            # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if "evgeniy_free_day" not in ctx.user_data[user_id]:
                ctx.user_data[user_id]["evgeniy_free_day"] = day
            ctx.user_data[user_id]["evgeniy_free_day"] += 1
            if ctx.user_data[user_id]["evgeniy_free_day"] <= 5:
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! –í–∞—à–∏ –±–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å)", callback_data="evgeniy_free_course")]
                    ])
                )
            else:
                set_status(user_id, statuses[1])  # ¬´–ë—ã–≤–∞–ª—ã–π¬ª
                await update.message.reply_text(
                    f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ï–≤–≥–µ–Ω–∏—è!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=evgeniy_main_menu()
                )
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏—è (–ï–≤–≥–µ–Ω–∏–π).")
    else:
        # –í–∏–¥–µ–æ –ø—Ä–∏—à–ª–æ, –Ω–æ –º—ã –Ω–µ –∂–¥–µ–º
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç –≤–∞—Å (–ï–≤–≥–µ–Ω–∏–π).")

######################
# –ù–∞–∑–∞–¥
######################
async def evgeniy_back_to_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ú–µ–Ω—é –ï–≤–≥–µ–Ω–∏—è", reply_markup=evgeniy_main_menu())
