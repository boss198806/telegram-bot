import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Message
from telegram.ext import ContextTypes, CallbackContext

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
anastasia_user_scores = {}
anastasia_user_status = {}
anastasia_user_reports_sent = {}
anastasia_user_waiting_for_video = {}
anastasia_user_challenges = {}
anastasia_user_waiting_for_receipt = {}

# –°—Ç–∞—Ç—É—Å—ã
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –ü—Ä–∏–º–µ—Ä group_id - –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ bot.py –∏–ª–∏ –∏–∑ .env
# –ù–æ –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
GROUP_ID = os.getenv("GROUP_ID")  # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ os.getenv("GROUP_ID")

###########################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
###########################
def get_instructor(user_id: int, ctx: ContextTypes.DEFAULT_TYPE) -> str:
    """–ö–∞–∫–æ–π —Ç—Ä–µ–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω?"""
    return ctx.user_data.get(user_id, {}).get("instructor", "anastasia")

def get_score(user_id: int) -> int:
    return anastasia_user_scores.get(user_id, 0)

def add_score(user_id: int, amount: int) -> None:
    anastasia_user_scores[user_id] = anastasia_user_scores.get(user_id, 0) + amount

def get_status(user_id: int) -> str:
    return anastasia_user_status.get(user_id, statuses[0])

def set_status(user_id: int, new_status: str) -> None:
    anastasia_user_status[user_id] = new_status

def anastasia_main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_my_cabinet")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_spend_points")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_kbju")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="choose_instructor_back")]
    ]
    return InlineKeyboardMarkup(keyboard)

###########################
#       –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–°
###########################
async def anastasia_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω—è, –µ—Å–ª–∏ –Ω–µ—Ç - —Å—Ç–∞–≤–∏–º 1
    if "anastasia_free_day" not in ctx.user_data[user_id]:
        ctx.user_data[user_id]["anastasia_free_day"] = 1
    day = ctx.user_data[user_id]["anastasia_free_day"]
    if day > 5:
        await query.message.reply_text(
            "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏!",
            reply_markup=anastasia_main_menu()
        )
        return

    # –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercises = {
        1: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 1)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 1)"],
        2: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 2)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 2)"],
        3: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 3)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 3)"],
        4: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 4)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 4)"],
        5: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 5)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 5)"],
    }
    text = f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏, –¥–µ–Ω—å {day}:\n\n" + "\n".join(exercises[day])
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–î–µ–Ω—å {day})", callback_data=f"anastasia_send_report_{day}")]
    ])
    await query.message.reply_text(text, reply_markup=kb)

async def anastasia_send_report_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data  # anastasia_send_report_3
    day = int(data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ —É–∂–µ
    if anastasia_user_reports_sent.get(user_id, {}).get(day):
        await query.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å!")
        return

    anastasia_user_waiting_for_video[user_id] = day
    await query.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")

async def anastasia_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –õ–æ–≤–∏–º –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –±–æ—Ç –∂–¥–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å / –ø–ª–∞—Ç–Ω—ã–π), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
    """
    user_id = update.message.from_user.id
    if user_id in anastasia_user_waiting_for_video:
        data = anastasia_user_waiting_for_video[user_id]
        if isinstance(data, int):
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
            day = data
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            user_name = update.message.from_user.first_name
            if GROUP_ID:
                await ctx.bot.send_message(chat_id=GROUP_ID,
                    text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}), –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)."
                )
                await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            anastasia_user_reports_sent.setdefault(user_id, {})[day] = True
            add_score(user_id, 60)
            del anastasia_user_waiting_for_video[user_id]

            # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if "anastasia_free_day" not in ctx.user_data[user_id]:
                ctx.user_data[user_id]["anastasia_free_day"] = day
            ctx.user_data[user_id]["anastasia_free_day"] += 1
            if ctx.user_data[user_id]["anastasia_free_day"] <= 5:
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! –í–∞—à–∏ –±–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="anastasia_free_course")]
                    ])
                )
            else:
                set_status(user_id, statuses[1])  # ¬´–ë—ã–≤–∞–ª—ã–π¬ª
                await update.message.reply_text(
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=anastasia_main_menu()
                )
        elif isinstance(data, tuple) and data[0] == "paid":
            # –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
            paid_day = data[1]
            user_name = update.message.from_user.first_name
            if GROUP_ID:
                await ctx.bot.send_message(chat_id=GROUP_ID,
                    text=f"[–ü–ª–∞—Ç–Ω—ã–π] –í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}), –¥–µ–Ω—å {paid_day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)."
                )
                await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

            # –ù–∞—á–∏—Å–ª—è–µ–º, —É–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            add_score(user_id, 30)
            del anastasia_user_waiting_for_video[user_id]

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥. –¥–Ω—é
            if ctx.user_data[user_id].get("anastasia_paid_day", 1) < 5:
                ctx.user_data[user_id]["anastasia_paid_day"] += 1
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} –ø—Ä–∏–Ω—è—Ç!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞", callback_data="anastasia_paid_next_day")]
                    ])
                )
            else:
                set_status(user_id, statuses[3])  # ¬´–ü—Ä–æ—Ñ–∏¬ª
                await update.message.reply_text(
                    f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=anastasia_main_menu()
                )
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏—è (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")
    else:
        # –í–∏–¥–µ–æ –ø—Ä–∏—à–ª–æ, –Ω–æ –º—ã –Ω–µ –∂–¥–µ–º
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç –≤–∞—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")

###########################
#        –ß–ï–õ–õ–ï–ù–î–ñ
###########################
async def anastasia_challenge_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in anastasia_user_challenges:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–ª–ª–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if get_score(user_id) >= 300:
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö—É–ø–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ (300 –±–∞–ª–ª–æ–≤)", callback_data="anastasia_buy_challenge")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="anastasia_back_to_menu")]
            ])
            await query.message.reply_text("–ß–µ–ª–ª–µ–Ω–¥–∂ —É –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ —Å—Ç–æ–∏—Ç 300 –±–∞–ª–ª–æ–≤.", reply_markup=kb)
        else:
            await query.message.reply_text(
                f"–£ –≤–∞—Å –≤—Å–µ–≥–æ {get_score(user_id)} –±–∞–ª–ª–æ–≤, –∞ –Ω—É–∂–Ω–æ 300.",
                reply_markup=anastasia_main_menu()
            )
    else:
        # –£–∂–µ –∫—É–ø–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        await send_challenge_day(query.message, user_id, ctx)

async def anastasia_buy_challenge(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if get_score(user_id) >= 300:
        add_score(user_id, -300)
        anastasia_user_challenges[user_id] = {"current_day": 1}
        await query.message.reply_text("–ß–µ–ª–ª–µ–Ω–¥–∂ –∫—É–ø–ª–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–Ω—å 1", reply_markup=anastasia_main_menu())
        await send_challenge_day(query.message, user_id, ctx)
    else:
        await query.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤.")

async def send_challenge_day(msg: Message, user_id: int, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    day = anastasia_user_challenges[user_id]["current_day"]
    tasks = {
        1: ["–ó–∞–¥–∞–Ω–∏–µ 1 (—á–µ–ª–ª. –¥–µ–Ω—å 1)", "–ó–∞–¥–∞–Ω–∏–µ 2 (—á–µ–ª–ª. –¥–µ–Ω—å 1)"],
        2: ["–ó–∞–¥–∞–Ω–∏–µ 1 (—á–µ–ª–ª. –¥–µ–Ω—å 2)", "–ó–∞–¥–∞–Ω–∏–µ 2 (—á–µ–ª–ª. –¥–µ–Ω—å 2)"],
        3: ["–ó–∞–¥–∞–Ω–∏–µ 1 (—á–µ–ª–ª. –¥–µ–Ω—å 3)", "–ó–∞–¥–∞–Ω–∏–µ 2 (—á–µ–ª–ª. –¥–µ–Ω—å 3)"],
        4: ["–ó–∞–¥–∞–Ω–∏–µ 1 (—á–µ–ª–ª. –¥–µ–Ω—å 4)", "–ó–∞–¥–∞–Ω–∏–µ 2 (—á–µ–ª–ª. –¥–µ–Ω—å 4)"],
        5: ["–ó–∞–¥–∞–Ω–∏–µ 1 (—á–µ–ª–ª. –¥–µ–Ω—å 5)", "–ó–∞–¥–∞–Ω–∏–µ 2 (—á–µ–ª–ª. –¥–µ–Ω—å 5)"],
    }
    ex = tasks.get(day, ["–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π"])
    text = f"–ß–µ–ª–ª–µ–Ω–¥–∂ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏, –¥–µ–Ω—å {day}:\n" + "\n".join(ex)
    if day < 5:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å (—á–µ–ª–ª–µ–Ω–¥–∂)", callback_data="anastasia_challenge_next")]
        ])
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ú–µ–Ω—é –ê–Ω–∞—Å—Ç–∞—Å–∏–∏", callback_data="anastasia_back_to_menu")]
        ])
    await msg.reply_text(text, reply_markup=kb)

async def anastasia_challenge_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in anastasia_user_challenges:
        await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂.")
        return

    current_day = anastasia_user_challenges[user_id]["current_day"]
    if current_day < 5:
        anastasia_user_challenges[user_id]["current_day"] += 1
        await send_challenge_day(query.message, user_id, ctx)
    else:
        await query.message.reply_text("–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–µ–ª–ª–µ–Ω–¥–∂!", reply_markup=anastasia_main_menu())
        del anastasia_user_challenges[user_id]

###########################
#       –ü–õ–ê–¢–ù–´–ô –ö–£–†–°
###########################
async def anastasia_paid_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    user_points = get_score(user_id)
    discount = min(user_points * 2, 600)
    price = 2000 - discount

    text = (
        f"–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏\n\n"
        f"–¶–µ–Ω–∞: 2000 —Ä—É–±\n"
        f"–í–∞—à–∞ —Å–∫–∏–¥–∫–∞: {discount} —Ä—É–±\n"
        f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±\n\n"
        "–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É 9999 9999 9999 9999 –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)", callback_data="anastasia_send_receipt")]
    ])
    anastasia_user_waiting_for_receipt[user_id] = True
    await query.message.reply_text(text, reply_markup=kb)

async def anastasia_send_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    anastasia_user_waiting_for_receipt[user_id] = True
    await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")

async def anastasia_handle_receipt(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –º—ã –Ω–µ –∂–¥–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ–∫, –≤—ã—Ö–æ–¥–∏–º
    if not anastasia_user_waiting_for_receipt.get(user_id):
        return

    if not update.message.photo:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ.")
        return

    user_name = update.message.from_user.first_name
    if GROUP_ID:
        await ctx.bot.send_message(GROUP_ID, f"–ß–µ–∫ –æ—Ç {user_name} (ID: {user_id}) - [–ê–Ω–∞—Å—Ç–∞—Å–∏—è]")
        photo_id = update.message.photo[-1].file_id
        await ctx.bot.send_photo(GROUP_ID, photo=photo_id,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)",
                                      callback_data=f"anastasia_confirm_payment_{user_id}")]
            ])
        )
    await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")

async def anastasia_confirm_payment(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data  # anastasia_confirm_payment_123456
    user_id = int(data.split("_")[-1])

    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
    if user_id in anastasia_user_waiting_for_receipt:
        del anastasia_user_waiting_for_receipt[user_id]

    set_status(user_id, statuses[2])  # ¬´–ß–µ–º–ø–∏–æ–Ω¬ª
    await ctx.bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è). –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫—É—Ä—Å—É.")
    ctx.user_data[user_id]["anastasia_paid_day"] = 1
    await send_paid_day(user_id, 1, ctx)

async def send_paid_day(user_id: int, day: int, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    paid_program = {
        1: ["–ó–∞–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–Ω—è 1", "–ï—â–µ —á—Ç–æ-—Ç–æ"],
        2: ["–ó–∞–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–Ω—è 2"],
        3: ["–ó–∞–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–Ω—è 3"],
        4: ["–ó–∞–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–Ω—è 4"],
        5: ["–ó–∞–¥–∞–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ –¥–Ω—è 5"],
    }
    text = f"–ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏: –¥–µ–Ω—å {day}\n" + "\n".join(paid_program.get(day, []))
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–¥–µ–Ω—å {day})",
                              callback_data=f"anastasia_paid_send_report_{day}")]
    ])
    await ctx.bot.send_message(user_id, text, reply_markup=kb)

async def anastasia_send_paid_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data  # anastasia_paid_send_report_2
    paid_day = int(data.split("_")[-1])
    anastasia_user_waiting_for_video[user_id] = ("paid", paid_day)
    await query.message.reply_text(f"–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")

async def anastasia_paid_next_day(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    day = ctx.user_data[user_id].get("anastasia_paid_day", 1)
    if day < 5:
        ctx.user_data[user_id]["anastasia_paid_day"] = day + 1
        await send_paid_day(user_id, day + 1, ctx)
    else:
        await query.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å!",
            reply_markup=anastasia_main_menu()
        )

###########################
#      –ú–û–ô –ö–ê–ë–ò–ù–ï–¢
###########################
async def anastasia_my_cabinet(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    score = get_score(user_id)
    status = get_status(user_id)
    text = f"–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)\n–°—Ç–∞—Ç—É—Å: {status}\n–ë–∞–ª–ª—ã: {score}"
    await query.message.reply_text(text, reply_markup=anastasia_main_menu())

###########################
#  –ö–ê–ö –ü–û–¢–†–ê–¢–ò–¢–¨ –ë–ê–õ–õ–´
###########################
async def anastasia_spend_points(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    score = get_score(user_id)
    text = (f"–ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)?\n–£ –≤–∞—Å {score} –±–∞–ª–ª–æ–≤.\n"
            "–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂ (300), –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –¥–æ 600 —Ä—É–± –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ —Ç.–¥.")
    await query.message.reply_text(text, reply_markup=anastasia_main_menu())

###########################
#     –ö–ë–ñ–£ (–¥–∏–∞–ª–æ–≥)
###########################
async def anastasia_kbju_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    ctx.user_data[user_id]["anastasia_kbju_step"] = "gender"
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º/–∂):")

async def anastasia_handle_kbju_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if "anastasia_kbju_step" not in ctx.user_data[user_id]:
        return

    step = ctx.user_data[user_id]["anastasia_kbju_step"]
    text_in = update.message.text.strip().lower()

    if step == "gender":
        ctx.user_data[user_id]["kbju_gender"] = "male" if text_in.startswith('m') else "female"
        ctx.user_data[user_id]["anastasia_kbju_step"] = "weight"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):")
    elif step == "weight":
        try:
            w = float(text_in)
            ctx.user_data[user_id]["kbju_weight"] = w
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–≥):")
            return
        ctx.user_data[user_id]["anastasia_kbju_step"] = "height"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):")
    elif step == "height":
        try:
            h = float(text_in)
            ctx.user_data[user_id]["kbju_height"] = h
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å–º):")
            return
        ctx.user_data[user_id]["anastasia_kbju_step"] = "age"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):")
    elif step == "age":
        try:
            ag = float(text_in)
            ctx.user_data[user_id]["kbju_age"] = ag
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
        ctx.user_data[user_id]["anastasia_kbju_step"] = "activity"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (1-5):")
    elif step == "activity":
        try:
            act = float(text_in)
            ctx.user_data[user_id]["kbju_activity"] = act
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1-5:")
            return
        ctx.user_data[user_id]["anastasia_kbju_step"] = "goal"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å (–ø–æ—Ö—É–¥–µ—Ç—å / –Ω–∞–±—Ä–∞—Ç—å / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    elif step == "goal":
        ctx.user_data[user_id]["kbju_goal"] = text_in
        # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ä–∞—Å—á–µ—Ç
        gender = ctx.user_data[user_id]["kbju_gender"]
        weight = ctx.user_data[user_id]["kbju_weight"]
        height = ctx.user_data[user_id]["kbju_height"]
        age = ctx.user_data[user_id]["kbju_age"]
        activity = ctx.user_data[user_id]["kbju_activity"]
        goal_text = ctx.user_data[user_id]["kbju_goal"]

        if gender == "male":
            base_cal = 10 * weight + 6.25 * height - 5 * age + 5
        else:
            base_cal = 10 * weight + 6.25 * height - 5 * age - 161

        base_cal *= activity

        if "–ø–æ—Ö—É–¥" in goal_text:
            base_cal *= 0.9
        elif "–Ω–∞–±" in goal_text:
            base_cal *= 1.1

        protein = 0.3 * base_cal / 4
        fat = 0.3 * base_cal / 9
        carbs = 0.4 * base_cal / 4

        ctx.user_data[user_id].pop("anastasia_kbju_step", None)
        msg = (f"–†–∞—Å—á–µ—Ç –ö–ë–ñ–£ (–ê–Ω–∞—Å—Ç–∞—Å–∏—è):\n"
               f"–ö–∫–∞–ª: {int(base_cal)}\n"
               f"–ë–µ–ª–∫–∏: ~{int(protein)} –≥\n"
               f"–ñ–∏—Ä—ã: ~{int(fat)} –≥\n"
               f"–£–≥–ª–µ–≤–æ–¥—ã: ~{int(carbs)} –≥\n")
        await update.message.reply_text(msg, reply_markup=anastasia_main_menu())
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –ö–ë–ñ–£.")

###########################
#     –ö–ù–û–ü–ö–ê ¬´–ù–ê–ó–ê–î¬ª
###########################
async def anastasia_back_to_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–Ω–∞—Å—Ç–∞—Å–∏–∏."""
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ê–Ω–∞—Å—Ç–∞—Å–∏–∏",
        reply_markup=anastasia_main_menu()
    )
