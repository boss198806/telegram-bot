import logging
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Message
from telegram.ext import ContextTypes, CallbackContext

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏
anastasia_user_scores = {}
anastasia_user_status = {}
anastasia_user_reports_sent = {}
anastasia_user_waiting_for_video = {}
anastasia_user_challenges = {}
anastasia_user_waiting_for_receipt = {}

# –°—Ç–∞—Ç—É—Å—ã
statuses = ["–ù–æ–≤–∏—á–æ–∫", "–ë—ã–≤–∞–ª—ã–π", "–ß–µ–º–ø–∏–æ–Ω", "–ü—Ä–æ—Ñ–∏"]

# –ü—Ä–∏–º–µ—Ä group_id - –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ bot.py –∏–ª–∏ –∏–∑ .env
# –ù–æ –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
GROUP_ID = os.getenv("GROUP_ID")  # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ os.getenv("GROUP_ID")

###########################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
###########################
def get_instructor(user_id: int, ctx: ContextTypes.DEFAULT_TYPE) -> str:
    """–ö–∞–∫–æ–π —Ç—Ä–µ–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω?"""
    return ctx.user_data.get(user_id, {}).get("instructor", "anastasia")

def get_score(user_id: int) -> int:
    return anastasia_user_scores.get(user_id, 0)

def add_score(user_id: int, amount: int) -> None:
    anastasia_user_scores[user_id] = anastasia_user_scores.get(user_id, 0) + amount

def get_status(user_id: int) -> str:
    return anastasia_user_status.get(user_id, statuses[0])

def set_status(user_id: int, new_status: str) -> None:
    anastasia_user_status[user_id] = new_status

def anastasia_main_menu() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üî• –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_free_course")],
        [InlineKeyboardButton("üí™ –ß–µ–ª–ª–µ–Ω–¥–∂ (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_challenge_menu")],
        [InlineKeyboardButton("üìö –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_paid_course")],
        [InlineKeyboardButton("üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_my_cabinet")],
        [InlineKeyboardButton("üí∞ –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–∞–ª–ª—ã (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_spend_points")],
        [InlineKeyboardButton("üçΩ –ö–ë–ñ–£ (–ê–ù–ê–°–¢–ê–°–ò–Ø)", callback_data="anastasia_kbju")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="choose_instructor_back")]
    ]
    return InlineKeyboardMarkup(keyboard)

###########################
#       –ë–ï–°–ü–õ–ê–¢–ù–´–ô –ö–£–†–°
###########################
async def anastasia_free_course(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω—è, –µ—Å–ª–∏ –Ω–µ—Ç - —Å—Ç–∞–≤–∏–º 1
    if "anastasia_free_day" not in ctx.user_data[user_id]:
        ctx.user_data[user_id]["anastasia_free_day"] = 1
    day = ctx.user_data[user_id]["anastasia_free_day"]
    if day > 5:
        await query.message.reply_text(
            "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏!",
            reply_markup=anastasia_main_menu()
        )
        return

    # –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercises = {
        1: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 1)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 1)"],
        2: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 2)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 2)"],
        3: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 3)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 3)"],
        4: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 4)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 4)"],
        5: ["–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1 (–¥–µ–Ω—å 5)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2 (–¥–µ–Ω—å 5)"],
    }
    text = f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏, –¥–µ–Ω—å {day}:\n\n" + "\n".join(exercises[day])
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç (–î–µ–Ω—å {day})", callback_data=f"anastasia_send_report_{day}")]
    ])
    await query.message.reply_text(text, reply_markup=kb)

###########################
#       –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û
###########################
async def anastasia_handle_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –õ–æ–≤–∏–º –≤–∏–¥–µ–æ. –ï—Å–ª–∏ –±–æ—Ç –∂–¥–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–µ–æ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å / –ø–ª–∞—Ç–Ω—ã–π), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º.
    """
    user_id = update.message.from_user.id
    if user_id in anastasia_user_waiting_for_video:
        data = anastasia_user_waiting_for_video[user_id]
        if isinstance(data, int):
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
            day = data
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            user_name = update.message.from_user.first_name
            if GROUP_ID:
                await ctx.bot.send_message(chat_id=GROUP_ID,
                    text=f"–í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}), –¥–µ–Ω—å {day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)."
                )
                await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            anastasia_user_reports_sent.setdefault(user_id, {})[day] = True
            add_score(user_id, 60)
            del anastasia_user_waiting_for_video[user_id]

            # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if "anastasia_free_day" not in ctx.user_data[user_id]:
                ctx.user_data[user_id]["anastasia_free_day"] = day
            ctx.user_data[user_id]["anastasia_free_day"] += 1
            if ctx.user_data[user_id]["anastasia_free_day"] <= 5:
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å {day} –ø—Ä–∏–Ω—è—Ç! –í–∞—à–∏ –±–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="anastasia_free_course")]
                    ])
                )
            else:
                set_status(user_id, statuses[1])  # ¬´–ë—ã–≤–∞–ª—ã–π¬ª
                await update.message.reply_text(
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=anastasia_main_menu()
                )
        elif isinstance(data, tuple) and data[0] == "paid":
            # –ü–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
            paid_day = data[1]
            user_name = update.message.from_user.first_name
            if GROUP_ID:
                await ctx.bot.send_message(chat_id=GROUP_ID,
                    text=f"[–ü–ª–∞—Ç–Ω—ã–π] –í–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç {user_name} (ID: {user_id}), –¥–µ–Ω—å {paid_day} (–ê–Ω–∞—Å—Ç–∞—Å–∏—è)."
                )
                await ctx.bot.send_video(chat_id=GROUP_ID, video=update.message.video.file_id)

            # –ù–∞—á–∏—Å–ª—è–µ–º, —É–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            add_score(user_id, 30)
            del anastasia_user_waiting_for_video[user_id]

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥. –¥–Ω—é
            if ctx.user_data[user_id].get("anastasia_paid_day", 1) < 5:
                ctx.user_data[user_id]["anastasia_paid_day"] += 1
                await update.message.reply_text(
                    f"–û—Ç—á–µ—Ç –∑–∞ –ø–ª–∞—Ç–Ω—ã–π –¥–µ–Ω—å {paid_day} –ø—Ä–∏–Ω—è—Ç!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–ª–∞—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞", callback_data="anastasia_paid_next_day")]
                    ])
                )
            else:
                set_status(user_id, statuses[3])  # ¬´–ü—Ä–æ—Ñ–∏¬ª
                await update.message.reply_text(
                    f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏!\n–ë–∞–ª–ª—ã: {get_score(user_id)}",
                    reply_markup=anastasia_main_menu()
                )
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏—è (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")
    else:
        # –í–∏–¥–µ–æ –ø—Ä–∏—à–ª–æ, –Ω–æ –º—ã –Ω–µ –∂–¥–µ–º
        await update.message.reply_text("–Ø –Ω–µ –∂–¥—É –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç –æ—Ç –≤–∞—Å (–ê–Ω–∞—Å—Ç–∞—Å–∏—è).")
