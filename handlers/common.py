import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞.
    """
    user_id = update.effective_user.id

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è /start <args>)
    if ctx.args:
        try:
            ref = int(ctx.args[0])
            if ref != user_id:
                # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                pass
        except ValueError:
            pass

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–ª—è —Å–µ–±—è —Ñ–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üî• –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω", callback_data="instructor_evgeniy"),
                InlineKeyboardButton("üí´ –ê–Ω–∞—Å—Ç–∞—Å–∏—è", callback_data="instructor_anastasia"),
            ],
            [InlineKeyboardButton("üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä 3", callback_data="instructor_3")],
            [InlineKeyboardButton("ü§º –¢—Ä–µ–Ω–µ—Ä 4", callback_data="instructor_4")],
            [InlineKeyboardButton("ü§∏ –¢—Ä–µ–Ω–µ—Ä 5", callback_data="instructor_5")]
        ])
    )

async def handle_instructor_selection(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç—Ä–µ–Ω–µ—Ä–∞ (instructor_evgeniy / instructor_anastasia / instructor_3...).
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤ ctx.user_data[user_id].
    """
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä 'instructor_evgeniy'
    if data == "instructor_evgeniy":
        ctx.user_data[user_id] = {"instructor": "evgeniy"}
        await query.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ï–≤–≥–µ–Ω–∏–π –ö—É—Ä–æ—á–∫–∏–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ú–µ–Ω—é –ï–≤–≥–µ–Ω–∏—è", callback_data="evgeniy_free_course")]
            ])
        )
    elif data == "instructor_anastasia":
        ctx.user_data[user_id] = {"instructor": "anastasia"}
        await query.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –ê–Ω–∞—Å—Ç–∞—Å–∏—è!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ú–µ–Ω—é –ê–Ω–∞—Å—Ç–∞—Å–∏–∏", callback_data="anastasia_free_course")]
            ])
        )
    else:
        # –¢—Ä–µ–Ω–µ—Ä—ã 3,4,5 - placeholder
        ctx.user_data[user_id] = {"instructor": data}
        await query.message.reply_text(
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –µ—â—ë –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="choose_instructor_back")]
            ])
        )

async def handle_instructor_back(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞.
    """
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç—Ä–µ–Ω–µ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
    )
